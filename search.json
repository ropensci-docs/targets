[{"path":"https://docs.ropensci.org/targets/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"https://docs.ropensci.org/targets/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note package released Contributor Code Conduct.","code":""},{"path":"https://docs.ropensci.org/targets/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/ropensci/targets/discussions, can post general questions, brainstorm ideas, ask help. asking help specific issue, please first read https://books.ropensci.org/targets/help.html.","code":""},{"path":"https://docs.ropensci.org/targets/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/ropensci/targets/issues maintenance tasks feature requests. post, please abide guidelines https://books.ropensci.org/targets/help.html.","code":""},{"path":"https://docs.ropensci.org/targets/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea discussion thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"https://docs.ropensci.org/targets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/targets/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree code conduct contributing guidelines. already submitted discussion topic issue discuss idea maintainer.","code":""},{"path":"https://docs.ropensci.org/targets/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"https://docs.ropensci.org/targets/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"what-is-targets","dir":"Articles","previous_headings":"","what":"What is targets?","title":"An overview of targets","text":"targets R package Make-like pipeline toolkit Statistics data science R. targets accelerates analysis easy--configure parallel computing, enhances reproducibility, reduces burdens repeated computation manual data micromanagement. fully --date targets pipeline tangible evidence output aligns code data, substantiates trust results.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"how-to-get-started","dir":"Articles","previous_headings":"","what":"How to get started","title":"An overview of targets","text":"top reference website links number materials help new users start learning targets. lists online talks, tutorials, books, workshops order new user consume . rest main page outlines comprehensive list resources.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"the-walkthrough","dir":"Articles","previous_headings":"","what":"The walkthrough","title":"An overview of targets","text":"user manual starts walkthrough chapter, short tutorial quickly started targets using simple example project. project also repository source code RStudio Cloud workspace lets try workflow web browser. Sign free RStudio Cloud account, click link, try functions tar_make() tar_read() R console.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"help","dir":"Articles","previous_headings":"","what":"Help","title":"An overview of targets","text":"help guide explains best get help using targets, including reproducible examples post.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"An overview of targets","text":"debugging chapter describes two alternative built-systems troubleshooting errors. first system uses workspaces, let load target’s dependencies R session. way usually preferred, especially large pipelines computing clusters, still may require manual work. second system launches interactive debugger pipeline actually running, may feasible situations, can often help reach problem quickly.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"An overview of targets","text":"targets expects users adopt function-oriented style programming. User-defined R functions essential express complexities data generation, analysis, reporting. user manual whole chapter dedicated user-defined functions data science, explains important use targets-powered pipelines.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"target-construction","dir":"Articles","previous_headings":"","what":"Target construction","title":"An overview of targets","text":"target construction chapter explains best practices creating targets: good target , much work target , guidelines thinking side effects upstream dependencies (.e. targets global objects).","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"An overview of targets","text":"packages chapter explains best practices working packages targets: load , work packages projects, target factories inside packages, automatically invalidating targets based changes inside one packages.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"projects","dir":"Articles","previous_headings":"","what":"Projects","title":"An overview of targets","text":"projects chapter explains best practices working targets-powered projects: recommended file structure, recommended third-party tools, multi-project repositories, interdependent projects.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"data-and-files","dir":"Articles","previous_headings":"","what":"Data and files","title":"An overview of targets","text":"chapter https://books.ropensci.org/targets/data.html describes targets package stores data, manages memory, allows customize data processing model. target finishes running tar_make(), returns R object. return values, along descriptive metadata, saved persistent storage pipeline stays date even exit R. default, persistent storage special _targets/ folder created working directory tar_make(). However, can also interact files outside data store send target data cloud.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"literate-programming","dir":"Articles","previous_headings":"","what":"Literate programming","title":"An overview of targets","text":"chapter https://books.ropensci.org/targets/literate-programming.html covers literate programming: render R Markdown Quarto report part targets pipeline. report can depend targets take advantage long computation already completed upstream.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"distributed-computing","dir":"Articles","previous_headings":"","what":"Distributed computing","title":"An overview of targets","text":"targets capable distributing computation pipeline across multiple cores laptop multiple jobs computing cluster. orchestration scaling mechanisms automatic, high-level configuration required. Visit https://books.ropensci.org/targets/crew.html learn . Configuration happens crew package: https://wlandau.github.io/crew/. appendix https://books.ropensci.org/targets/hpc.html describes use targets legacy backends clustermq future.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"An overview of targets","text":"https://books.ropensci.org/targets/performance.html explains monitor progress running pipeline optimize pipeline performance. targets easy--configure efficiency settings level tar_target() tar_option_set().","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"dynamic-branching","dir":"Articles","previous_headings":"","what":"Dynamic branching","title":"An overview of targets","text":"Sometimes, pipeline contains targets user can comfortably type hand. projects hundreds targets, branching can make _targets.R file concise easier read maintain. Dynamic branching way create new targets pipeline running, best suited iterating larger number similar tasks. dynamic branching chapter outlines functionality, including create branching patterns, different ways iterate data, recommendations batching large numbers small tasks comfortably small number dynamic branches.","code":""},{"path":"https://docs.ropensci.org/targets/articles/overview.html","id":"static-branching","dir":"Articles","previous_headings":"","what":"Static branching","title":"An overview of targets","text":"Static branching act defining group targets bulk pipeline starts. Whereas dynamic branching uses last-minute dependency data define branches, static branching uses metaprogramming modify code pipeline front. Whereas dynamic branching excels creating large number similar targets, static branching useful smaller number heterogeneous targets. users find convenient can use tar_manifest() tar_visnetwork() check correctness static branching launching pipeline. Read static branching chapter.","code":""},{"path":"https://docs.ropensci.org/targets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Matthew T. Warkentin. Contributor. Mark Edmondson. Contributor. Samantha Oliver. Reviewer. Tristan Mahr. Reviewer. Eli Lilly Company. Copyright holder, funder.","code":""},{"path":"https://docs.ropensci.org/targets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landau, W. M., (2021). targets R package: dynamic Make-like function-oriented pipeline toolkit reproducibility high-performance computing. Journal Open Source Software, 6(57), 2959, https://doi.org/10.21105/joss.02959","code":"@Article{,   title = {The targets R package: a dynamic Make-like function-oriented pipeline toolkit for reproducibility and high-performance computing},   author = {William Michael Landau},   journal = {Journal of Open Source Software},   year = {2021},   volume = {6},   number = {57},   pages = {2959},   url = {https://doi.org/10.21105/joss.02959}, }"},{"path":"https://docs.ropensci.org/targets/index.html","id":"targets-","dir":"","previous_headings":"","what":"Dynamic Function-Oriented Make-Like Declarative Pipelines","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Pipeline tools coordinate pieces computationally demanding analysis projects. targets package Make-like pipeline tool statistics data science R. package skips costly runtime tasks already date, orchestrates necessary computation implicit parallel computing, abstracts files R objects. current output matches current upstream code data, whole pipeline date, results trustworthy otherwise.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"pipeline computational workflow statistics, analytics, data science. Examples include forecasting customer behavior, simulating clinical trial, detecting differential expression genomics data. pipeline contains tasks prepare datasets, run models, summarize results business deliverable research paper. methods behind tasks user-defined R functions live R scripts, ideally folder called \"R/\" project. tasks called “targets”, run functions return R objects. targets package orchestrates targets stores output objects make pipeline efficient, painless, reproducible.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Familiarity R programming language, covered R Data Science. Data science workflow management techniques. write functions prepare data, analyze data, summarize results data analysis project.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"using targets crew distributed computing, recommended use crew version 0.4.0 higher. multiple ways install targets package , latest release development version available.","code":"install.packages(\"crew\")"},{"path":"https://docs.ropensci.org/targets/index.html","id":"get-started-in-4-minutes","dir":"","previous_headings":"","what":"Get started in 4 minutes","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"4-minute video https://vimeo.com/700982360 demonstrates example pipeline used walkthrough functions chapters user manual. Visit https://github.com/wlandau/targets-four-minutes code https://rstudio.cloud/project/3946303 try code browser (download installation required).","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"create pipeline : Write R functions pipeline save R scripts (ideally \"R/\" folder project). Call use_targets() write key files, including vital _targets.R file configures defines pipeline. Follow comments _targets.R fill details specific pipeline. Check pipeline tar_visnetwork(), run tar_make(), read output tar_read(). functions available.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"User manual: -depth discussion use targets. important chapters walkthrough, help guide, debugging guide. Reference website: formal documentation user-side functions, statement need, multiple design documents internal architecture. Developer documentation: software design documents developers contributing deep internal architecture targets.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Please read help guide learn best ask help using targets.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"courses","dir":"","previous_headings":"","what":"Courses","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Carpentries workshop Joel Nitta Half-day interactive tutorial Keras example","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/index.html","id":"english","dir":"","previous_headings":"Selected talks","what":"English","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Get started targets 4 minutes (4:08) targets Action Joel Nitta Eric Scott. rOpenSci Community Call (1:09:56). targets crew clinical trial simulation pipelines. R/Pharma 2023 (1:57:22). targets stantargets Bayesian model validation pipelines. R/Medicine 2021 (15:33) Reproducible computation scale R targets New York Open Statistical Programming Meetup, December 2020 (1:54:28). ds-incubator series, 2021 Mauro Lepore.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"español","dir":"","previous_headings":"Selected talks","what":"Español","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Introducción targets. Irene Cruz, R-Ladies Barcelona, 2021-05-25 (1:25:12).","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"日本語","dir":"","previous_headings":"Selected talks","what":"日本語","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Bio”Pack”athon, 2022-03-31 (1:04:10), Joel Nitta","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"example-projects","dir":"","previous_headings":"","what":"Example projects","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Four-minute example Minimal example Machine learning Keras Validate minimal Stan model Using Target Markdown stantargets validate Bayesian longitudinal model clinical trial data analysis Shiny app runs pipeline Deploy pipeline RStudio Connect","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"apps","dir":"","previous_headings":"","what":"Apps","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"tar_watch(): built-Shiny app visualize progress pipeline running. Available Shiny module via tar_watch_ui() tar_watch_server(). targetsketch: Shiny app help sketch pipelines (app, source).","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"deployment","dir":"","previous_headings":"","what":"Deployment","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"https://solutions.rstudio.com/r/workflows/ explains deploy pipeline RStudio Connect (example code). tar_github_actions() sets pipeline run GitHub Actions. minimal example demonstrates approach.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"extending-and-customizing-targets","dir":"","previous_headings":"","what":"Extending and customizing targets","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"R Targetopia: collection R packages extend targets. packages simplify pipeline construction specific fields Statistics data science. Target factories: programming technique write specialized interfaces custom pipelines. Posts describe .","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"Please note package released Contributor Code Conduct.","code":""},{"path":"https://docs.ropensci.org/targets/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Dynamic Function-Oriented Make-Like Declarative Pipelines","text":"","code":"citation(\"targets\") To cite targets in publications use:    Landau, W. M., (2021). The targets R package: a dynamic Make-like   function-oriented pipeline toolkit for reproducibility and   high-performance computing. Journal of Open Source Software, 6(57),   2959, https://doi.org/10.21105/joss.02959  A BibTeX entry for LaTeX users is    @Article{,     title = {The targets R package: a dynamic Make-like function-oriented pipeline toolkit for reproducibility and high-performance computing},     author = {William Michael Landau},     journal = {Journal of Open Source Software},     year = {2021},     volume = {6},     number = {57},     pages = {2959},     url = {https://doi.org/10.21105/joss.02959},   }"},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: callr arguments. — callr_args_default","title":"Deprecated: callr arguments. — callr_args_default","text":"Deprecated 2022-08-05 (version 0.13.1). Please use tar_callr_args_default() instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: callr arguments. — callr_args_default","text":"","code":"callr_args_default(callr_function, reporter = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: callr arguments. — callr_args_default","text":"callr_function function callr package starts external R process. reporter Character length 1, choice reporter tar_make() related function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: callr arguments. — callr_args_default","text":"list arguments callr_function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: callr arguments. — callr_args_default","text":"user-side function. invoke directly. Exported internal purposes .","code":""},{"path":"https://docs.ropensci.org/targets/reference/callr_args_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: callr arguments. — callr_args_default","text":"","code":"tar_callr_args_default(callr::r) #> $spinner #> [1] TRUE #>"},{"path":"https://docs.ropensci.org/targets/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to call tar_glimpse(). — rstudio_addin_tar_glimpse","title":"RStudio addin to call tar_glimpse(). — rstudio_addin_tar_glimpse","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to call tar_glimpse(). — rstudio_addin_tar_glimpse","text":"","code":"rstudio_addin_tar_glimpse()"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_load.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to call tar_load() on the symbol at the cursor. — rstudio_addin_tar_load","title":"RStudio addin to call tar_load() on the symbol at the cursor. — rstudio_addin_tar_load","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to call tar_load() on the symbol at the cursor. — rstudio_addin_tar_load","text":"","code":"rstudio_addin_tar_load(context = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin to call tar_load() on the symbol at the cursor. — rstudio_addin_tar_load","text":"context RStudio API context rstudioapi::getActiveDocumentContext().","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_make_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to run tar_make() in the background. — rstudio_addin_tar_make_bg","title":"RStudio addin to run tar_make() in the background. — rstudio_addin_tar_make_bg","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_make_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to run tar_make() in the background. — rstudio_addin_tar_make_bg","text":"","code":"rstudio_addin_tar_make_bg()"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_outdated.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to call tar_outdated(). — rstudio_addin_tar_outdated","title":"RStudio addin to call tar_outdated(). — rstudio_addin_tar_outdated","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_outdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to call tar_outdated(). — rstudio_addin_tar_outdated","text":"","code":"rstudio_addin_tar_outdated()"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to print tail(tar_progress()). — rstudio_addin_tar_progress","title":"RStudio addin to print tail(tar_progress()). — rstudio_addin_tar_progress","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to print tail(tar_progress()). — rstudio_addin_tar_progress","text":"","code":"rstudio_addin_tar_progress()"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_read.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to call tar_read() on the symbol at the cursor. — rstudio_addin_tar_read","title":"RStudio addin to call tar_read() on the symbol at the cursor. — rstudio_addin_tar_read","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to call tar_read() on the symbol at the cursor. — rstudio_addin_tar_read","text":"","code":"rstudio_addin_tar_read(context = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin to call tar_read() on the symbol at the cursor. — rstudio_addin_tar_read","text":"context RStudio API context rstudioapi::getActiveDocumentContext().","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_target.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to insert ","title":"RStudio addin to insert ","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to insert ","text":"","code":"rstudio_addin_tar_target(context = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RStudio addin to insert ","text":"context RStudio API context rstudioapi::getActiveDocumentContext().","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio addin to call tar_visnetwork(). — rstudio_addin_tar_visnetwork","title":"RStudio addin to call tar_visnetwork(). — rstudio_addin_tar_visnetwork","text":"internal use . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/rstudio_addin_tar_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio addin to call tar_visnetwork(). — rstudio_addin_tar_visnetwork","text":"","code":"rstudio_addin_tar_visnetwork()"},{"path":"https://docs.ropensci.org/targets/reference/tar_active.html","id":null,"dir":"Reference","previous_headings":"","what":"Show if the pipeline is running. — tar_active","title":"Show if the pipeline is running. — tar_active","text":"Return TRUE called target _targets.R pipeline running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show if the pipeline is running. — tar_active","text":"","code":"tar_active()"},{"path":"https://docs.ropensci.org/targets/reference/tar_active.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show if the pipeline is running. — tar_active","text":"Logical length 1, TRUE called target _targets.R pipeline running (FALSE otherwise).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_active.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show if the pipeline is running. — tar_active","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_active() # FALSE tar_script({   library(targets)   library(tarchetypes)   message(\"Pipeline running? \", tar_active())   tar_target(x, tar_active()) }) tar_manifest() # prints \"Pipeline running? FALSE\" tar_make() # prints \"pipeline running? TRUE\" tar_read(x) # TRUE }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertions — tar_assert","title":"Assertions — tar_assert","text":"functions assert correctness user inputs generate custom error conditions needed. Useful writing packages built top targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertions — tar_assert","text":"","code":"tar_assert_chr(x, msg = NULL)  tar_assert_dbl(x, msg = NULL)  tar_assert_df(x, msg = NULL)  tar_assert_equal_lengths(x, msg = NULL)  tar_assert_envir(x, msg = NULL)  tar_assert_expr(x, msg = NULL)  tar_assert_flag(x, choices, msg = NULL)  tar_assert_file(x)  tar_assert_finite(x, msg = NULL)  tar_assert_function(x, msg = NULL)  tar_assert_function_arguments(x, args, msg = NULL)  tar_assert_ge(x, threshold, msg = NULL)  tar_assert_identical(x, y, msg = NULL)  tar_assert_in(x, choices, msg = NULL)  tar_assert_not_dirs(x, msg = NULL)  tar_assert_not_dir(x, msg = NULL)  tar_assert_not_in(x, choices, msg = NULL)  tar_assert_inherits(x, class, msg = NULL)  tar_assert_int(x, msg = NULL)  tar_assert_internet(msg = NULL)  tar_assert_lang(x, msg = NULL)  tar_assert_le(x, threshold, msg = NULL)  tar_assert_list(x, msg = NULL)  tar_assert_lgl(x, msg = NULL)  tar_assert_name(x)  tar_assert_named(x, msg = NULL)  tar_assert_names(x, msg = NULL)  tar_assert_nonempty(x, msg = NULL)  tar_assert_null(x, msg = NULL)  tar_assert_not_expr(x, msg = NULL)  tar_assert_nzchar(x, msg = NULL)  tar_assert_package(package, msg = NULL)  tar_assert_path(path, msg = NULL)  tar_assert_match(x, pattern, msg = NULL)  tar_assert_nonmissing(x, msg = NULL)  tar_assert_positive(x, msg = NULL)  tar_assert_scalar(x, msg = NULL)  tar_assert_store(store)  tar_assert_target(x, msg = NULL)  tar_assert_target_list(x)  tar_assert_true(x, msg = NULL)  tar_assert_unique(x, msg = NULL)  tar_assert_unique_targets(x)"},{"path":"https://docs.ropensci.org/targets/reference/tar_assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertions — tar_assert","text":"x R object, input validated. kind object depends specific assertion function called. msg Character length 1, message printed console x invalid. choices Character vector choices x certain assertions. args Character vector expected function argument names. Order matters. threshold Numeric length 1, lower/upper bound assertions like tar_assert_le()/tar_assert_ge(). y R object, value compare x. class Character vector expected class names. package Character length 1, name R package. path Character, file path. pattern Character length 1, grep pattern certain assertions. store Character length 1, path data store pipeline.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assertions — tar_assert","text":"","code":"tar_assert_chr(\"123\") try(tar_assert_chr(123)) #> Error : 123 must be a character."},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Superseded: exponential backoff — tar_backoff","title":"Superseded: exponential backoff — tar_backoff","text":"Superseded: configure exponential backoff polling tasks pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superseded: exponential backoff — tar_backoff","text":"","code":"tar_backoff(min = 0.001, max = 0.1, rate = 1.5)"},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Superseded: exponential backoff — tar_backoff","text":"min Positive numeric length 1, minimum polling interval seconds. Must least sqrt(.Machine$double.eps). max Positive numeric length 1, maximum polling interval seconds. Must least sqrt(.Machine$double.eps). rate Positive numeric length 1, greater equal 1. Multiplicative rate parameter allows exponential backoff minimum polling interval increase min max. Actual polling intervals sampled uniformly current minimum max.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Superseded: exponential backoff — tar_backoff","text":"function superseded now relevant superseded functions tar_make_clustermq() tar_make_future(). tar_make() uses crew efficient non-polling way, making exponential backoff unnecessary.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":"backoff","dir":"Reference","previous_headings":"","what":"Backoff","title":"Superseded: exponential backoff — tar_backoff","text":"high-performance computing can expensive repeatedly poll priority queue targets ready process. number seconds polls runif(1, min, max(max, min * rate ^ index)), index number consecutive polls far found targets ready skip run, min, max, rate arguments tar_backoff(). (target ready, index goes 1. target ready, index resets 0. information exponential, backoff, visit https://en.wikipedia.org/wiki/Exponential_backoff). Raising min max kinder CPU etc. may incur delays instances.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_backoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Superseded: exponential backoff — tar_backoff","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_option_set(backoff = tar_backoff(min = 0.001, max = 0.1, rate = 1.5)) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine pipeline objects (deprecated). — tar_bind","title":"Combine pipeline objects (deprecated). — tar_bind","text":"Functions tar_pipeline() tar_bind() deprecated. Instead, simply end target script file (default: _targets.R) file list target objects. can nest objects however like.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine pipeline objects (deprecated). — tar_bind","text":"","code":"tar_bind(...)"},{"path":"https://docs.ropensci.org/targets/reference/tar_bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine pipeline objects (deprecated). — tar_bind","text":"... Pipeline objects nested lists pipeline objects. can generate pipeline object tar_pipeline().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_bind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine pipeline objects (deprecated). — tar_bind","text":"Deprecated 2021-01-03.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine pipeline objects (deprecated). — tar_bind","text":"","code":"# In your target script file (default: _targets.R): library(targets) list( # You no longer need tar_pipeline() here.   tar_target(data_file, \"data.csv\", format = \"file\"),   list( # Target lists can be arbitrarily nested.     tar_target(data_object, read.csv(data_file)),     tar_target(analysis, analyze(data_object))   ) ) #> [[1]] #> <tar_stem>  #>   name: data_file  #>   description:   #>   command: #>     \"data.csv\"  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]] #> [[2]][[1]] #> <tar_stem>  #>   name: data_object  #>   description:   #>   command: #>     read.csv(data_file)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]][[2]] #> <tar_stem>  #>   name: analysis  #>   description:   #>   command: #>     analyze(data_object)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #>"},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer branch indexes — tar_branch_index","title":"Integer branch indexes — tar_branch_index","text":"Get integer indexes individual branch names within corresponding dynamic branching targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer branch indexes — tar_branch_index","text":"","code":"tar_branch_index(names, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer branch indexes — tar_branch_index","text":"names Character vector branch names. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer branch indexes — tar_branch_index","text":"named integer vector branch indexes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer branch indexes — tar_branch_index","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(4)),     tar_target(y, 2 * x, pattern = map(x)),     tar_target(z, y, pattern = map(y))   ) }, ask = FALSE) tar_make() names <- c(   tar_meta(y, children)$children[[1]][c(2, 3)],   tar_meta(z, children)$children[[1]][2] ) names tar_branch_index(names) # c(2, 3, 2) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Branch names — tar_branch_names","title":"Branch names — tar_branch_names","text":"Get branch names dynamic branching target using numeric indexes. tar_branch_names() expects unevaluated symbol name argument, whereas tar_branch_names_raw() expects character string name.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branch names — tar_branch_names","text":"","code":"tar_branch_names(name, index, store = targets::tar_config_get(\"store\"))  tar_branch_names_raw(name, index, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branch names — tar_branch_names","text":"name Name dynamic branching target. tar_branch_names() expects unevaluated symbol name argument, whereas tar_branch_names_raw() expects character string name. index Integer vector branch indexes. store Character string, directory path targets data store pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branch names — tar_branch_names","text":"character vector branch names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_branch_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branch names — tar_branch_names","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(4)),     tar_target(y, 2 * x, pattern = map(x)),     tar_target(z, y, pattern = map(y))   ) }, ask = FALSE) tar_make() tar_branch_names(z, c(2, 3)) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct the branch names and the names of their dependencies. — tar_branches","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"Given branching pattern, use available metadata reconstruct branch names names branch's dependencies. metadata target must already exist consistent metadata targets involved.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"","code":"tar_branches(   name,   pattern = NULL,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"name Symbol, name target. pattern Language define branching target (just like tar_target()) NULL get pattern targets pipeline script specified script argument (default: _targets.R). script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"tibble one row per branch one column target (including branched-targets target pattern.)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"results function can help retroactively figure correspondences upstream branches downstream branches. However, always correctly predict names branches next run pipeline. Dynamic branching happens pipeline running, always know names branches advance (even many ).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstruct the branch names and the names of their dependencies. — tar_branches","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, head(letters, 2)),     tar_target(z, head(LETTERS, 2)),     tar_target(dynamic, c(x, y, z), pattern = cross(z, map(x, y)))   ) }, ask = FALSE) tar_make() tar_branches(dynamic) tar_branches(dynamic, pattern = cross(z, map(x, y))) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_built.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: list built targets. — tar_built","title":"Deprecated: list built targets. — tar_built","text":"Deprecated favor tar_completed() 2023-12-04 (version 1.3.2.9004).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_built.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: list built targets. — tar_built","text":"","code":"tar_built(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_built.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: list built targets. — tar_built","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_built.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: list built targets. — tar_built","text":"character vector completed targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_built.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: list built targets. — tar_built","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_completed() tar_completed(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the called targets function. — tar_call","title":"Identify the called targets function. — tar_call","text":"Get name currently running targets interface function. Returns NULL invoked inside target _targets.R (.e. directly invoked tar_make(), tar_visnetwork(), etc.).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the called targets function. — tar_call","text":"","code":"tar_call()"},{"path":"https://docs.ropensci.org/targets/reference/tar_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the called targets function. — tar_call","text":"Character length 1, name currently running targets interface function. example, suppose call tar_call() inside target _targets.R. run tar_make(), tar_call() return \"tar_make\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the called targets function. — tar_call","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_call() # NULL tar_script({   library(targets)   library(tarchetypes)   message(\"called function: \", tar_call())   tar_target(x, tar_call()) }) tar_manifest() # prints \"called function: tar_manifest\" tar_make() # prints \"called function: tar_make\" tar_read(x) # \"tar_make\" }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default callr arguments. — tar_callr_args_default","title":"Default callr arguments. — tar_callr_args_default","text":"Default callr arguments callr_arguments argument tar_make() related functions.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default callr arguments. — tar_callr_args_default","text":"","code":"tar_callr_args_default(callr_function, reporter = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default callr arguments. — tar_callr_args_default","text":"callr_function function callr package starts external R process. reporter Character length 1, choice reporter tar_make() related function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default callr arguments. — tar_callr_args_default","text":"list arguments callr_function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default callr arguments. — tar_callr_args_default","text":"user-side function. invoke directly. Exported internal purposes .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_args_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default callr arguments. — tar_callr_args_default","text":"","code":"tar_callr_args_default(callr::r) #> $spinner #> [1] TRUE #>"},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_inner_try.html","id":null,"dir":"Reference","previous_headings":"","what":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","title":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","text":"user-side function. invoke directly. Exported internal purposes .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_inner_try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","text":"","code":"tar_callr_inner_try(   targets_function,   targets_arguments,   options,   envir = NULL,   parent,   script,   store,   fun,   pid_parent )"},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_inner_try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","text":"targets_function function targets call. targets_arguments Named list arguments targets_function. options Names global options temporarily set callr process. envir Name environment run . NULL, environment defaults tar_option_get(\"envir\"). parent Parent environment call tar_call_inner(). script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project. fun Character length 1, name targets function called. pid_parent Integer length 1, process ID calling process, e.g. one called tar_make().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_inner_try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","text":"output call targets function uses callr reproducibility.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_callr_inner_try.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invoke a targets task from inside a callr function (without error handling). — tar_callr_inner_try","text":"","code":"# See the examples of tar_make()."},{"path":"https://docs.ropensci.org/targets/reference/tar_cancel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancel a target mid-execution under a custom condition. — tar_cancel","title":"Cancel a target mid-execution under a custom condition. — tar_cancel","text":"Cancel target command running condition met.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cancel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancel a target mid-execution under a custom condition. — tar_cancel","text":"","code":"tar_cancel(condition = TRUE)"},{"path":"https://docs.ropensci.org/targets/reference/tar_cancel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cancel a target mid-execution under a custom condition. — tar_cancel","text":"condition Logical length 1, whether cancel target.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cancel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cancel a target mid-execution under a custom condition. — tar_cancel","text":"Must invoked target . tar_cancel() interrupt target another process.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_cancel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cancel a target mid-execution under a custom condition. — tar_cancel","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(x, tar_cancel(1 > 0))) tar_make() # Should cancel target x. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_canceled.html","id":null,"dir":"Reference","previous_headings":"","what":"List canceled targets. — tar_canceled","title":"List canceled targets. — tar_canceled","text":"List targets whose progress \"canceled\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_canceled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List canceled targets. — tar_canceled","text":"","code":"tar_canceled(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_canceled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List canceled targets. — tar_canceled","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_canceled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List canceled targets. — tar_canceled","text":"character vector canceled targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_canceled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List canceled targets. — tar_canceled","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_canceled() tar_canceled(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Local CAS download. — tar_cas_d","title":"Local CAS download. — tar_cas_d","text":"internal use .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local CAS download. — tar_cas_d","text":"","code":"tar_cas_d(cas, key, path)"},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local CAS download. — tar_cas_d","text":"cas File path CAS repository. NULL default file.path(tar_config_get(\"store\"), \"cas\") (usually \"_targets/cas/\"). key Key object CAS system. path Staging path file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local CAS download. — tar_cas_d","text":"Called side effects.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_e.html","id":null,"dir":"Reference","previous_headings":"","what":"Existence check in local CAS. — tar_cas_e","title":"Existence check in local CAS. — tar_cas_e","text":"internal use .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Existence check in local CAS. — tar_cas_e","text":"","code":"tar_cas_e(cas, key)"},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Existence check in local CAS. — tar_cas_e","text":"cas File path CAS repository. NULL default file.path(tar_config_get(\"store\"), \"cas\") (usually \"_targets/cas/\"). key Key object CAS system.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Existence check in local CAS. — tar_cas_e","text":"TRUE key exists CAS system, FALSE otherwise.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Existence check in local CAS. — tar_cas_e","text":"short function name helps reduce size tar_repository_cas() format string save space metadata. tar_cas_e() uses -memory cache package internal environment maintain list keys exists. avoids expensive one-time lookups file system tar_make().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Local CAS upload. — tar_cas_u","title":"Local CAS upload. — tar_cas_u","text":"internal use .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local CAS upload. — tar_cas_u","text":"","code":"tar_cas_u(cas, key, path)"},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local CAS upload. — tar_cas_u","text":"cas File path CAS repository. NULL default file.path(tar_config_get(\"store\"), \"cas\") (usually \"_targets/cas/\"). key Key object CAS system. path Staging path file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_u.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local CAS upload. — tar_cas_u","text":"Called side effects.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cas_u.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local CAS upload. — tar_cas_u","text":"short function name helps reduce size tar_repository_cas() format string save space metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_completed.html","id":null,"dir":"Reference","previous_headings":"","what":"List completed targets. — tar_completed","title":"List completed targets. — tar_completed","text":"List targets whose progress \"completed\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_completed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List completed targets. — tar_completed","text":"","code":"tar_completed(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_completed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List completed targets. — tar_completed","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_completed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List completed targets. — tar_completed","text":"character vector completed targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_completed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List completed targets. — tar_completed","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_completed() tar_completed(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions — tar_condition","title":"Conditions — tar_condition","text":"functions throw custom targets-specific error conditions. Useful error handling packages built top targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions — tar_condition","text":"","code":"tar_message_run(...)  tar_throw_file(...)  tar_throw_run(..., class = character(0))  tar_throw_validate(...)  tar_warn_deprecate(...)  tar_warn_run(...)  tar_warn_validate(...)  tar_message_validate(...)  tar_print(...)  tar_error(message, class)  tar_warning(message, class)  tar_message(message, class)"},{"path":"https://docs.ropensci.org/targets/reference/tar_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions — tar_condition","text":"... zero objects can coerced character     (pasted together separator) single     condition object. class Character vector S3 classes message. message Character length 1, text message.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_condition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditions — tar_condition","text":"","code":"try(tar_throw_validate(\"something is not valid\")) #> Error : something is not valid"},{"path":"https://docs.ropensci.org/targets/reference/tar_condition_traced.html","id":null,"dir":"Reference","previous_headings":"","what":"Contain an error condition and formatted traceback. — tar_condition_traced","title":"Contain an error condition and formatted traceback. — tar_condition_traced","text":"user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_condition_traced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contain an error condition and formatted traceback. — tar_condition_traced","text":"","code":"tar_condition_traced(condition, trace)"},{"path":"https://docs.ropensci.org/targets/reference/tar_condition_traced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contain an error condition and formatted traceback. — tar_condition_traced","text":"condition error condition object thrown stop() rlang::abort(). trace raw return value .traceback().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_condition_traced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contain an error condition and formatted traceback. — tar_condition_traced","text":"Contain error condition formatted traceback.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get configuration settings. — tar_config_get","title":"Get configuration settings. — tar_config_get","text":"Read custom settings current project optional YAML configuration file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get configuration settings. — tar_config_get","text":"","code":"tar_config_get(   name,   config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"),   project = Sys.getenv(\"TAR_PROJECT\", \"main\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get configuration settings. — tar_config_get","text":"name Character length 1, name specific configuration setting retrieve. config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). project Character length 1, name current targets project. Thanks config R package, targets YAML configuration files can store multiple sets configuration settings, set corresponding project. project argument allows set get configuration setting specific project given call tar_config_set() tar_config_get(). default project always called \"main\" unless set another default project using TAR_PROJECT environment variable, e.g. Sys.setenv(tar_project = \"custom\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get configuration settings. — tar_config_get","text":"value configuration setting YAML configuration file (default: _targets.yaml) default value setting available. data type return value depends choice name.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Get configuration settings. — tar_config_get","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Get configuration settings. — tar_config_get","text":"several key functions like tar_make(), default values arguments controlled though tar_config_get(). tar_config_get() retrieves data optional YAML configuration file. can control settings YAML file programmatically tar_config_set(). default file path YAML file _targets.yaml, can set another path globally using TAR_CONFIG environment variable. YAML file can store configuration settings multiple projects, can globally set default project TAR_PROJECT environment variable. structure YAML file follows rules similar config R package, e.g. projects can inherit settings one another using inherits field. Exceptions include: requirement configuration named \"default\". projects inherit default project` automatically. fields need values targets already defaults. targets actually invoke config package. implementation targets written scratch without viewing copying part source code config.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_config_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get configuration settings. — tar_config_get","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(list(tar_target(x, 1 + 1))) tar_config_get(\"store\") # \"_targets\" store_path <- tempfile() tar_config_set(store = store_path) tar_config_get(\"store\") # Shows a temp file. tar_make() # Writes to the custom data store identified in _targets.yaml. tar_read(x) # tar_read() knows about _targets.yaml too. file.exists(\"_targets\") # FALSE file.exists(store_path) # TRUE }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"List projects. — tar_config_projects","title":"List projects. — tar_config_projects","text":"List names projects defined _targets.yaml.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List projects. — tar_config_projects","text":"","code":"tar_config_projects(config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List projects. — tar_config_projects","text":"config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List projects. — tar_config_projects","text":"Character vector names projects defined _targets.yaml.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"List projects. — tar_config_projects","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"List projects. — tar_config_projects","text":"several key functions like tar_make(), default values arguments controlled though tar_config_get(). tar_config_get() retrieves data optional YAML configuration file. can control settings YAML file programmatically tar_config_set(). default file path YAML file _targets.yaml, can set another path globally using TAR_CONFIG environment variable. YAML file can store configuration settings multiple projects, can globally set default project TAR_PROJECT environment variable. structure YAML file follows rules similar config R package, e.g. projects can inherit settings one another using inherits field. Exceptions include: requirement configuration named \"default\". projects inherit default project` automatically. fields need values targets already defaults. targets actually invoke config package. implementation targets written scratch without viewing copying part source code config.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_config_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List projects. — tar_config_projects","text":"","code":"yaml <- tempfile() tar_config_set(store = \"my_store_a\", config = yaml, project = \"project_a\") tar_config_set(store = \"my_store_b\", config = yaml, project = \"project_b\") tar_config_projects(config = yaml) #> [1] \"project_a\" \"project_b\""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set configuration settings. — tar_config_set","title":"Set configuration settings. — tar_config_set","text":"tar_config_set() writes special custom settings current project optional YAML configuration file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set configuration settings. — tar_config_set","text":"","code":"tar_config_set(   inherits = NULL,   as_job = NULL,   garbage_collection = NULL,   label = NULL,   label_width = NULL,   level_separation = NULL,   reporter_make = NULL,   reporter_outdated = NULL,   script = NULL,   seconds_meta_append = NULL,   seconds_meta_upload = NULL,   seconds_reporter = NULL,   seconds_interval = NULL,   store = NULL,   shortcut = NULL,   use_crew = NULL,   workers = NULL,   config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"),   project = Sys.getenv(\"TAR_PROJECT\", \"main\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set configuration settings. — tar_config_set","text":"inherits Character length 1, name project current project inherit configuration settings. current project project argument, defaults Sys.getenv(\"TAR_PROJECT\", \"main\"). inherits argument NULL, inherits setting modified. Use tar_config_unset() delete setting. as_job Logical length 1, as_job argument tar_make(). TRUE run RStudio IDE / Posit Workbench job, FALSE run callr process main R session (depending callr_function argument). as_job_ TRUE, rstudioapi package must installed. garbage_collection Deprecated. Use garbage_collection argument tar_option_set() instead run garbage collection regular intervals pipeline, use argument name tar_target() activate garbage collection specific target. label Argument tar_glimpse() tar_visnetwork() control node labels. label_width Argument tar_glimpse() tar_visnetwork() control maximum width (number characters wide) node labels. level_separation Argument tar_visnetwork() tar_glimpse() control space hierarchical levels. reporter_make Character length 1, reporter argument tar_make() related functions run pipeline. argument NULL, setting modified. Use tar_config_unset() delete setting. reporter_outdated Character length 1, reporter argument tar_outdated() related functions run pipeline. argument NULL, setting modified. Use tar_config_unset() delete setting. script Character length 1, path target script file defines pipeline (_targets.R default). path either absolute path path relative project root call tar_make() functions. tar_make() friends run script current working directory. argument NULL, setting modified. Use tar_config_unset() delete setting. seconds_meta_append Argument tar_make(), tar_make_clustermq(), tar_make_future(). Positive numeric length 1 minimum number seconds saves local metadata progress files data store. Higher values generally make pipeline run faster, unsaved work (event crash) date. pipeline ends, metadata progress data saved immediately, regardless seconds_meta_append. seconds_meta_upload Argument tar_make(), tar_make_clustermq(), tar_make_future(). Positive numeric length 1 minimum number seconds uploads metadata progress data cloud (see https://books.ropensci.org/targets/cloud-storage.html). Higher values generally make pipeline run faster, unsaved work (event crash) may backed cloud. pipeline ends, metadata progress data uploaded immediately, regardless seconds_meta_upload. seconds_reporter Argument tar_make(), tar_make_clustermq(), tar_make_future(). Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. seconds_interval Deprecated 2023-08-24 (version 1.2.2.9001). Use seconds_meta_append, seconds_meta_upload, seconds_reporter instead. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. shortcut logical length 1, default shortcut argument tar_make() related functions. argument NULL, setting modified. Use tar_config_unset() delete setting. use_crew Logical length 1, whether use crew tar_make() controller option set tar_option_set() target script (_targets.R). See https://books.ropensci.org/targets/crew.html details. workers Positive numeric length 1, workers argument tar_make_clustermq() related functions run pipeline parallel computing among targets. argument NULL, setting modified. Use tar_config_unset() delete setting. config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). project Character length 1, name current targets project. Thanks config R package, targets YAML configuration files can store multiple sets configuration settings, set corresponding project. project argument allows set get configuration setting specific project given call tar_config_set() tar_config_get(). default project always called \"main\" unless set another default project using TAR_PROJECT environment variable, e.g. Sys.setenv(tar_project = \"custom\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set configuration settings. — tar_config_set","text":"NULL (invisibly)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Set configuration settings. — tar_config_set","text":"several key functions like tar_make(), default values arguments controlled though tar_config_get(). tar_config_get() retrieves data optional YAML configuration file. can control settings YAML file programmatically tar_config_set(). default file path YAML file _targets.yaml, can set another path globally using TAR_CONFIG environment variable. YAML file can store configuration settings multiple projects, can globally set default project TAR_PROJECT environment variable. structure YAML file follows rules similar config R package, e.g. projects can inherit settings one another using inherits field. Exceptions include: requirement configuration named \"default\". projects inherit default project` automatically. fields need values targets already defaults. targets actually invoke config package. implementation targets written scratch without viewing copying part source code config.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Set configuration settings. — tar_config_set","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_config_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set configuration settings. — tar_config_set","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(list(tar_target(x, 1 + 1))) tar_config_get(\"store\") # NULL (data store defaults to \"_targets/\") store_path <- tempfile() tar_config_set(store = store_path) tar_config_get(\"store\") # Shows a temp file. tar_make() # Writes to the custom data store identified in _targets.yaml. tar_read(x) # tar_read() knows about _targets.yaml too. file.exists(\"_targets\") # FALSE file.exists(store_path) # TRUE }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":null,"dir":"Reference","previous_headings":"","what":"Unset configuration settings. — tar_config_unset","title":"Unset configuration settings. — tar_config_unset","text":"Unset (.e. delete) one custom settings current project optional YAML configuration file. , tar_option_get() return original default values settings project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unset configuration settings. — tar_config_unset","text":"","code":"tar_config_unset(   names = character(0),   config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"),   project = Sys.getenv(\"TAR_PROJECT\", \"main\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unset configuration settings. — tar_config_unset","text":"names Character vector configuration settings delete current project. config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). project Character length 1, name current targets project. Thanks config R package, targets YAML configuration files can store multiple sets configuration settings, set corresponding project. project argument allows set get configuration setting specific project given call tar_config_set() tar_config_get(). default project always called \"main\" unless set another default project using TAR_PROJECT environment variable, e.g. Sys.setenv(tar_project = \"custom\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unset configuration settings. — tar_config_unset","text":"NULL (invisibly)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Unset configuration settings. — tar_config_unset","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Unset configuration settings. — tar_config_unset","text":"several key functions like tar_make(), default values arguments controlled though tar_config_get(). tar_config_get() retrieves data optional YAML configuration file. can control settings YAML file programmatically tar_config_set(). default file path YAML file _targets.yaml, can set another path globally using TAR_CONFIG environment variable. YAML file can store configuration settings multiple projects, can globally set default project TAR_PROJECT environment variable. structure YAML file follows rules similar config R package, e.g. projects can inherit settings one another using inherits field. Exceptions include: requirement configuration named \"default\". projects inherit default project` automatically. fields need values targets already defaults. targets actually invoke config package. implementation targets written scratch without viewing copying part source code config.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_config_unset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unset configuration settings. — tar_config_unset","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(list(tar_target(x, 1 + 1))) tar_config_get(\"store\") # \"_targets\" store_path <- tempfile() tar_config_set(store = store_path) tar_config_get(\"store\") # Shows a temp file. tar_config_unset(\"store\") tar_config_get(\"store\") # _targets }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Read _targets.yaml. — tar_config_yaml","title":"Read _targets.yaml. — tar_config_yaml","text":"Read YAML content _targets.yaml.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read _targets.yaml. — tar_config_yaml","text":"","code":"tar_config_yaml(config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read _targets.yaml. — tar_config_yaml","text":"config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read _targets.yaml. — tar_config_yaml","text":"Nested list fields defined _targets.yaml.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Read _targets.yaml. — tar_config_yaml","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Read _targets.yaml. — tar_config_yaml","text":"several key functions like tar_make(), default values arguments controlled though tar_config_get(). tar_config_get() retrieves data optional YAML configuration file. can control settings YAML file programmatically tar_config_set(). default file path YAML file _targets.yaml, can set another path globally using TAR_CONFIG environment variable. YAML file can store configuration settings multiple projects, can globally set default project TAR_PROJECT environment variable. structure YAML file follows rules similar config R package, e.g. projects can inherit settings one another using inherits field. Exceptions include: requirement configuration named \"default\". projects inherit default project` automatically. fields need values targets already defaults. targets actually invoke config package. implementation targets written scratch without viewing copying part source code config.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_config_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read _targets.yaml. — tar_config_yaml","text":"","code":"yaml <- tempfile() tar_config_set(store = \"my_store_a\", config = yaml, project = \"project_a\") tar_config_set(store = \"my_store_b\", config = yaml, project = \"project_b\") str(tar_config_yaml(config = yaml)) #> List of 2 #>  $ project_a:List of 1 #>   ..$ store: chr \"my_store_a\" #>  $ project_b:List of 1 #>   ..$ store: chr \"my_store_b\""},{"path":"https://docs.ropensci.org/targets/reference/tar_counter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a counter object. — tar_counter","title":"Create a counter object. — tar_counter","text":"Internal function. users.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_counter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a counter object. — tar_counter","text":"","code":"tar_counter(names = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/tar_counter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a counter object. — tar_counter","text":"names Character vector names set counter.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_counter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a counter object. — tar_counter","text":"","code":"tar_counter(names = \"x\") #> <environment: 0x56513c3d7ce8>"},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":null,"dir":"Reference","previous_headings":"","what":"Get crew worker info. — tar_crew","title":"Get crew worker info. — tar_crew","text":"recent run pipeline tar_make() crew controller started, get summary-level information workers.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get crew worker info. — tar_crew","text":"","code":"tar_crew(store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get crew worker info. — tar_crew","text":"store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get crew worker info. — tar_crew","text":"data frame one row per crew worker following columns: controller: name crew controller. launches: number times worker launched. seconds: number seconds worker spent running tasks. targets: number targets worker completed delivered.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Get crew worker info. — tar_crew","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_crew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get crew worker info. — tar_crew","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. if (requireNamespace(\"crew\", quietly = TRUE)) { tar_script({   library(targets)   library(tarchetypes)   tar_option_set(controller = crew::crew_controller_local())   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_process() tar_process(pid) } }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare the rules that cue a target. — tar_cue","title":"Declare the rules that cue a target. — tar_cue","text":"Declare rules mark target outdated.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare the rules that cue a target. — tar_cue","text":"","code":"tar_cue(   mode = c(\"thorough\", \"always\", \"never\"),   command = TRUE,   depend = TRUE,   format = TRUE,   repository = TRUE,   iteration = TRUE,   file = TRUE,   seed = TRUE )"},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare the rules that cue a target. — tar_cue","text":"mode Cue mode. \"thorough\", cues apply unless individually suppressed. \"always\", target always runs. \"never\", target run unless metadata exist last run errored. command Logical, whether rerun target command changed since last time. depend Logical, whether rerun target value one dependencies changed. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). file Logical, whether rerun target file(s) return value changed least one missing. seed Logical, whether rerun target pseudo-random number generator seed either changed NA. reproducible deterministic target-specific seeds controlled tar_option_get(\"seed\") target names. See tar_option_set() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":"target-invalidation-rules","dir":"Reference","previous_headings":"","what":"Target invalidation rules","title":"Declare the rules that cue a target. — tar_cue","text":"targets uses internal metadata special cues decide whether target date (can skip) outdated/invalidated (needs rerun). default, targets moves following list cues declares target outdated least one cue activated. metadata record target. target errored last run. target different class . cue mode equals \"always\". cue mode equal \"never\". command metadata field (hash R command) different last time. depend metadata field (hash immediate upstream dependency targets global objects) different last time. storage format different last time. iteration mode different last time. target's file (either one _targets/objects/ dynamic file) exist changed since last time. user can suppress many cues using tar_cue() function, creates cue argument tar_target(). Cues objects also constitute nuanced target invalidation rules. tarchetypes package many examples, including tar_age(), tar_download(), tar_cue_age(), tar_cue_force(), tar_cue_skip().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":"dependency-based-invalidation-and-user-defined-functions","dir":"Reference","previous_headings":"","what":"Dependency-based invalidation and user-defined functions","title":"Declare the rules that cue a target. — tar_cue","text":"cue target depend = TRUE (default) target marked invalidated/outdated upstream dependencies change. target's dependencies include upstream targets, user-defined functions, global objects populated target script file (default: _targets.R). determine given dependency changed since last run pipeline, targets computes hashes. hash target computed files storage (usually file _targets/objects/). hash non-function global object dependency computed directly -memory data. User-defined functions hashed following way: Deparse function targets:::tar_deparse_safe(). function computes string representation function body arguments. string representation invariant changes comments whitespace, means trivial changes formatting cue targets rerun. Manually remove literal pointers function string using targets:::mask_pointers(). pointers arise inline compiled C/C++ functions. Using static code analysis (.e. tar_deps(), based codetools::findGlobals()) identify user-defined functions global objects current function depends . Append hashes dependencies string representation current function. Compute hash final string representation using targets:::hash_object(). , (3) important user-defined functions dependencies , user-defined functions global objects. (3) ensures change function's dependencies invalidates function , turn invalidates calling functions targets downstream depend cue turned .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_cue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare the rules that cue a target. — tar_cue","text":"","code":"# The following target will always run when the pipeline runs. x <- tar_target(x, download_data(), cue = tar_cue(mode = \"always\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_debug_instructions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print instructions for debugging a target. — tar_debug_instructions","title":"Print instructions for debugging a target. — tar_debug_instructions","text":"user-side function. call directly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_debug_instructions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print instructions for debugging a target. — tar_debug_instructions","text":"","code":"tar_debug_instructions()"},{"path":"https://docs.ropensci.org/targets/reference/tar_debug_instructions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print instructions for debugging a target. — tar_debug_instructions","text":"NULL (invisibly). Messages printed .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_debug_instructions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print instructions for debugging a target. — tar_debug_instructions","text":"","code":"tar_debug_instructions() #> ℹ You are now running an interactive debugger in target target. #>   You can enter code and print objects as with the normal R console. #>   How to use: https://adv-r.hadley.nz/debugging.html#browser #>  #> ℹ The debugger is poised to run the command of target target: #>  #>      NULL #>  #> ℹ Tip: run debug(your_function) and then enter \"c\" #>   to move the debugger inside your_function(), #>   where your_function() is called from the command of target target. #>   Then debug the function as you would normally (without `targets`)."},{"path":"https://docs.ropensci.org/targets/reference/tar_deduplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","title":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","text":"Deprecated version 0.3.0 (2020-03-06). Deduplication happens automatically pipeline runs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deduplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","text":"","code":"tar_deduplicate(   meta = TRUE,   progress = TRUE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_deduplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","text":"meta Logical, whether deduplicate meta database file _targets/meta/meta. progress Logical, whether deduplicate progress database file _targets/meta/progress. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deduplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deduplicate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deduplicate meta and progress databases (deprecated). — tar_deduplicate","text":"Removes duplicated entries meta progress databases order lighten storage. databases located _targets/meta/meta _targets/meta/progress files, _targets folder project root. essential data removed, simply form garbage collection.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":null,"dir":"Reference","previous_headings":"","what":"For developers only: get the definition of the current target. — tar_definition","title":"For developers only: get the definition of the current target. — tar_definition","text":"developers : get full definition target currently running. target definition kind object produced tar_target().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For developers only: get the definition of the current target. — tar_definition","text":"","code":"tar_definition(   default = targets::tar_target_raw(\"target_name\", quote(identity())) )"},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For developers only: get the definition of the current target. — tar_definition","text":"default Environment, value return tar_definition() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For developers only: get the definition of the current target. — tar_definition","text":"called running target, tar_definition() returns target object currently running target. See \"Target objects\" section details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"For developers only: get the definition of the current target. — tar_definition","text":"users use tar_definition()  accidental modifications break pipeline. tar_definition() exists order support third-party interface packages, even returned target definition modified..","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"For developers only: get the definition of the current target. — tar_definition","text":"Functions like tar_target() produce target objects, special objects specialized sets S3 classes. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_definition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For developers only: get the definition of the current target. — tar_definition","text":"","code":"class(tar_definition()) #> [1] \"tar_stem\"    \"tar_builder\" \"tar_target\"  \"environment\" tar_definition()$settings$name #> [1] \"target_name\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(   tar_target(x, tar_definition()$settings$memory, memory = \"transient\") ) tar_make(x) tar_read(x) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete target output values. — tar_delete","title":"Delete target output values. — tar_delete","text":"Delete output values targets _targets/objects/ (cloud applicable) keep records metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete target output values. — tar_delete","text":"","code":"tar_delete(   names,   cloud = TRUE,   batch_size = 1000L,   verbose = TRUE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete target output values. — tar_delete","text":"names Optional, names targets delete. supplied, names argument restricts targets deleted. value tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. cloud Logical length 1, whether delete objects cloud applicable (e.g. AWS, GCP). FALSE, files deleted cloud. batch_size Positive integer 1 1000, number target objects delete cloud HTTP API request. Currently supported AWS. 1000. verbose Logical length 1, whether print console messages show progress deleting batch targets cloud bucket. Batched deletion verbosity currently supported AWS. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete target output values. — tar_delete","text":"small number data-heavy targets need discard conserve storage, function can help. Local external files files (.e. format = \"file\" repository = \"local\") deleted. targets repository equal \"local\", tar_delete() attempts delete file errors deletion unsuccessful. deletion fails, either log cloud platform manually delete file (e.g. AWS web console case repository = \"aws\") call tar_invalidate() target targets try delete object. patterns recorded metadata, branches deleted. patterns longer metadata, branches left alone.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Delete target output values. — tar_delete","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Delete target output values. — tar_delete","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete target output values. — tar_delete","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() tar_delete(starts_with(\"y\")) # Only deletes y1 and y2. tar_make() # y1 and y2 rerun but return the same values, so z is up to date. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Code dependencies — tar_deps","title":"Code dependencies — tar_deps","text":"List dependencies function expression. tar_deps() expects expr argument unevaluated expression, whereas tar_deps_raw() expects expr evaluated expression object. Functions can passed normally either case.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code dependencies — tar_deps","text":"","code":"tar_deps(expr)  tar_deps_raw(expr)"},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code dependencies — tar_deps","text":"expr R expression function. tar_deps() expects expr argument unevaluated expression, whereas tar_deps_raw() expects expr evaluated expression object. Functions can passed normally either case.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code dependencies — tar_deps","text":"Character vector dependencies function expression.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code dependencies — tar_deps","text":"targets detects dependencies commands using static code analysis. Use tar_deps() run code analysis see dependencies .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code dependencies — tar_deps","text":"","code":"tar_deps(x <- y + z) #> [1] \"+\"  \"<-\" \"y\"  \"z\"  tar_deps(quote(x <- y + z)) #> [1] \"quote\" tar_deps({   x <- 1   x + a }) #> [1] \"+\"  \"<-\" \"a\"  \"{\"  tar_deps(function(a = b) map_dfr(data, ~do_row(.x))) #> [1] \".x\"      \"b\"       \"data\"    \"do_row\"  \"map_dfr\" tar_deps_raw(function(a = b) map_dfr(data, ~do_row(.x))) #> [1] \".x\"      \"b\"       \"data\"    \"do_row\"  \"map_dfr\""},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Select targets using their descriptions. — tar_described_as","title":"Select targets using their descriptions. — tar_described_as","text":"Select subset targets _targets.R file based custom descriptions.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select targets using their descriptions. — tar_described_as","text":"","code":"tar_described_as(   described_as = NULL,   tidyselect = TRUE,   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select targets using their descriptions. — tar_described_as","text":"described_as tidyselect expression select targets based descriptions. example, described_as = starts_with(\"survival model\") matches targets pipeline whose description arguments tar_target() start text string \"survival model\". tidyselect TRUE, return call tidyselect::all_of() identifying selected targets, can supplied tidyselect-compatible namesargument downstream functions like [tar_make()] [tar_manifest()]. IfFALSE`, return simple character vector target names. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select targets using their descriptions. — tar_described_as","text":"tidyselect TRUE, tar_described_as() returns call tidyselect::all_of() can supplied names argument functions like tar_manifest() tar_make(). allows functions like tar_manifest() tar_make() focus targets matching descriptions. tidyselect FALSE, tar_described_as() returns simple character vector names targets pipeline matching descriptions.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select targets using their descriptions. — tar_described_as","text":"Targets empty descriptions ignored.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_described_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select targets using their descriptions. — tar_described_as","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(b2, TRUE, description = \"blue two\"),     tar_target(b3, TRUE, description = \"blue three\"),     tar_target(g2, TRUE, description = \"green two\"),     tar_target(g3, TRUE, description = \"green three\"),     tar_target(g4, TRUE, description = \"green three\")   ) }, ask = FALSE) tar_described_as(starts_with(\"green\"), tidyselect = FALSE) tar_make(names = tar_described_as(starts_with(\"green\"))) tar_progress() # Only `g2`, `g3`, and `g4` ran. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":null,"dir":"Reference","previous_headings":"","what":"Destroy the data store. — tar_destroy","title":"Destroy the data store. — tar_destroy","text":"Destroy data store written pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Destroy the data store. — tar_destroy","text":"","code":"tar_destroy(   destroy = c(\"all\", \"cloud\", \"local\", \"meta\", \"process\", \"progress\", \"objects\",     \"scratch\", \"workspaces\", \"user\"),   batch_size = 1000L,   verbose = TRUE,   ask = NULL,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Destroy the data store. — tar_destroy","text":"destroy Character length 1, destroy. Choices: \"\": entire data store (default: _targets/) including cloud data, well download/upload scratch files. \"cloud\": cloud data, including metadata well target object data targets tar_target(..., repository = \"aws\"). Also deletes temporary staging files file.path(tempdir(), \"targets\") may accidentally left incomplete uploads downloads. \"local\": local files data store nothing cloud. \"meta\": metadata file meta/meta data store, invalidates targets keeps data. \"process\": progress data file meta/process data store, resets metadata main process. \"progress\": progress data file meta/progress data store, resets progress tracking info. \"objects\": target return values objects/ data store keep progress metadata. Dynamic files deleted way. \"scratch\": temporary files saved tar_make() automatically get deleted except R crashed. \"workspaces\": compressed lightweight files workspaces/ data store saved workspaces targets. See tar_workspace() details. \"user\": custom user-supplied files user/ folder data store. batch_size Positive integer 1 1000, number target objects delete cloud HTTP API request. Currently supported AWS. 1000. verbose Logical length 1, whether print console messages show progress deleting batch targets cloud bucket. Batched deletion verbosity currently supported AWS. ask Logical length 1, whether pause menu prompt deleting files. disable menu, set TAR_ASK environment variable \"false\". usethis::edit_r_environ() can help set environment variables. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. script exist, cloud metadata deleted. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Destroy the data store. — tar_destroy","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Destroy the data store. — tar_destroy","text":"data store folder created tar_make() (tar_make_future() tar_make_clustermq()). details data store explained https://books.ropensci.org/targets/data.html#local-data-store. data store folder contains output data metadata targets pipeline. Usually, data store folder called _targets/ (see tar_config_set() customize), may link data cloud used AWS GCP buckets. default, tar_destroy() deletes entire _targets/ folder (wherever data store located), including custom user-supplied files _targets/user/, well cloud data pipeline uploaded. See destroy argument customize behavior delete part data store, see functions like tar_invalidate(), tar_delete(), tar_prune() remove information pertaining targets pipeline. calling tar_destroy() default arguments, entire data store gone, means output data previous runs pipeline gone (except input/output files tracked tar_target(..., format = \"file\")). next run pipeline start scratch, skip targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Destroy the data store. — tar_destroy","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Destroy the data store. — tar_destroy","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_destroy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Destroy the data store. — tar_destroy","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, 1 + 1)) }) tar_make() # Creates the _targets/ data store. tar_destroy() print(file.exists(\"_targets\")) # Should be FALSE. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute code in a temporary directory. — tar_dir","title":"Execute code in a temporary directory. — tar_dir","text":"user-side function. Just CRAN.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute code in a temporary directory. — tar_dir","text":"","code":"tar_dir(code)"},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute code in a temporary directory. — tar_dir","text":"code User-defined code.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute code in a temporary directory. — tar_dir","text":"Return value user-defined code.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute code in a temporary directory. — tar_dir","text":"Runs code inside new tempfile() directory order avoid writing user's file space. Used examples tests order comply CRAN policies.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute code in a temporary directory. — tar_dir","text":"","code":"tar_dir(file.create(\"only_exists_in_tar_dir\")) #> [1] TRUE file.exists(\"only_exists_in_tar_dir\") #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":null,"dir":"Reference","previous_headings":"","what":"List dispatched targets. — tar_dispatched","title":"List dispatched targets. — tar_dispatched","text":"List targets progress status \"dispatched\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List dispatched targets. — tar_dispatched","text":"","code":"tar_dispatched(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List dispatched targets. — tar_dispatched","text":"names Optional, names targets. supplied, function restricts output targets. can supply symbols tidyselect helpers like any_of() starts_with(). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List dispatched targets. — tar_dispatched","text":"character vector dispatched targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List dispatched targets. — tar_dispatched","text":"target \"dispatched\" sent run. Depending high-performance computing configuration via crew package, may actually start right away. may happen target ready start available parallel workers busy.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_dispatched.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List dispatched targets. — tar_dispatched","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_dispatched() tar_dispatched(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the target script file for editing. — tar_edit","title":"Open the target script file for editing. — tar_edit","text":"Open target script file editing. Requires usethis package.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the target script file for editing. — tar_edit","text":"","code":"tar_edit(script = targets::tar_config_get(\"script\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the target script file for editing. — tar_edit","text":"script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_edit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open the target script file for editing. — tar_edit","text":"target script file R code file defines pipeline. default path _targets.R, default current project can configured tar_config_set()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Target Markdown knitr engine — tar_engine_knitr","title":"Target Markdown knitr engine — tar_engine_knitr","text":"knitr language engine runs targets code chunks Target Markdown.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target Markdown knitr engine — tar_engine_knitr","text":"","code":"tar_engine_knitr(options)"},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target Markdown knitr engine — tar_engine_knitr","text":"options named list knitr chunk options.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target Markdown knitr engine — tar_engine_knitr","text":"Character, output generated knitr::engine_output().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"target-markdown-interactive-mode","dir":"Reference","previous_headings":"","what":"Target Markdown interactive mode","title":"Target Markdown knitr engine — tar_engine_knitr","text":"Target Markdown two modes: Non-interactive mode. default run knitr::knit() rmarkdown::render(). , code targets code chunks gets written special script files order set targets pipeline run later. Interactive mode: , scripts written set pipeline. Rather, globals targets question run current environment values assigned environment. mode interactive !isTRUE(getOption(\"knitr..progress\")), TRUE. knitr..progress option TRUE run knitr::knit() rmarkdown::render() NULL running one chunk time interactively integrated development environment, e.g. notebook interface RStudio: https://bookdown.org/yihui/rmarkdown/notebook.html. can choose mode tar_interactive chunk option. (targets 0.6.0, tar_interactive defaults interactive() instead !isTRUE(getOption(\"knitr..progress\")).)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"target-markdown-chunk-options","dir":"Reference","previous_headings":"","what":"Target Markdown chunk options","title":"Target Markdown knitr engine — tar_engine_knitr","text":"Target Markdown introduces following knitr code chunk options. standard knitr code chunk options just work non-interactive mode. interactive mode, tar_globals: Logical length 1, whether define globals targets. TRUE, chunk code defines functions, objects, options common targets. FALSE NULL (default), chunk returns formal targets pipeline. tar_interactive: Logical length 1, whether run interactive mode non-interactive mode. See \"Target Markdown interactive mode\" section help file details. tar_name: name use writing helper script files (e.g. _targets_r/targets/target_script.R) specifying target names tar_simple chunk option TRUE. helper scripts target names must unique names, please set option globally knitr::opts_chunk$set(). tar_script: Character length 1, write target script file non-interactive mode. users can skip option stick default _targets.R script path. Helper script files always written next target script folder \"_r\" suffix. tar_script path must either absolute relative project root (call tar_make() similar). specified, target script path defaults tar_config_get(\"script\") (default: _targets.R; helpers default: _targets_r/). run tar_make() etc. non-default target script, must select correct target script file either script argument tar_config_set(script = ...). function source() script file current working directory (.e. chdir = FALSE source()). tar_simple: Logical length 1. Set TRUE define single target simplified interface. code chunks tar_simple equal TRUE, chunk label (tar_name chunk option set ) becomes name, chunk code becomes command. words, code chunk label targetname command mycommand() automatically gets converted tar_target(name = targetname, command = mycommand()). arguments tar_target() remain default values (configurable tar_option_set() tar_globals = TRUE chunk).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_engine_knitr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target Markdown knitr engine — tar_engine_knitr","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN # Register the engine. if (requireNamespace(\"knitr\", quietly = TRUE)) {   knitr::knit_engines$set(targets = targets::tar_engine_knitr) } # Then, `targets` code chunks in a knitr report will run # as described at # <https://books.ropensci.org/targets/literate-programming.html>. }"},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":null,"dir":"Reference","previous_headings":"","what":"For developers only: get the environment of the current target. — tar_envir","title":"For developers only: get the environment of the current target. — tar_envir","text":"developers : get environment target runs command. Designed called target running. environment inherits tar_option_get(\"envir\").","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For developers only: get the environment of the current target. — tar_envir","text":"","code":"tar_envir(default = parent.frame())"},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For developers only: get the environment of the current target. — tar_envir","text":"default Environment, value return tar_envir() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For developers only: get the environment of the current target. — tar_envir","text":"called running target, tar_envir() returns environment target runs command. called outside pipeline, return value whatever user supplies default (defaults parent.frame()).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"For developers only: get the environment of the current target. — tar_envir","text":"users use tar_envir() accidental modifications parent.env(tar_envir()) break pipeline. tar_envir() exists order support third-party interface packages, even returned environment modified.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_envir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For developers only: get the environment of the current target. — tar_envir","text":"","code":"tar_envir() #> <environment: 0x56513c12d040> tar_envir(default = new.env(parent = emptyenv())) #> <environment: 0x56513846fcd8> if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(x, tar_envir(default = parent.frame()))) tar_make(x) tar_read(x) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Show targets environment variables. — tar_envvars","title":"Show targets environment variables. — tar_envvars","text":"Show special environment variables available customizing targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show targets environment variables. — tar_envvars","text":"","code":"tar_envvars(unset = \"\")"},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show targets environment variables. — tar_envvars","text":"unset Character length 1, value return environment variable set.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show targets environment variables. — tar_envvars","text":"data frame one row per environment variable columns name current value . unset environment variable value \"\" default. (Customize unset argument).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show targets environment variables. — tar_envvars","text":"can customize behavior targets special environment variables. sections help file describe environment variable, tar_envvars() function lists current values. modify environment variables, please set project-level .Renviron file lose configuration restart R session. Modify project-level .Renviron file usethis::edit_r_environ(scope = \"project\"). Restart R session done editing. targets run parallel workers created tar_make_clustermq() tar_make_future(), environment variables listed tar_envvars() specifically exported targets. environment variables, set values manually, e.g. project-level .Renviron file (workers access local file system).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"tar-ask","dir":"Reference","previous_headings":"","what":"TAR_ASK","title":"Show targets environment variables. — tar_envvars","text":"TAR_ASK environment variable accepts values \"true\" \"false\". TAR_ASK set, set \"true\", targets asks permission menu overwriting certain files, target script file (default: _targets.R) tar_script(). TAR_ASK \"false\", targets overwrites old files new ones without asking. comfortable tar_script(), tar_github_actions(), similar functions, can safely set TAR_ASK \"false\" either project-level user-level .Renviron file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"tar-config","dir":"Reference","previous_headings":"","what":"TAR_CONFIG","title":"Show targets environment variables. — tar_envvars","text":"TAR_CONFIG environment variable controls file path optional YAML configuration file project settings. See help file tar_config_set() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"tar-project","dir":"Reference","previous_headings":"","what":"TAR_PROJECT","title":"Show targets environment variables. — tar_envvars","text":"TAR_PROJECT environment variable sets name project set get settings working YAML configuration file. See help file tar_config_set() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"tar-warn","dir":"Reference","previous_headings":"","what":"TAR_WARN","title":"Show targets environment variables. — tar_envvars","text":"TAR_WARN environment variable accepts values \"true\" \"false\". TAR_WARN set, set \"true\", targets throws warnings certain edge cases, target/global name conflicts dangerous use devtools::load_all(). TAR_WARN \"false\", targets throw warnings cases. warnings can detect potentially serious issues pipeline, please set TAR_WARN unless use case absolutely requires .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_envvars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show targets environment variables. — tar_envvars","text":"","code":"tar_envvars() #> # A tibble: 4 × 2 #>   name        value #>   <chr>       <chr> #> 1 TAR_ASK     \"\"    #> 2 TAR_CONFIG  \"\"    #> 3 TAR_PROJECT \"\"    #> 4 TAR_WARN    \"\""},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":null,"dir":"Reference","previous_headings":"","what":"List errored targets. — tar_errored","title":"List errored targets. — tar_errored","text":"List targets whose progress \"errored\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List errored targets. — tar_errored","text":"","code":"tar_errored(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List errored targets. — tar_errored","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List errored targets. — tar_errored","text":"character vector errored targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"List errored targets. — tar_errored","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_errored.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List errored targets. — tar_errored","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_errored() tar_errored(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if target metadata exists. — tar_exist_meta","title":"Check if target metadata exists. — tar_exist_meta","text":"Check target metadata file _targets/meta/meta exists current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if target metadata exists. — tar_exist_meta","text":"","code":"tar_exist_meta(store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if target metadata exists. — tar_exist_meta","text":"store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if target metadata exists. — tar_exist_meta","text":"Logical length 1, whether current project's metadata exists.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if target metadata exists. — tar_exist_meta","text":"learn data storage targets, visit https://books.ropensci.org/targets/data.html.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if target metadata exists. — tar_exist_meta","text":"","code":"tar_exist_meta() #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if local output data exists for one or more targets. — tar_exist_objects","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"Check output target data exists either _targets/objects/ cloud one targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"","code":"tar_exist_objects(   names,   cloud = TRUE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"names Character vector target names. tidyselect-compatible. cloud Logical length 1, whether include cloud targets output (e.g. tar_target(..., repository = \"aws\")). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"Logical length length(names), whether given target existing file either _targets/objects/ cloud.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"target metadata repository argument tar_target() set \"local\", _targets/objects/ folder checked. Otherwise, metadata repsitory \"local\", tar_exist_objects() checks cloud repository selected.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if local output data exists for one or more targets. — tar_exist_objects","text":"","code":"tar_exist_objects(c(\"target1\", \"target2\")) #> [1] FALSE FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if process metadata exists. — tar_exist_process","title":"Check if process metadata exists. — tar_exist_process","text":"Check process metadata file _targets/meta/process exists current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if process metadata exists. — tar_exist_process","text":"","code":"tar_exist_process(store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if process metadata exists. — tar_exist_process","text":"store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if process metadata exists. — tar_exist_process","text":"Logical length 1, whether current project's metadata exists.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if process metadata exists. — tar_exist_process","text":"learn data storage targets, visit https://books.ropensci.org/targets/data.html.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if process metadata exists. — tar_exist_process","text":"","code":"tar_exist_process() #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if progress metadata exists. — tar_exist_progress","title":"Check if progress metadata exists. — tar_exist_progress","text":"Check progress metadata file _targets/meta/progress exists current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if progress metadata exists. — tar_exist_progress","text":"","code":"tar_exist_progress(store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if progress metadata exists. — tar_exist_progress","text":"store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if progress metadata exists. — tar_exist_progress","text":"Logical length 1, whether current project's metadata exists.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if progress metadata exists. — tar_exist_progress","text":"learn data storage targets, visit https://books.ropensci.org/targets/data.html.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if progress metadata exists. — tar_exist_progress","text":"","code":"tar_exist_progress() #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the target script file exists. — tar_exist_script","title":"Check if the target script file exists. — tar_exist_script","text":"Check target script file exists current project. target script _targets.R default, path can configured current project using tar_config_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the target script file exists. — tar_exist_script","text":"","code":"tar_exist_script(script = targets::tar_config_get(\"script\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the target script file exists. — tar_exist_script","text":"script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the target script file exists. — tar_exist_script","text":"Logical length 1, whether current project's metadata exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_exist_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the target script file exists. — tar_exist_script","text":"","code":"tar_exist_script() #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a custom target storage format. — tar_format","title":"Define a custom target storage format. — tar_format","text":"Define custom target storage format format argument tar_target() tar_option_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a custom target storage format. — tar_format","text":"","code":"tar_format(   read = NULL,   write = NULL,   marshal = NULL,   unmarshal = NULL,   convert = NULL,   copy = NULL,   substitute = list(),   repository = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a custom target storage format. — tar_format","text":"read function single argument named path. function read return target stored file argument. side effects. See \"Format functions\" section specific requirements. NULL, read argument defaults readRDS(). write function two arguments: object path, order. function save R object object file path path side effects. function need return value, file written path must single file, directory. See \"Format functions\" section specific requirements. NULL, write argument defaults saveRDS() version = 3. marshal function single argument named object. function marshal R object return -memory object can exported remote parallel workers. read write persistent files. See Marshalling section details. See \"Format functions\" section specific requirements. NULL, marshal argument defaults just returning original object without modifications. unmarshal function single argument named object. function unmarshal (marshalled) R object return -memory object appropriate valid use parallel worker. read write persistent files. See Marshalling section details. See \"Format functions\" section specific requirements. NULL, unmarshal argument defaults just returning original object without modifications. convert convert argument function accepts object returned command target changes acceptable format (e.g. can saved read function). convert ensures -memory copy object running pipeline session copy object saved disk. function idempotent, handle edge cases like NULL values (especially error = \"null\" tar_target() tar_option_set()). NULL, convert argument defaults just returning original object without modifications. copy copy argument function accepts object returned command target makes deep copy memory. method relevant objects like data.tables support -place modification cause unpredictable side effects target target. cases like , target deep-copied downstream target attempts use (case data.table objects, using data.table::copy()). NULL, copy argument defaults just returning original object without modifications. substitute Named list values inserted body custom function place symbols body. example, write = function(object, path) saveRDS(object, path, version = VERSION) substitute = list(VERSION = 3), write function actually end function(object, path) saveRDS(object, path, version = 3). Please include temporary sensitive information authentication credentials. , targets write metadata disk, malicious actor steal misuse . Instead, pass sensitive information environment variables using tar_resources_custom_format(). environment variables exist transient memory spaces R sessions local worker processes. repository Deprecated. Use repository argument tar_target() tar_option_set() instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a custom target storage format. — tar_format","text":"character string length 1 encoding custom format. can supply string directly format argument tar_target() tar_option_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"marshalling","dir":"Reference","previous_headings":"","what":"Marshalling","title":"Define a custom target storage format. — tar_format","text":"object can used R session created, called \"non-exportable\". Examples non-exportable R objects Keras models, Torch objects, xgboost matrices, xml2 documents, rstan model objects, sparklyr data objects, database connection objects. objects exported parallel workers (e.g. tar_make_future()) without special treatment. send non-exportable object parallel worker, object must marshalled: converted form can exported safely (similar serialization always ). , worker must unmarshal object: convert form usable valid current R session. Arguments marshal unmarshal tar_format() let control marshalling unmarshalling happens.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"format-functions","dir":"Reference","previous_headings":"","what":"Format functions","title":"Define a custom target storage format. — tar_format","text":"tar_format(), functions like read, write, marshal, unmarshal must perfectly pure perfectly self-sufficient. must load namespace packages, must depend custom user-defined functions objects global environment pipeline. targets converts function text, must rely data closure. disqualifies functions produced Vectorize(), example. write function must write single file, file writes must directory. functions read write object conversions object. job convert argument. convert argument function accepts object returned command target changes acceptable format (e.g. can saved read function). Working convert function best ensures -memory copy object running pipeline session copy object saved disk.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a custom target storage format. — tar_format","text":"","code":"# The following target is equivalent to the current superseded # tar_target(name, command(), format = \"keras\"). # An improved version of this would supply a `convert` argument # to handle NULL objects, which are returned by the target if it # errors and the error argument of tar_target() is \"null\". tar_target(   name = keras_target,   command = your_function(),   format = tar_format(     read = function(path) {       keras::load_model_hdf5(path)     },     write = function(object, path) {       keras::save_model_hdf5(object = object, filepath = path)     },     marshal = function(object) {       keras::serialize_model(object)     },     unmarshal = function(object) {       keras::unserialize_model(object)     }   ) ) #> <tar_stem>  #>   name: keras_target  #>   description:   #>   command: #>     your_function()  #>   format: format_custom&read=ZnVuY3Rpb24gKHBhdGgpIAp7CiAgICBrZXJhczo6bG9hZF9tb2RlbF9oZGY1KHBhdGgpCn0&write=ZnVuY3Rpb24gKG9iamVjdCwgcGF0aCkgCnsKICAgIGtlcmFzOjpzYXZlX21vZGVsX2hkZjUob2JqZWN0ID0gb2JqZWN0LCBmaWxlcGF0aCA9IHBhdGgpCn0&marshal=ZnVuY3Rpb24gKG9iamVjdCkgCnsKICAgIGtlcmFzOjpzZXJpYWxpemVfbW9kZWwob2JqZWN0KQp9&unmarshal=ZnVuY3Rpb24gKG9iamVjdCkgCnsKICAgIGtlcmFzOjp1bnNlcmlhbGl6ZV9tb2RlbChvYmplY3QpCn0&convert=&copy=&repository=  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL # And the following is equivalent to the current superseded # tar_target(name, torch::torch_tensor(seq_len(4)), format = \"torch\"), # except this version has a `convert` argument to handle # cases when `NULL` is returned (e.g. if the target errors out # and the `error` argument is \"null\" in tar_target() # or tar_option_set()) tar_target(   name = torch_target,   command = torch::torch_tensor(),   format = tar_format(     read = function(path) {       torch::torch_load(path)     },     write = function(object, path) {       torch::torch_save(obj = object, path = path)     },     marshal = function(object) {       con <- rawConnection(raw(), open = \"wr\")       on.exit(close(con))       torch::torch_save(object, con)       rawConnectionValue(con)     },     unmarshal = function(object) {       con <- rawConnection(object, open = \"r\")       on.exit(close(con))       torch::torch_load(con)     }   ) ) #> <tar_stem>  #>   name: torch_target  #>   description:   #>   command: #>     torch::torch_tensor()  #>   format: format_custom&read=ZnVuY3Rpb24gKHBhdGgpIAp7CiAgICB0b3JjaDo6dG9yY2hfbG9hZChwYXRoKQp9&write=ZnVuY3Rpb24gKG9iamVjdCwgcGF0aCkgCnsKICAgIHRvcmNoOjp0b3JjaF9zYXZlKG9iaiA9IG9iamVjdCwgcGF0aCA9IHBhdGgpCn0&marshal=ZnVuY3Rpb24gKG9iamVjdCkgCnsKICAgIGNvbiA8LSByYXdDb25uZWN0aW9uKHJhdygpLCBvcGVuID0gIndyIikKICAgIG9uLmV4aXQoY2xvc2UoY29uKSkKICAgIHRvcmNoOjp0b3JjaF9zYXZlKG9iamVjdCwgY29uKQogICAgcmF3Q29ubmVjdGlvblZhbHVlKGNvbikKfQ&unmarshal=ZnVuY3Rpb24gKG9iamVjdCkgCnsKICAgIGNvbiA8LSByYXdDb25uZWN0aW9uKG9iamVjdCwgb3BlbiA9ICJyIikKICAgIG9uLmV4aXQoY2xvc2UoY29uKSkKICAgIHRvcmNoOjp0b3JjaF9sb2FkKGNvbikKfQ&convert=&copy=&repository=  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_format_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Current storage format. — tar_format_get","title":"Current storage format. — tar_format_get","text":"Get storage format target currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current storage format. — tar_format_get","text":"","code":"tar_format_get()"},{"path":"https://docs.ropensci.org/targets/reference/tar_format_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current storage format. — tar_format_get","text":"character string, storage format target currently running pipeline. called outside target running pipeline, tar_format_get() return default format given tar_option_get(\"format\").","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_format_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Current storage format. — tar_format_get","text":"function meant called inside target running pipeline. called outside target running pipeline, return default format given tar_option_get(\"format\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_format_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current storage format. — tar_format_get","text":"","code":"tar_target(x, tar_format_get(), format = \"qs\") #> <tar_stem>  #>   name: x  #>   description:   #>   command: #>     tar_format_get()  #>   format: qs  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"Writes GitHub Actions workflow file pipeline runs every push GitHub. Historical runs accumulate targets-runs branch, latest output restored tar_make() --date targets rerun.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"","code":"tar_github_actions(   path = file.path(\".github\", \"workflows\", \"targets.yaml\"),   ask = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"path Character length 1, file path write GitHub Actions workflow file. ask Logical, whether ask writing workflow file already exists. NULL, defaults Sys.getenv(\"TAR_ASK\"). (Set \"true\" \"false\" Sys.setenv()). ask TAR_ASK environment variable indeterminate, defaults interactive().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"Nothing (invisibly). function writes GitHub Actions workflow file side effect.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"Steps set continuous deployment: Ensure pipeline stays within resource limitations GitHub Actions repositories, storage compute. storage, may wish reduce burden alternative repository (e.g. tar_target(..., repository = \"aws\")). Ensure Actions enabled GitHub repository. may visit Settings tab. Call targets::tar_renv(extras = character(0)) expose hidden package dependencies. Set renv project (renv::init() renv::snapshot()). Details https://rstudio.github.io/renv/articles/ci.html. Commit renv.lock file main (recommended) master Git branch. Run tar_github_actions() create workflow file. Commit file main (recommended) master Git. Push project GitHub. Verify GitHub Actions workflow runs pushes results targets-runs. Subsequent runs recompute outdated targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_github_actions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up GitHub Actions to run a targets pipeline — tar_github_actions","text":"","code":"tar_github_actions(tempfile())"},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize an abridged fast dependency graph. — tar_glimpse","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"Analyze pipeline defined target script file (default: _targets.R) visualize directed acyclic graph targets. Unlike tar_visnetwork(), tar_glimpse() account metadata progress information, means graph renders faster. Also, tar_glimpse() omits functions global objects default (can include targets_only = FALSE).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"","code":"tar_glimpse(   targets_only = TRUE,   names = NULL,   shortcut = FALSE,   allow = NULL,   exclude = \".Random.seed\",   label = targets::tar_config_get(\"label\"),   label_width = targets::tar_config_get(\"label_width\"),   level_separation = targets::tar_config_get(\"level_separation\"),   degree_from = 1L,   degree_to = 1L,   zoom_speed = 1,   physics = FALSE,   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. names Names targets. graph visualization operate targets (unless shortcut TRUE, targets upstream well). Selecting small subgraph using names speed load time visualization. Unlike allow, names invoked graph generated. Set NULL check/run targets (default). Otherwise, object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Also, shortcut = TRUE works set names. allow Optional, define set allowable vertices graph. Unlike names, allow invoked graph mostly resolved, speed execution. Set NULL allow vertices pipeline environment (default). Otherwise, can supply symbols tidyselect helpers like starts_with(). exclude Optional, define set exclude vertices graph. Unlike names, exclude invoked graph mostly resolved, speed execution. Set NULL exclude vertices. Otherwise, can supply symbols tidyselect helpers like any_of() starts_with(). label Character vector one aesthetics add vertex labels. Currently, option  \"description\" show target's custom description, character(0) suppress . label_width Positive numeric length 1, maximum width (number characters) node labels. level_separation Numeric length 1, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider changing value aspect ratio graph far 1. level_separation NULL, levelSeparation argument visHierarchicalLayout() defaults 150. degree_from Integer length 1. click node, graph highlights neighborhood node. degree_from controls number edges neighborhood extends upstream. degree_to Integer length 1. click node, graph highlights neighborhood node. degree_to controls number edges neighborhood extends downstream. zoom_speed Positive numeric length 1, scaling factor zoom speed. 1 zooms faster default, 1 zooms lower default. physics Logical length 1, whether implement interactive physics graph, e.g. edge elasticity. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"visNetwork HTML widget object.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"dependency-graph","dir":"Reference","previous_headings":"","what":"Dependency graph","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"dependency graph pipeline directed acyclic graph (DAG) node indicates target global object directed edge indicates downstream node depends upstream node. DAG always tree, never contains cycle target allowed directly indirectly depend . dependency graph show natural progression work left right. targets uses static code analysis create graph, order tar_target() calls _targets.R file matter. However, targets support self-referential loops cycles. information dependency graph, please read https://books.ropensci.org/targets/targets.html#dependencies.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize an abridged fast dependency graph. — tar_glimpse","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set()   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_glimpse() tar_glimpse(allow = starts_with(\"y\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group a data frame to iterate over subsets of rows. — tar_group","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"Like dplyr::group_by(), patterns. tar_group() allows map cross subsets data frames. Requires iteration = \"group\" target. See example.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"","code":"tar_group(x)"},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"x Grouped data frame dplyr::group_by()","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"data frame special tar_group column targets use find subsets data frame.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"goal tar_group() post-process return value data frame target allow downstream targets branch subsets rows. takes groups defined dplyr::group_by() translates information special tar_group column. tar_group vector positive integers 1 number groups. Rows integer tar_group belong group, branches arranged increasing order respect integers tar_group. assignment tar_group integers group levels depends orderings inside grouping variables order rows dataset. dplyr::group_keys() grouped data frame shows grouping variables correspond integers tar_group column.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group a data frame to iterate over subsets of rows. — tar_group","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN # The tar_group() function simply creates # a tar_group column to partition the rows # of a data frame. data.frame(   x = seq_len(6),   id = rep(letters[seq_len(3)], each = 2) ) %>%   dplyr::group_by(id) %>%   tar_group() # We use tar_group() below to branch over # subsets of a data frame defined with dplyr::group_by(). tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({ library(dplyr) library(targets) library(tarchetypes) list(   tar_target(     data,     data.frame(       x = seq_len(6),       id = rep(letters[seq_len(3)], each = 2)     ) %>%       group_by(id) %>%       tar_group(),     iteration = \"group\"   ),   tar_target(     sums,     sum(data$x),     pattern = map(data),     iteration = \"vector\"   ) ) }) tar_make() tar_read(sums) # Should be c(3, 7, 11). }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a helper R script. — tar_helper","title":"Write a helper R script. — tar_helper","text":"Write helper R script targets pipeline. supporting functions target script file (default: _targets.R) . tar_helper() expects unevaluated expression code argument, whereas tar_helper_raw() expects evaluated expression object.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a helper R script. — tar_helper","text":"","code":"tar_helper(path = NULL, code = NULL, tidy_eval = TRUE, envir = parent.frame())  tar_helper_raw(path = NULL, code = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a helper R script. — tar_helper","text":"path Character length 1, path write (overwrite) code. parent directory exist, tar_helper_raw() creates . tar_helper() overwrites file already exists. code Code write path. tar_helper() expects unevaluated expression code argument, whereas tar_helper_raw() expects evaluated expression object. tidy_eval Logical, whether use tidy evaluation code. turned , can substitute expressions symbols using !! !!!. See examples . envir Environment tidy evaluation.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a helper R script. — tar_helper","text":"NULL (invisibly)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a helper R script. — tar_helper","text":"tar_helper() specialized version tar_script() flexible paths tidy evaluation.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_helper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a helper R script. — tar_helper","text":"","code":"# Without tidy evaluation: path <- tempfile() tar_helper(path, code = x <- 1) tar_helper_raw(path, code = quote(x <- 1)) # equivalent writeLines(readLines(path)) #> x <- 1 # With tidy evaluation: y <- 123 tar_helper(path, x <- !!y) writeLines(readLines(path)) #> x <- 123"},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Run if Target Markdown interactive mode is on. — tar_interactive","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"Target Markdown, run enclosed code interactive mode activated. Otherwise, run code.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"","code":"tar_interactive(code)"},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"code R code run Target Markdown interactive mode turned .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"Target Markdown interactive mode turned , function returns result running code. Otherwise, function invisibly returns NULL.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"Visit <books.ropensci.org/targets/literate-programming.html> learn Target Markdown interactive mode.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_interactive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run if Target Markdown interactive mode is on. — tar_interactive","text":"","code":"tar_interactive(message(\"In interactive mode.\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"Delete metadata records _targets/meta/meta keep return values targets _targets/objects/.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"","code":"tar_invalidate(names, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"names Names targets remove metadata list. object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"function forces one targets rerun next tar_make(), regardless cues regardless targets stored. tar_invalidate(), still able locate data files tar_path_target() manually salvage emergency. However, tar_load() tar_read() able read data R, subsequent calls tar_make() attempt rerun targets. patterns recorded metadata, branches invalidated. patterns longer metadata, branches left alone.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_invalidate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete one or more metadata records (e.g. to rerun a target). — tar_invalidate","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() tar_invalidate(starts_with(\"y\")) # Only invalidates y1 and y2. tar_make() # y1 and y2 rerun but return same values, so z is up to date. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Language — tar_language","title":"Language — tar_language","text":"functions help metaprogramming packages built top targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Language — tar_language","text":"","code":"tar_deparse_language(expr)  tar_deparse_safe(expr, collapse = \"\\n\", backtick = TRUE)  tar_tidy_eval(expr, envir, tidy_eval)  tar_tidyselect_eval(names_quosure, choices)"},{"path":"https://docs.ropensci.org/targets/reference/tar_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Language — tar_language","text":"expr language object modify deparse. collapse Character length 1, delimiter deparsing. backtick logical indicating whether symbolic names     enclosed backticks follow standard syntax. envir environment find objects tidy evaluation. tidy_eval Logical length 1, whether apply tidy evaluation. names_quosure rlang quosure tidyselect expressions. choices character vector choices character elements returned tidy evaluation.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Language — tar_language","text":"tar_deparse_language() wrapper around tar_deparse_safe() leaves character vectors NULL objects alone, helps subsequent user input validation. tar_deparse_safe() wrapper around base::deparse() custom set fast default settings guardrails ensure output always length 1. tar_tidy_eval() applies tidy evaluation language object returns another language object. tar_tidyselect_eval() applies tidyselect selection special guardrails around NULL inputs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Language — tar_language","text":"","code":"tar_deparse_language(quote(run_model())) #> [1] \"run_model()\""},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the values of targets. — tar_load","title":"Load the values of targets. — tar_load","text":"Load return values targets current environment (environment choosing). typical target, return value lives file _targets/objects/. dynamic files (.e. format = \"file\") paths loaded place values. tar_load_everything() shorthand tar_load(everything()) load targets. tar_load() uses non-standard evaluation names argument (example: tar_load(names = everything())), whereas tar_load_raw() uses standard evaluation names (example: tar_load_raw(names = quote(everything()))).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the values of targets. — tar_load","text":"","code":"tar_load(   names,   branches = NULL,   meta = targets::tar_meta(targets_only = TRUE, store = store),   strict = TRUE,   silent = FALSE,   envir = parent.frame(),   store = targets::tar_config_get(\"store\") )  tar_load_raw(   names,   branches = NULL,   meta = tar_meta(store = store),   strict = TRUE,   silent = FALSE,   envir = parent.frame(),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the values of targets. — tar_load","text":"names Names targets load. tar_load() uses non-standard evaluation names argument (example: tar_load(names = everything())), whereas tar_load_raw() uses standard evaluation names (example: tar_load_raw(names = quote(everything()))). object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. branches Integer indices branches load targets patterns. meta Data frame target metadata tar_meta(). strict Logical length 1, whether error one selected targets metadata loaded. Set FALSE just load targets metadata can loaded skip others. silent Logical length 1. relevant strict FALSE. silent FALSE strict FALSE, message printed target metadata loaded. However, load failures stop targets loaded. envir R environment load target return values. store Character length 1, directory path data store pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the values of targets. — tar_load","text":"Nothing.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Load the values of targets. — tar_load","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Load the values of targets. — tar_load","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the values of targets. — tar_load","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() ls() # Does not have \"y1\", \"y2\", or \"z\". tar_load(starts_with(\"y\")) ls() # Has \"y1\" and \"y2\" but not \"z\". tar_load_raw(quote(any_of(\"z\"))) ls() # Has \"y1\", \"y2\", and \"z\". }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_load_everything.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the values of all available targets. — tar_load_everything","title":"Load the values of all available targets. — tar_load_everything","text":"Shorthand tar_load(everything()) load targets entries metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_everything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the values of all available targets. — tar_load_everything","text":"","code":"tar_load_everything(   branches = NULL,   meta = tar_meta(targets_only = TRUE, store = store),   strict = TRUE,   silent = FALSE,   envir = parent.frame(),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_load_everything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the values of all available targets. — tar_load_everything","text":"branches Integer indices branches load targets patterns. meta Data frame target metadata tar_meta(). strict Logical length 1, whether error one selected targets metadata loaded. Set FALSE just load targets metadata can loaded skip others. silent Logical length 1. relevant strict FALSE. silent FALSE strict FALSE, message printed target metadata loaded. However, load failures stop targets loaded. envir R environment load target return values. store Character length 1, directory path data store pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_everything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the values of all available targets. — tar_load_everything","text":"Nothing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_load_everything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the values of all available targets. — tar_load_everything","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() ls() # Does not have \"y1\", \"y2\", or \"z\". tar_load_everything() ls() # Has \"y1\", \"y2\", and \"z\". }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":null,"dir":"Reference","previous_headings":"","what":"Load globals for debugging, testing, and prototyping — tar_load_globals","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"Load user-defined packages, functions, global objects, settings defined target script file (default: _targets.R). function debugging, testing, prototyping . recommended use inside serious pipeline report results serious pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"","code":"tar_load_globals(   envir = parent.frame(),   script = targets::tar_config_get(\"script\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"envir Environment source target script (default: _targets.R). Defaults calling environment. script Character length 1, path target script file defines pipeline (_targets.R default). path either absolute path path relative project root call tar_make() functions. tar_make() friends run script current working directory. argument NULL, setting modified. Use tar_config_unset() delete setting.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"function first sources target script file (default: _targets.R) loads user-defined functions, global objects, settings current R process. , loads packages defined tar_option_get(\"packages\") (default: (.packages())) using library() lib.loc defined tar_option_get(\"library\") (default: NULL).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_load_globals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load globals for debugging, testing, and prototyping — tar_load_globals","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(packages = \"callr\")   analyze_data <- function(data) {     summary(data)   }   list(     tar_target(x, 1 + 1),     tar_target(y, 1 + 1)   ) }, ask = FALSE) tar_load_globals() print(analyze_data) print(\"callr\" %in% (.packages())) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a pipeline of targets. — tar_make","title":"Run a pipeline of targets. — tar_make","text":"Run pipeline defined targets script file (default: _targets.R). tar_make() runs correct targets correct order stores return values _targets/objects/. Use tar_read() read target back R, see https://docs.ropensci.org/targets/reference/index.html#clean manage output files.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a pipeline of targets. — tar_make","text":"","code":"tar_make(   names = NULL,   shortcut = targets::tar_config_get(\"shortcut\"),   reporter = targets::tar_config_get(\"reporter_make\"),   seconds_meta_append = targets::tar_config_get(\"seconds_meta_append\"),   seconds_meta_upload = targets::tar_config_get(\"seconds_meta_upload\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   seconds_interval = targets::tar_config_get(\"seconds_interval\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   garbage_collection = NULL,   use_crew = targets::tar_config_get(\"use_crew\"),   terminate_controller = TRUE,   as_job = targets::tar_config_get(\"as_job\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a pipeline of targets. — tar_make","text":"names Names targets run check. Set NULL check/run targets (default). object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. relies stored metadata information upstream dependencies. shortcut = TRUE works set names. reporter Character length 1, name reporter user. Controls messages printed targets run pipeline. Defaults tar_config_get(\"reporter_make\"). Choices: \"silent\": print nothing. \"summary\": print running total number targets status category (queued, dispatched, skipped, completed, canceled, errored). Also show timestamp (\"%H:%M %OS2\" strptime() format) last time progress changed printed screen. \"timestamp\": \"verbose\" reporter except .message begins time stamp. \"timestamp_positives\": \"timestamp\" reporter except without messages skipped targets. \"verbose\": print messages individual targets start, finish, skipped. individual target-specific time (e.g. \"3.487 seconds\") strictly elapsed runtime target include steps like data retrieval output storage. \"verbose_positives\": \"verbose\" reporter except without messages skipped targets. seconds_meta_append Positive numeric length 1 minimum number seconds saves local metadata progress files data store. Higher values generally make pipeline run faster, unsaved work (event crash) date. pipeline ends, metadata progress data saved immediately, regardless seconds_meta_append. seconds_meta_upload Positive numeric length 1 minimum number seconds uploads metadata progress data cloud (see https://books.ropensci.org/targets/cloud-storage.html). Higher values generally make pipeline run faster, unsaved work (event crash) may backed cloud. pipeline ends, metadata progress data uploaded immediately, regardless seconds_meta_upload. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. seconds_interval Deprecated 2023-08-24 (version 1.2.2.9001). Use seconds_meta_append, seconds_meta_upload, seconds_reporter instead. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project. garbage_collection Deprecated. Use garbage_collection argument tar_option_set() instead run garbage collection regular intervals pipeline, use argument name tar_target() activate garbage collection specific target. use_crew Logical length 1, whether use crew controller option set tar_option_set() target script (_targets.R). See https://books.ropensci.org/targets/crew.html details. terminate_controller Logical length 1. crew-integrated pipeline, whether terminate controller stopping finishing pipeline. almost always set TRUE, FALSE combined callr_function = NULL allow get running controller using tar_option_get(\"controller\") debugging purposes. example, tar_option_get(\"controller\")$summary() produces worker--worker summary work assigned completed, tar_option_get(\"controller\")$queue list unresolved tasks, tar_option_get(\"controller\")$results list tasks completed collected pop(). can manually terminate controller tar_option_get(\"controller\")$summary() close dispatcher worker processes. as_job TRUE run RStudio IDE / Posit Workbench job, running RStudio IDE / Posit Workbench. FALSE run callr process main R session (depending callr_function argument). as_job TRUE, rstudioapi package must installed.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a pipeline of targets. — tar_make","text":"NULL except callr_function = callr::r_bg(), case handle callr background process returned. Either way, value invisibly returned.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Run a pipeline of targets. — tar_make","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a pipeline of targets. — tar_make","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make(starts_with(\"y\")) # Only processes y1 and y2. # Distributed computing with crew: if (requireNamespace(\"crew\", quietly = TRUE)) { tar_script({   library(targets)   library(tarchetypes)   tar_option_set(controller = crew::controller_local())   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() } }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":null,"dir":"Reference","previous_headings":"","what":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"Superseded. Use tar_make() crew: https://books.ropensci.org/targets/crew.html.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"","code":"tar_make_clustermq(   names = NULL,   shortcut = targets::tar_config_get(\"shortcut\"),   reporter = targets::tar_config_get(\"reporter_make\"),   seconds_meta_append = targets::tar_config_get(\"seconds_meta_append\"),   seconds_meta_upload = targets::tar_config_get(\"seconds_meta_upload\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   seconds_interval = targets::tar_config_get(\"seconds_interval\"),   workers = targets::tar_config_get(\"workers\"),   log_worker = FALSE,   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   garbage_collection = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"names Names targets run check. Set NULL check/run targets (default). object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. relies stored metadata information upstream dependencies. shortcut = TRUE works set names. reporter Character length 1, name reporter user. Controls messages printed targets run pipeline. Defaults tar_config_get(\"reporter_make\"). Choices: \"silent\": print nothing. \"summary\": print running total number targets status category (queued, dispatched, skipped, completed, canceled, errored). Also show timestamp (\"%H:%M %OS2\" strptime() format) last time progress changed printed screen. \"timestamp\": \"verbose\" reporter except .message begins time stamp. \"timestamp_positives\": \"timestamp\" reporter except without messages skipped targets. \"verbose\": print messages individual targets start, finish, skipped. individual target-specific time (e.g. \"3.487 seconds\") strictly elapsed runtime target include steps like data retrieval output storage. \"verbose_positives\": \"verbose\" reporter except without messages skipped targets. seconds_meta_append Positive numeric length 1 minimum number seconds saves local metadata progress files data store. Higher values generally make pipeline run faster, unsaved work (event crash) date. pipeline ends, metadata progress data saved immediately, regardless seconds_meta_append. seconds_meta_upload Positive numeric length 1 minimum number seconds uploads metadata progress data cloud (see https://books.ropensci.org/targets/cloud-storage.html). Higher values generally make pipeline run faster, unsaved work (event crash) may backed cloud. pipeline ends, metadata progress data uploaded immediately, regardless seconds_meta_upload. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. seconds_interval Deprecated 2023-08-24 (version 1.2.2.9001). Use seconds_meta_append, seconds_meta_upload, seconds_reporter instead. workers Positive integer, number persistent clustermq workers create. log_worker Logical, whether write log file worker. log_worker argument clustermq::Q() clustermq::workers(). callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project. garbage_collection Deprecated. Use garbage_collection argument tar_option_set() instead run garbage collection regular intervals pipeline, use argument name tar_target() activate garbage collection specific target.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"NULL except callr_function = callr::r_bg(), case handle callr background process returned. Either way, value invisibly returned.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"tar_make_clustermq() like tar_make() except targets run parallel persistent workers. persistent worker R process runs long time runs multiple targets lifecycle. Persistent workers launch soon pipeline reaches outdated target deployment = \"worker\", keep running pipeline starts wind . configure tar_make_clustermq(), must configure clustermq package. , set global options clustermq.scheduler clustermq.template inside target script file (default: _targets.R). read configuring clustermq scheduler, visit https://mschubert.github.io/clustermq/articles/userguide.html#configuration # nolint https://books.ropensci.org/targets/hpc.html. clustermq strict dependency targets, must install clustermq .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_make_clustermq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Superseded. Run a pipeline with persistent clustermq workers. — tar_make_clustermq","text":"","code":"if (!identical(tolower(Sys.info()[[\"sysname\"]]), \"windows\")) { if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   options(clustermq.scheduler = \"multiprocess\") # Does not work on Windows.   tar_option_set()   list(tar_target(x, 1 + 1)) }, ask = FALSE) tar_make_clustermq() }) } }"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":null,"dir":"Reference","previous_headings":"","what":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"Superseded. Use tar_make() crew: https://books.ropensci.org/targets/crew.html.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"","code":"tar_make_future(   names = NULL,   shortcut = targets::tar_config_get(\"shortcut\"),   reporter = targets::tar_config_get(\"reporter_make\"),   seconds_meta_append = targets::tar_config_get(\"seconds_meta_append\"),   seconds_meta_upload = targets::tar_config_get(\"seconds_meta_upload\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   seconds_interval = targets::tar_config_get(\"seconds_interval\"),   workers = targets::tar_config_get(\"workers\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   garbage_collection = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"names Names targets run check. Set NULL check/run targets (default). object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. relies stored metadata information upstream dependencies. shortcut = TRUE works set names. reporter Character length 1, name reporter user. Controls messages printed targets run pipeline. Defaults tar_config_get(\"reporter_make\"). Choices: \"silent\": print nothing. \"summary\": print running total number targets status category (queued, dispatched, skipped, completed, canceled, errored). Also show timestamp (\"%H:%M %OS2\" strptime() format) last time progress changed printed screen. \"timestamp\": \"verbose\" reporter except .message begins time stamp. \"timestamp_positives\": \"timestamp\" reporter except without messages skipped targets. \"verbose\": print messages individual targets start, finish, skipped. individual target-specific time (e.g. \"3.487 seconds\") strictly elapsed runtime target include steps like data retrieval output storage. \"verbose_positives\": \"verbose\" reporter except without messages skipped targets. seconds_meta_append Positive numeric length 1 minimum number seconds saves local metadata progress files data store. Higher values generally make pipeline run faster, unsaved work (event crash) date. pipeline ends, metadata progress data saved immediately, regardless seconds_meta_append. seconds_meta_upload Positive numeric length 1 minimum number seconds uploads metadata progress data cloud (see https://books.ropensci.org/targets/cloud-storage.html). Higher values generally make pipeline run faster, unsaved work (event crash) may backed cloud. pipeline ends, metadata progress data uploaded immediately, regardless seconds_meta_upload. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. seconds_interval Deprecated 2023-08-24 (version 1.2.2.9001). Use seconds_meta_append, seconds_meta_upload, seconds_reporter instead. workers Positive integer, maximum number transient future workers allowed run given time. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project. garbage_collection Deprecated. Use garbage_collection argument tar_option_set() instead run garbage collection regular intervals pipeline, use argument name tar_target() activate garbage collection specific target.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"NULL except callr_function = callr::r_bg(), case handle callr background process returned. Either way, value invisibly returned.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"function like tar_make() except targets run parallel transient future workers. requires declare future::plan() inside target script file (default: _targets.R). future strict dependency targets, must install future . configure tar_make_future() computing cluster, see future.batchtools package documentation.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_make_future.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Superseded. Run a pipeline of targets in parallel with transient future workers. — tar_make_future","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   future::plan(future::multisession, workers = 2)   list(     tar_target(x, 1 + 1),     tar_target(y, 1 + 1)   ) }, ask = FALSE) tar_make_future() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive mode pipeline — tar_make_interactive","title":"Interactive mode pipeline — tar_make_interactive","text":"user-side function. invoke directly. exported technicality.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive mode pipeline — tar_make_interactive","text":"","code":"tar_make_interactive(code)"},{"path":"https://docs.ropensci.org/targets/reference/tar_make_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive mode pipeline — tar_make_interactive","text":"code Character vector lines _targets.R file define pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive mode pipeline — tar_make_interactive","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_make_interactive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive mode pipeline — tar_make_interactive","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_make_interactive(\"library(targets); tar_target(x, 123)\") message(x) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a data frame of information about your targets. — tar_manifest","title":"Produce a data frame of information about your targets. — tar_manifest","text":"Along tar_visnetwork() tar_glimpse(), tar_manifest() helps check constructed pipeline correctly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a data frame of information about your targets. — tar_manifest","text":"","code":"tar_manifest(   names = NULL,   fields = tidyselect::any_of(c(\"name\", \"command\", \"pattern\", \"description\")),   drop_missing = TRUE,   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a data frame of information about your targets. — tar_manifest","text":"names Names targets show. Set NULL show targets (default). Otherwise, object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. fields Names fields, columns, show. Set NULL show fields (default). Otherwise, value fields tidyselect expression like starts_with() select columns show output. Possible fields . can set tar_target(), tar_target_raw(), tar_option_set(). name: Name target. command: R command runs target runs. description: custom free-form text description target, available. pattern: branching pattern target, applicable. format: Storage format. repository: Storage repository. iteration: Iteration mode branching. error: Error mode, target fails. memory: Memory mode, keep targets memory. storage: Storage mode high-performance computing scenarios. retrieval: Retrieval mode high-performance computing scenarios. deployment: /whether deploy target high-performance computing scenarios. priority: Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources: list target-specific resource requirements tar_make_future(). cue_mode: Cue mode tar_cue(). cue_depend: Depend cue tar_cue(). cue_expr: Command cue tar_cue(). cue_file: File cue tar_cue(). cue_format: Format cue tar_cue(). cue_repository: Repository cue tar_cue(). cue_iteration: Iteration cue tar_cue(). packages: List columns packages loaded running target. library: List column library paths load packages. drop_missing Logical length 1, whether automatically omit empty columns columns missing values. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a data frame of information about your targets. — tar_manifest","text":"data frame information targets pipeline. Rows appear topological order (order run without influence parallel computing priorities).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Produce a data frame of information about your targets. — tar_manifest","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a data frame of information about your targets. — tar_manifest","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set()   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2),     tar_target(m, z, pattern = map(z), description = \"branching over z\"),     tar_target(c, z, pattern = cross(z))   ) }, ask = FALSE) tar_manifest() tar_manifest(fields = any_of(c(\"name\", \"command\"))) tar_manifest(fields = any_of(\"command\")) tar_manifest(fields = starts_with(\"cue\")) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":null,"dir":"Reference","previous_headings":"","what":"mermaid.js dependency graph. — tar_mermaid","title":"mermaid.js dependency graph. — tar_mermaid","text":"Visualize dependency graph static mermaid.js graph.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mermaid.js dependency graph. — tar_mermaid","text":"","code":"tar_mermaid(   targets_only = FALSE,   names = NULL,   shortcut = FALSE,   allow = NULL,   exclude = \".Random.seed\",   outdated = TRUE,   label = targets::tar_config_get(\"label\"),   label_width = targets::tar_config_get(\"label_width\"),   legend = TRUE,   color = TRUE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mermaid.js dependency graph. — tar_mermaid","text":"targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. names Names targets. graph visualization operate targets (unless shortcut TRUE, targets upstream well). Selecting small subgraph using names speed load time visualization. Unlike allow, names invoked graph generated. Set NULL check/run targets (default). Otherwise, object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Also, shortcut = TRUE works set names. allow Optional, define set allowable vertices graph. Unlike names, allow invoked graph mostly resolved, speed execution. Set NULL allow vertices pipeline environment (default). Otherwise, can supply symbols tidyselect helpers like starts_with(). exclude Optional, define set exclude vertices graph. Unlike names, exclude invoked graph mostly resolved, speed execution. Set NULL exclude vertices. Otherwise, can supply symbols tidyselect helpers like any_of() starts_with(). outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. label Character vector one aesthetics add vertex labels. Can contain \"description\" show target's custom description, \"time\" show total runtime, \"size\" show total storage size, \"branches\" show number branches pattern. can choose multiple aesthetics , e.g. label = c(\"description\", \"time\"). description enabled default. label_width Positive numeric length 1, maximum width (number characters) node labels. legend Logical length 1, whether display legend. color Logical length 1, whether color graph vertices status. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mermaid.js dependency graph. — tar_mermaid","text":"character vector lines code mermaid.js graph. can visualize graph copying text public online mermaid.js editor mermaid GitHub code chunk (https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/). Alternatively, can render inline R Markdown Quarto document using results = \"asis\" code chunk like :","code":"```{r, results = \"asis\", echo = FALSE}   cat(c(\"```{mermaid}\", targets::tar_mermaid(), \"```\"), sep = \"\\n\")   ```"},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mermaid.js dependency graph. — tar_mermaid","text":"mermaid.js JavaScript library constructing static visualizations graphs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"dependency-graph","dir":"Reference","previous_headings":"","what":"Dependency graph","title":"mermaid.js dependency graph. — tar_mermaid","text":"dependency graph pipeline directed acyclic graph (DAG) node indicates target global object directed edge indicates downstream node depends upstream node. DAG always tree, never contains cycle target allowed directly indirectly depend . dependency graph show natural progression work left right. targets uses static code analysis create graph, order tar_target() calls _targets.R file matter. However, targets support self-referential loops cycles. information dependency graph, please read https://books.ropensci.org/targets/targets.html#dependencies.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"mermaid.js dependency graph. — tar_mermaid","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_mermaid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mermaid.js dependency graph. — tar_mermaid","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set()   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2, description = \"sum of two other sums\")   ) }) # Copy the text into a mermaid.js online editor # or a mermaid GitHub code chunk: tar_mermaid() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a project's metadata. — tar_meta","title":"Read a project's metadata. — tar_meta","text":"Read metadata recorded targets global objects.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a project's metadata. — tar_meta","text":"","code":"tar_meta(   names = NULL,   fields = NULL,   targets_only = FALSE,   complete_only = FALSE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a project's metadata. — tar_meta","text":"names Optional, names targets. supplied, tar_meta() returns metadata targets. can supply symbols tidyselect helpers like any_of() starts_with(). NULL, names selected. fields Optional, names columns/fields select. supplied, tar_meta() returns selected metadata columns. NULL, fields selected. can supply symbols tidyselect helpers like any_of() starts_with(). name column always included first matter select. Choices: name: name target global object. type: type object: either \"function\" \"object\" global objects, \"stem\", \"branch\", \"map\", \"cross\" targets. data: hash output data. command: hash target's deparsed command. depend: hash immediate upstream dependencies target. seed: random number generator seed target ran. target's random number generator seed deterministic function name. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path: list column paths target data. Usually, element single path, multiple paths per target dynamic files (.e. tar_target(format = \"file\")). time: POSIXct object time target's data storage last modified. target stores local file, time stamp corresponds time target last ran successfully. targets run commands time stamps: just non-branching targets individual dynamic branches. Displayed current time zone system. multiple outputs target, file targets, maximum time shown. size: hash sum bytes files path. bytes: total file size bytes files path. format: character, one admissible data storage formats. See format argument tar_target() help file details. iteration: character, either \"list\" \"vector\" describe iteration aggregation mode target. See iteration argument tar_target() help file details. parent: branches, name parent pattern. children: list column, names children targets . include buds stems branches patterns. seconds: number seconds took run target. warnings: character string warning messages last run target. first 50 warnings available, first 2048 characters concatenated warning messages. error: character string error message target errored. targets_only Logical, whether just show information targets also return metadata functions global objects. complete_only Logical, whether return complete rows (NA values). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a project's metadata. — tar_meta","text":"data frame one row per target/object selected fields.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a project's metadata. — tar_meta","text":"metadata row updates target completes. tar_progress() shows information targets running. number branches may disagree tar_meta() tar_progress() actively running pipelines.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Read a project's metadata. — tar_meta","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"cloud-metadata","dir":"Reference","previous_headings":"","what":"Cloud metadata","title":"Read a project's metadata. — tar_meta","text":"Metadata files help targets read data objects decide pipeline date. Usually, metadata files live files local _targets/meta/ folder project, e.g. _targets/meta/meta. addition, set repository anything \"local\" tar_option_set() _targets.R, tar_make() continuously uploads metadata files bucket specify resources. tar_meta_delete() delete files cloud, tar_destroy() destroy set either \"\" \"cloud\". functions targets, tar_meta(), tar_visnetwork(), tar_outdated(), tar_invalidate(), use local metadata ignore copies cloud. working different computer one running pipeline, need download cloud metadata current machine using tar_meta_download(). functions tar_meta_upload(), tar_meta_sync(), tar_meta_delete() also manage metadata across cloud local file system. Remarks: repository_meta option tar_option_set() actually controls metadata lives cloud, defaults repository. Like tar_make(), tar_make_future() tar_make_clustermq() also continuously upload metadata files cloud bucket specified resources. tar_meta_download() related functions need run _targets.R detect tar_option_set() options repository_meta resources, please aware side effects may happen running custom _targets.R file.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a project's metadata. — tar_meta","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_meta() tar_meta(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete metadata. — tar_meta_delete","title":"Delete metadata. — tar_meta_delete","text":"Delete project metadata files local file system, cloud, .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete metadata. — tar_meta_delete","text":"","code":"tar_meta_delete(   meta = TRUE,   progress = TRUE,   process = TRUE,   crew = TRUE,   verbose = TRUE,   delete = \"all\",   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete metadata. — tar_meta_delete","text":"meta Logical length 1, whether process main metadata file _targets/meta/meta. progress Logical length 1, whether process progress file _targets/meta/progress. process Logical length 1, whether process process file _targets/meta/process. crew Logical length 1, whether process crew file _targets/meta/crew. exists running targets crew. verbose Logical length 1, whether print informative console messages. delete Character length 1, location delete files. Choose \"local\" local files, \"cloud\" files cloud, \"\" delete metadata files local file system cloud. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete metadata. — tar_meta_delete","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(     resources = tar_resources(       aws = tar_resources_aws(         bucket = \"YOUR_BUCKET_NAME\",         prefix = \"YOUR_PROJECT_NAME\"       )     ),     repository = \"aws\"   )   list(     tar_target(x, data.frame(x = seq_len(2), y = seq_len(2)))   ) }) tar_make() tar_meta_delete() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_download.html","id":null,"dir":"Reference","previous_headings":"","what":"download local metadata to the cloud. — tar_meta_download","title":"download local metadata to the cloud. — tar_meta_download","text":"download local metadata files cloud location (repository, bucket, prefix) set tar_option_set() _targets.R.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download local metadata to the cloud. — tar_meta_download","text":"","code":"tar_meta_download(   meta = TRUE,   progress = TRUE,   process = TRUE,   crew = TRUE,   verbose = TRUE,   strict = FALSE,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download local metadata to the cloud. — tar_meta_download","text":"meta Logical length 1, whether process main metadata file _targets/meta/meta. progress Logical length 1, whether process progress file _targets/meta/progress. process Logical length 1, whether process process file _targets/meta/process. crew Logical length 1, whether process crew file _targets/meta/crew. exists running targets crew. verbose Logical length 1, whether print informative console messages. strict Logical length 1. TRUE error file exist bucket, FALSE proceed without error warning. strict FALSE verbose TRUE, informative message print R console. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"download local metadata to the cloud. — tar_meta_download","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(     resources = tar_resources(       aws = tar_resources_aws(         bucket = \"YOUR_BUCKET_NAME\",         prefix = \"YOUR_PROJECT_NAME\"       )     ),     repository = \"aws\"   )   list(     tar_target(x, data.frame(x = seq_len(2), y = seq_len(2)))   ) }) tar_make() tar_meta_download() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize cloud metadata. — tar_meta_sync","title":"Synchronize cloud metadata. — tar_meta_sync","text":"Synchronize metadata cloud bucket metadata local data store.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize cloud metadata. — tar_meta_sync","text":"","code":"tar_meta_sync(   meta = TRUE,   progress = TRUE,   process = TRUE,   crew = TRUE,   verbose = TRUE,   prefer_local = TRUE,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize cloud metadata. — tar_meta_sync","text":"meta Logical length 1, whether process main metadata file _targets/meta/meta. progress Logical length 1, whether process progress file _targets/meta/progress. process Logical length 1, whether process process file _targets/meta/process. crew Logical length 1, whether process crew file _targets/meta/crew. exists running targets crew. verbose Logical length 1, whether print informative console messages. prefer_local Logical length 1 control copy metadata file takes precedence local hash cloud hash different time stamps . Set TRUE upload local data file scenario, FALSE download cloud file. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_sync.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synchronize cloud metadata. — tar_meta_sync","text":"tar_meta_sync() synchronizes local cloud copies metadata files pipeline recent copy. metadata file, local file exist older cloud file, cloud file downloaded local file path. Conversely, cloud file older exist, local file uploaded cloud. time stamps files equal, use prefer_local argument determine copy takes precedence.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_sync.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronize cloud metadata. — tar_meta_sync","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(     resources = tar_resources(       aws = tar_resources_aws(         bucket = \"YOUR_BUCKET_NAME\",         prefix = \"YOUR_PROJECT_NAME\"       )     ),     repository = \"aws\"   )   list(     tar_target(x, data.frame(x = seq_len(2), y = seq_len(2)))   ) }, ask = FALSE) tar_make() tar_meta_sync() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload local metadata to the cloud. — tar_meta_upload","title":"Upload local metadata to the cloud. — tar_meta_upload","text":"Upload local metadata files cloud location (repository, bucket, prefix) set tar_option_set() _targets.R.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload local metadata to the cloud. — tar_meta_upload","text":"","code":"tar_meta_upload(   meta = TRUE,   progress = TRUE,   process = TRUE,   crew = TRUE,   verbose = TRUE,   strict = FALSE,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload local metadata to the cloud. — tar_meta_upload","text":"meta Logical length 1, whether process main metadata file _targets/meta/meta. progress Logical length 1, whether process progress file _targets/meta/progress. process Logical length 1, whether process process file _targets/meta/process. crew Logical length 1, whether process crew file _targets/meta/crew. exists running targets crew. verbose Logical length 1, whether print informative console messages. strict Logical length 1. TRUE error file exist locally, FALSE proceed without error warning. strict FALSE verbose TRUE, informative message print R console. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_meta_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload local metadata to the cloud. — tar_meta_upload","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(     resources = tar_resources(       aws = tar_resources_aws(         bucket = \"YOUR_BUCKET_NAME\",         prefix = \"YOUR_PROJECT_NAME\"       )     ),     repository = \"aws\"   )   list(     tar_target(x, data.frame(x = seq_len(2), y = seq_len(2)))   ) }, ask = FALSE) tar_make() tar_meta_upload() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the target currently running. — tar_name","title":"Get the name of the target currently running. — tar_name","text":"Get name target currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the target currently running. — tar_name","text":"","code":"tar_name(default = \"target\")"},{"path":"https://docs.ropensci.org/targets/reference/tar_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the target currently running. — tar_name","text":"default Character, value return tar_name() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the target currently running. — tar_name","text":"Character length 1. called inside pipeline, tar_name() returns name target currently running. Otherwise, return value default.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the target currently running. — tar_name","text":"","code":"tar_name() #> [1] \"target\" tar_name(default = \"custom_target_name\") #> [1] \"custom_target_name\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(x, tar_name()), ask = FALSE) tar_make() tar_read(x) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the vertices and edges of a pipeline dependency graph. — tar_network","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"Analyze pipeline defined target script file (default: _targets.R) return vertices edges directed acyclic graph dependency relationships.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"","code":"tar_network(   targets_only = FALSE,   names = NULL,   shortcut = FALSE,   allow = NULL,   exclude = NULL,   outdated = TRUE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"targets_only Logical, whether restrict output just targets (FALSE) also include imported global functions objects. names Names targets. graph visualization operate targets (unless shortcut TRUE, targets upstream well). Selecting small subgraph using names speed load time visualization. Unlike allow, names invoked graph generated. Set NULL check/run targets (default). Otherwise, object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Also, shortcut = TRUE works set names. allow Optional, define set allowable vertices graph. Unlike names, allow invoked graph mostly resolved, speed execution. Set NULL allow vertices pipeline environment (default). Otherwise, can supply symbols tidyselect helpers like starts_with(). exclude Optional, define set exclude vertices graph. Unlike names, exclude invoked graph mostly resolved, speed execution. Set NULL exclude vertices. Otherwise, can supply symbols tidyselect helpers like any_of() starts_with(). outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"list two data frames: vertices edges. vertices data frame one row per target columns type target object (stem, branch, map, cross, function, object), target's description, target's status (date, outdated, dispatched, completed, canceled, errored), well metadata available (seconds runtime, bytes storage, number dynamic branches). edges data frame one row every edge columns mark starting terminating vertices.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":"dependency-graph","dir":"Reference","previous_headings":"","what":"Dependency graph","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"dependency graph pipeline directed acyclic graph (DAG) node indicates target global object directed edge indicates downstream node depends upstream node. DAG always tree, never contains cycle target allowed directly indirectly depend . dependency graph show natural progression work left right. targets uses static code analysis create graph, order tar_target() calls _targets.R file matter. However, targets support self-referential loops cycles. information dependency graph, please read https://books.ropensci.org/targets/targets.html#dependencies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the vertices and edges of a pipeline dependency graph. — tar_network","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set()   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1, description = \"y2 info\"),     tar_target(z, y1 + y2, description = \"z info\")   ) }, ask = FALSE) tar_network(targets_only = TRUE) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":null,"dir":"Reference","previous_headings":"","what":"List new targets — tar_newer","title":"List new targets — tar_newer","text":"List targets whose last successful run occurred certain point time.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List new targets — tar_newer","text":"","code":"tar_newer(   time,   names = NULL,   inclusive = FALSE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List new targets — tar_newer","text":"time POSIXct object length 1, time threshold. Targets newer time stamp returned. example, time = Sys.time - .difftime(1, units = \"weeks\") tar_newer() returns targets newer one week ago. names Names eligible targets. Targets excluded names returned even newer given time. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. inclusive Logical length 1, whether include targets completed exactly time given. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List new targets — tar_newer","text":"character vector names old targets recorded timestamp metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List new targets — tar_newer","text":"applies targets recorded time stamps: just non-branching targets individual dynamic branches. targets version 0.6.0, time stamps available targets regardless storage format. Earlier versions targets record time stamps remote storage format = \"url\" repository = \"aws\" tar_target().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_newer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List new targets — tar_newer","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, seq_len(2))) }, ask = FALSE) tar_make() # targets newer than 1 week ago tar_newer(Sys.time() - as.difftime(1, units = \"weeks\")) # targets newer than 1 week from now tar_newer(Sys.time() + as.difftime(1, units = \"weeks\")) # Everything is still up to date. tar_make() # Invalidate all targets targets newer than 1 week ago # so they run on the next tar_make(). invalidate_these <- tar_newer(Sys.time() - as.difftime(1, units = \"weeks\")) tar_invalidate(any_of(invalidate_these)) tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":null,"dir":"Reference","previous_headings":"","what":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"Target Markdown, run enclosed code interactive mode activated. Otherwise, run code.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"","code":"tar_noninteractive(code)"},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"code R code run Target Markdown interactive mode turned .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"Target Markdown interactive mode turned , function returns result running code. Otherwise, function invisibly returns NULL.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"Visit <books.ropensci.org/targets/literate-programming.html> learn Target Markdown interactive mode.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_noninteractive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run if Target Markdown interactive mode is not on. — tar_noninteractive","text":"","code":"tar_noninteractive(message(\"Not in interactive mode.\")) #> Not in interactive mode."},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List saved targets — tar_objects","title":"List saved targets — tar_objects","text":"List targets currently saved _targets/objects/ cloud. include local files tar_target(..., format = \"file\", repository = \"local\").","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List saved targets — tar_objects","text":"","code":"tar_objects(   names = NULL,   cloud = TRUE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List saved targets — tar_objects","text":"names Names targets select. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. cloud Logical length 1, whether include cloud targets output (e.g. tar_target(..., repository = \"aws\")). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List saved targets — tar_objects","text":"Character vector targets saved _targets/objects/.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"List saved targets — tar_objects","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List saved targets — tar_objects","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, \"value\")) }, ask = FALSE) tar_make() tar_objects() tar_objects(starts_with(\"x\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":null,"dir":"Reference","previous_headings":"","what":"List old targets — tar_older","title":"List old targets — tar_older","text":"List targets whose last successful run occurred certain point time. Combine tar_invalidate(), can use tar_older() automatically rerun targets regular intervals. See examples demonstration.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List old targets — tar_older","text":"","code":"tar_older(   time,   names = NULL,   inclusive = FALSE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List old targets — tar_older","text":"time POSIXct object length 1, time threshold. Targets older time stamp returned. example, time = Sys.time() - .difftime(1, units = \"weeks\") tar_older() returns targets older one week ago. names Names eligible targets. Targets excluded names returned even old. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. inclusive Logical length 1, whether include targets completed exactly time given. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List old targets — tar_older","text":"character vector names old targets recorded timestamp metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List old targets — tar_older","text":"applies targets recorded time stamps: just non-branching targets individual dynamic branches. targets version 0.6.0, time stamps available targets regardless storage format. Earlier versions targets record time stamps remote storage format = \"url\" repository = \"aws\" tar_target().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_older.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List old targets — tar_older","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, seq_len(2))) }, ask = FALSE) tar_make() # targets older than 1 week ago tar_older(Sys.time() - as.difftime(1, units = \"weeks\")) # targets older than 1 week from now tar_older(Sys.time() + as.difftime(1, units = \"weeks\")) # Everything is still up to date. tar_make() # Invalidate all targets targets older than 1 week from now # so they run on the next tar_make(). invalidate_these <- tar_older(Sys.time() + as.difftime(1, units = \"weeks\")) tar_invalidate(any_of(invalidate_these)) tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export options. — tar_option_export","title":"Export options. — tar_option_export","text":"Internal function. users.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export options. — tar_option_export","text":"","code":"tar_option_export()"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export options. — tar_option_export","text":"list options tar_option_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a target option. — tar_option_get","title":"Get a target option. — tar_option_get","text":"Get target option. options include default arguments tar_target() packages, storage format, iteration type, cue. Needs called calls tar_target() order take effect.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a target option. — tar_option_get","text":"","code":"tar_option_get(name = NULL, option = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a target option. — tar_option_get","text":"name Character length 1, name option get. Must one argument names tar_option_set(). option Deprecated, use name argument instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a target option. — tar_option_get","text":"Value target option.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a target option. — tar_option_get","text":"function goes well tar_target_raw() comes defining external interfaces top targets package create pipelines.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_option_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a target option. — tar_option_get","text":"","code":"tar_option_get(\"format\") # default format before we set anything #> [1] \"rds\" tar_target(x, 1)$settings$format #> [1] \"rds\" tar_option_set(format = \"fst_tbl\") # new default format tar_option_get(\"format\") #> [1] \"fst_tbl\" tar_target(x, 1)$settings$format #> [1] \"fst_tbl\" tar_option_reset() # reset the format tar_target(x, 1)$settings$format #> [1] \"rds\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(cue = tar_cue(mode = \"always\")) # All targets always run.   list(tar_target(x, 1), tar_target(y, 2)) }) tar_make() tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset all target options. — tar_option_reset","title":"Reset all target options. — tar_option_reset","text":"Reset target options previously chose tar_option_set(). options mostly configurable default arguments tar_target() tar_target_raw().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset all target options. — tar_option_reset","text":"","code":"tar_option_reset()"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset all target options. — tar_option_reset","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_option_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset all target options. — tar_option_reset","text":"","code":"tar_option_get(\"format\") # default format before we set anything #> [1] \"rds\" tar_target(x, 1)$settings$format #> [1] \"rds\" tar_option_set(format = \"fst_tbl\") # new default format tar_option_get(\"format\") #> [1] \"fst_tbl\" tar_target(x, 1)$settings$format #> [1] \"fst_tbl\" tar_option_reset() # reset all options tar_target(x, 1)$settings$format #> [1] \"rds\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(cue = tar_cue(mode = \"always\"))   tar_option_reset() # Undo option above.   list(tar_target(x, 1), tar_target(y, 2)) }) tar_make() tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set target options. — tar_option_set","title":"Set target options. — tar_option_set","text":"Set target options, including default arguments tar_target() packages, storage format, iteration type, cue. non-null arguments actually set options. See currently set options tar_option_get(). use tar_option_set() effectively, put workflow's target script file (default: _targets.R) calls tar_target() tar_target_raw().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set target options. — tar_option_set","text":"","code":"tar_option_set(   tidy_eval = NULL,   packages = NULL,   imports = NULL,   library = NULL,   envir = NULL,   format = NULL,   repository = NULL,   repository_meta = NULL,   iteration = NULL,   error = NULL,   memory = NULL,   garbage_collection = NULL,   deployment = NULL,   priority = NULL,   backoff = NULL,   resources = NULL,   storage = NULL,   retrieval = NULL,   cue = NULL,   description = NULL,   debug = NULL,   workspaces = NULL,   workspace_on_error = NULL,   seed = NULL,   controller = NULL,   trust_timestamps = NULL,   trust_object_timestamps = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set target options. — tar_option_set","text":"tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. imports Character vector package names. every package listed, targets tracks every dataset every object package namespace part global namespace. example, say package called customAnalysisPackage contains object called analysis_function(). write tar_option_set(imports = \"yourAnalysisPackage\") target script file (default: _targets.R), function called \"analysis_function\" show tar_visnetwork() graph, targets functions referring symbol \"analysis_function\" depend function analysis_function() package yourAnalysisPackage. best combined tar_option_set(packages = \"yourAnalysisPackage\") analysis_function() can actually called code. several important limitations: 1. Namespaced calls, e.g. yourAnalysisPackage::analysis_function(), ignored limitations codetools::findGlobals() powers static code analysis capabilities targets. 2. imports option looks R objects R code. account low-level compiled code C/C++ Fortran. 3. supply multiple packages, e.g. tar_option_set(imports = c(\"p1\", \"p2\")), objects p1 override objects p2 name conflicts. 4. Similarly, objects tar_option_get(\"envir\") override everything tar_option_get(\"imports\"). library Character vector library paths try loading packages. envir Environment containing functions global objects common targets pipeline. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. envir global environment, promise objects diffused sending data parallel workers tar_make_future() tar_make_clustermq(), otherwise environment unmodified. behavior improves performance decreasing size data sent workers. envir global environment, least inherit global environment base environment targets can access attached packages. case non-global envir, targets attempts remove potentially high memory objects come directly targets. includes tar_target() objects class \"tar_target\", well objects class \"tar_pipeline\" \"tar_algorithm\". behavior improves performance decreasing size data sent workers. Package environments assigned envir. include package objects upstream dependencies pipeline, assign package packages imports arguments tar_option_set(). format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. character string tar_repository_cas() content-addressable storage. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. repository_meta Character length 1 values repository excluding content-addressable storage (\"aws\", \"gcp\", \"local\"). Cloud repository metadata text files _targets/meta/, including target metadata progress data. Defaults tar_option_get(\"repository\") except case content-addressable storage (CAS). tar_option_get(\"repository\") CAS repository, default value repository_meta \"local\". iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. \"abridge\": currently running targets keep running, new targets launch . \"trim\": currently running targets stay running. queued target allowed start : downstream error, sibling branch tar_target() call (error happened dynamic branch). idea avoid starting new work immediate error impacts. error = \"trim\" just like error = \"abridge\", allows potentially healthy regions dependency graph begin running. (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection non-negative integer. 0, run garbage collection. 1, run garbage collection every target skipped, locally parallel workers. garbage_collection positive integer n, garbage collection runs every n'th target skipped. example, garbage_collection = 3 run garbage collection every third active target, locally parallel workers. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). backoff object tar_backoff() configuring exponential backoff algorithm pipeline. See tar_backoff() details. numeric argument backoff still allowed, deprecated. resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". debug Character vector names targets run debug mode. use effectively, must set callr_function = NULL restart R session just running. also tar_make(), tar_make_clustermq(), tar_make_future(). target mentioned debug, targets force target run locally (tar_cue(mode = \"always\") deployment = \"main\" settings) pause interactive debugger help diagnose problems. like inserting browser() statement beginning target's expression, without invalidating targets. workspaces Character vector target names. non-branching targets, whole dynamic branching targets, individual branch names. tar_make() friends save workspace files targets even targets skipped. Workspace files help debugging. See tar_workspace() details workspaces. workspace_on_error Logical length 1, whether save workspace file target throws error. Workspace files help debugging. See tar_workspace() details workspaces. seed Integer length 1, seed generating target-specific pseudo-random number generator seeds. target-specific seeds deterministic depend tar_option_get(\"seed\") target name. Target-specific seeds safely reproducibly applied target's command, stored metadata retrievable tar_meta() tar_seed(). Either user third-party packages built top targets may still set seeds inside command target. example, target factories tarchetypes package assigns replicate-specific seeds purposes reproducible within-target batched replication. cases like , effect target-specific seed saved metadata becomes irrelevant seed defined command applies. seed option can also NA disable automatic seed-setting. targets defined tar_option_get(\"seed\") NA set seed. case, targets never date unless cue = tar_cue(seed = FALSE). controller controller controller group object produced crew R package. crew brings auto-scaled distributed computing tar_make(). trust_timestamps Logical length 1, whether use file system modification timestamps check whether target output data files date. advanced setting usually need set user except old difficult platforms. trust_timestamps reset tar_option_reset() never set (recommended) targets makes decision based type file system given file. trust_timestamps TRUE (default), targets looks timestamp first. agrees timestamp recorded metadata, targets considers file unchanged. timestamps disagree, targets recomputes hash make final determination. practice reduces number hash computations thus saves time. However, timestamp precision varies nanoseconds best 2 entire seconds worst, timestamps poor precision fully trusted possibility manually change file within 2 seconds pipeline finishes. data store file system low-precision timestamps, may consider setting trust_timestamps FALSE targets errs safe side always recomputes hashes files. check file system low-precision timestamps, can run file.create(\"x\"); nanonext::msleep(1); file.create(\"y\"); within directory containing _targets data store check difftime(file.mtime(\"y\"), file.mtime(\"x\"), units = \"secs\"). value difftime() around 0.001 seconds (must strictly 0 1) need set trust_timestamps = FALSE. trust_object_timestamps Deprecated. Use trust_timestamps instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set target options. — tar_option_set","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":"storage-formats","dir":"Reference","previous_headings":"","what":"Storage formats","title":"Set target options. — tar_option_set","text":"targets several built-storage formats control return values saved loaded disk: \"rds\": Default, uses saveRDS() readRDS(). work objects, slow. \"auto\": either \"file\" \"qs\", depending return value target. return value character vector existing files (/directories), format becomes \"file\" tar_make() saves target. Otherwise, format becomes \"qs\". \"qs\": Uses qs::qsave() qs::qread(). work objects, much faster \"rds\". Optionally set preset qsave() tar_resources() tar_resources_qs(). \"feather\": Uses arrow::write_feather() arrow::read_feather() (version 2.0). Much faster \"rds\", value must data frame. Optionally set compression compression_level arrow::write_feather() tar_resources() tar_resources_feather(). Requires arrow package (installed default). \"parquet\": Uses arrow::write_parquet() arrow::read_parquet() (version 2.0). Much faster \"rds\", value must data frame. Optionally set compression compression_level arrow::write_parquet() tar_resources() tar_resources_parquet(). Requires arrow package (installed default). \"fst\": Uses fst::write_fst() fst::read_fst(). Much faster \"rds\", value must data frame. Optionally set compression level fst::write_fst() tar_resources() tar_resources_fst(). Requires fst package (installed default). \"fst_dt\": \"fst\", value data.table. Deep copies made appropriate order protect global effects -place modification. Optionally set compression level way \"fst\". \"fst_tbl\": \"fst\", value tibble. Optionally set compression level way \"fst\". \"keras\": superseded tar_format() incompatible error = \"null\" (tar_target() tar_option_set()). Uses keras::save_model_hdf5() keras::load_model_hdf5(). value must Keras model. Requires keras package (installed default). \"torch\": superseded tar_format() incompatible error = \"null\" (tar_target() tar_option_set()). Uses torch::torch_save() torch::torch_load(). value must object torch package tensor neural network module. Requires torch package (installed default). \"file\": dynamic file. use format, target needs manually identify save data return character vector paths data (must single file path repository \"local\"). (paths must existing files nonempty directories.) , targets automatically checks files cues appropriate run/skip decisions files date. paths must point files directories, must contain characters | *. files directories return must actually exist, else targets throw error. (storage \"worker\", targets first stall trying wait file arrive network file system.) target create files, return value character(0). repository \"local\" format \"file\", character vector returned target must length 1 point single file. (Directories vectors multiple file paths supported dynamic files cloud.) output file uploaded cloud tracked changes exists cloud. local file deleted target runs. \"url\": dynamic input URL. storage format, repository implicitly \"local\", URL format like format = \"file\" except return value target URL already exists serves input data downstream targets. Optionally supply custom curl handle tar_resources() tar_resources_url(). new_handle(), nobody = TRUE important ensures targets just downloads metadata instead entire data file checks time stamps hashes. data file URL needs ETag Last-Modified time stamp, else target throw error track data. Also, use extreme caution trying use format = \"url\" track uploads. must absolutely certain ETag Last-Modified time stamp fully updated available time target's command finishes running. targets makes attempt wait web server. custom format can supplied tar_format(). choice, user's responsibility provide methods (un)serialization (un)marshaling return value target. formats starting \"aws_\" deprecated 2022-03-13 (targets version > 0.10.0). cloud storage integration, use repository argument instead. Formats \"rds\", \"file\", \"url\" general-purpose formats belong targets package . Going forward, additional formats implemented tar_format() third-party packages like tarchetypes geotargets (example: tarchetypes::tar_format_nanoparquet()). Formats \"qs\", \"fst\", etc. legacy formats existence tar_format(), continue remain targets without deprecation.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_option_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set target options. — tar_option_set","text":"","code":"tar_option_get(\"format\") # default format before we set anything #> [1] \"rds\" tar_target(x, 1)$settings$format #> [1] \"rds\" tar_option_set(format = \"fst_tbl\") # new default format tar_option_get(\"format\") #> [1] \"fst_tbl\" tar_target(x, 1)$settings$format #> [1] \"fst_tbl\" tar_option_reset() # reset the format tar_target(x, 1)$settings$format #> [1] \"rds\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(cue = tar_cue(mode = \"always\")) # All targets always run.   list(tar_target(x, 1), tar_target(y, 2)) }) tar_make() tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which targets are outdated. — tar_outdated","title":"Check which targets are outdated. — tar_outdated","text":"Checks outdated targets pipeline, targets rerun automatically call tar_make() similar. See tar_cue() rules decide whether target needs rerun.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which targets are outdated. — tar_outdated","text":"","code":"tar_outdated(   names = NULL,   shortcut = targets::tar_config_get(\"shortcut\"),   branches = FALSE,   targets_only = TRUE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   seconds_interval = targets::tar_config_get(\"seconds_interval\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which targets are outdated. — tar_outdated","text":"names Names targets. tar_outdated() check targets upstream ancestors dependency graph. Set names NULL check/build targets (default). object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Also, shortcut = TRUE works set names. branches Logical length 1, whether include branch names. Including branches get cumbersome large pipelines. Individual branch names still omitted branch-specific information reliable: example, pattern branches outdated target. targets_only Logical length 1, whether just restrict targets include functions global objects environment created running target script file (default: _targets.R). reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. seconds_interval Deprecated 2023-08-24 (version 1.2.2.9001). Use seconds_meta_append, seconds_meta_upload, seconds_reporter instead. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which targets are outdated. — tar_outdated","text":"Names outdated targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check which targets are outdated. — tar_outdated","text":"Requires define pipeline target script file (default: _targets.R). (See tar_script() details.)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Check which targets are outdated. — tar_outdated","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_outdated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check which targets are outdated. — tar_outdated","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(list(tar_target(x, 1 + 1))) tar_outdated() tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_outdated() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: identify the file path where a target will be stored. — tar_path","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"Deprecated: identify file path target stored target finishes running pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"","code":"tar_path(   name = NULL,   default = NA_character_,   create_dir = FALSE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"name Symbol, name target. NULL, tar_path() returns path target currently running pipeline. default Character, value return tar_path() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs. create_dir Logical length 1, whether create dirname(tar_path()) tar_path() . useful writing tar_path() inside storage = \"none\" target need parent directory file exist. store Character length 1, path data store tar_path() called outside running pipeline. tar_path() called inside running pipeline, argument ignored actual path running pipeline's data store used instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"Character, file path return value target. called inside running target, tar_path(name = your_target) just returns _targets/objects/your_target, file path your_target saved unless format equal \"file\" supported cloud-based storage formats. non-cloud storage formats, call tar_path() arguments target x running, name argument defaults name running target, tar_path() returns _targets/objects/x. cloud-backed formats, tar_path() returns path staging file _targets/scratch/. way, even select cloud repository (e.g. tar_target(..., repository = \"aws\", storage = \"none\")) can still manually write tar_path(create_dir = TRUE) targets package automatically hash upload AWS S3 bucket. apply format = \"file\", never need storage = \"none\" anyway.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"tar_path() deprecated 2022-10-11 (version 0.13.5.9000). Use tar_path_target() instead.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: identify the file path where a target will be stored. — tar_path","text":"","code":"tar_path_target() #> [1] NA tar_path_target(your_target) #> [1] \"_targets/objects/your_target\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(returns_path, tar_path_target()), ask = FALSE) tar_make() tar_read(returns_path) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Current target script path — tar_path_script","title":"Current target script path — tar_path_script","text":"Identify file path target script pipeline currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current target script path — tar_path_script","text":"","code":"tar_path_script()"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current target script path — tar_path_script","text":"Character, file path target script pipeline currently running. called outside pipeline currently running, tar_path_script() returns tar_config_get(\"script\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current target script path — tar_path_script","text":"","code":"tar_path_script() #> [1] \"_targets.R\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. script <- tempfile() tar_script(tar_target(x, tar_path_script()), script = script, ask = FALSE) tar_make(script = script) tar_read(x) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script_support.html","id":null,"dir":"Reference","previous_headings":"","what":"Directory path to the support scripts of the current target script — tar_path_script_support","title":"Directory path to the support scripts of the current target script — tar_path_script_support","text":"Identify directory path support scripts current target script pipeline currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script_support.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directory path to the support scripts of the current target script — tar_path_script_support","text":"","code":"tar_path_script_support()"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script_support.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directory path to the support scripts of the current target script — tar_path_script_support","text":"Character, directory path target script pipeline currently running. called outside pipeline currently running, tar_path_script() returns tar_config_get(\"script\").","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script_support.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Directory path to the support scripts of the current target script — tar_path_script_support","text":"target script (default: _targets.R) comes support scripts written Target Markdown. support scripts usually live folder called _targets_r/, path may vary case case. tar_path_scipt_support() returns path folder support scripts.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_path_script_support.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directory path to the support scripts of the current target script — tar_path_script_support","text":"","code":"tar_path_script_support() #> [1] \"_targets_r\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. script <- tempfile() tar_script(   tar_target(x, tar_path_script_support()),   script = script,   ask = FALSE ) tar_make(script = script) tar_read(x) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Current data store path — tar_path_store","title":"Current data store path — tar_path_store","text":"Identify file path data store pipeline currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current data store path — tar_path_store","text":"","code":"tar_path_store()"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current data store path — tar_path_store","text":"Character, file path data store pipeline currently running. called outside pipeline currently running, tar_path_store() returns tar_config_get(\"store\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_path_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current data store path — tar_path_store","text":"","code":"tar_path_store() #> [1] \"_targets\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(x, tar_path_store()), ask = FALSE) store <- tempfile() tar_make(store = store) tar_read(x, store = store) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the file path where a target will be stored. — tar_path_target","title":"Identify the file path where a target will be stored. — tar_path_target","text":"Identify file path target stored target finishes running pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the file path where a target will be stored. — tar_path_target","text":"","code":"tar_path_target(   name = NULL,   default = NA_character_,   create_dir = FALSE,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_path_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the file path where a target will be stored. — tar_path_target","text":"name Symbol, name target. NULL, tar_path_target() returns path target currently running pipeline. default Character, value return tar_path_target() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs. create_dir Logical length 1, whether create dirname(tar_path_target()) tar_path_target() . useful writing tar_path_target() inside storage = \"none\" target need parent directory file exist. store Character length 1, path data store tar_path_target() called outside running pipeline. tar_path_target() called inside running pipeline, argument ignored actual path running pipeline's data store used instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_path_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the file path where a target will be stored. — tar_path_target","text":"Character, file path return value target. called inside running target, tar_path_target(name = your_target) just returns _targets/objects/your_target, file path your_target saved unless format equal \"file\" supported cloud-based storage formats. non-cloud storage formats, call tar_path_target() arguments target x running, name argument defaults name running target, tar_path_target() returns _targets/objects/x. cloud-backed formats, tar_path_target() returns path staging file _targets/scratch/. way, even select cloud repository (e.g. tar_target(..., repository = \"aws\", storage = \"none\")) can still manually write tar_path_target(create_dir = TRUE) targets package automatically hash upload AWS S3 bucket. apply format = \"file\", never need storage = \"none\" anyway.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_path_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the file path where a target will be stored. — tar_path_target","text":"","code":"tar_path_target() #> [1] NA tar_path_target(your_target) #> [1] \"_targets/objects/your_target\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(returns_path, tar_path_target()), ask = FALSE) tar_make() tar_read(returns_path) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Emulate dynamic branching. — tar_pattern","title":"Emulate dynamic branching. — tar_pattern","text":"Emulate dynamic branching process outside pipeline. tar_pattern() can help understand overall branching structure comes pattern argument tar_target().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emulate dynamic branching. — tar_pattern","text":"","code":"tar_pattern(pattern, ..., seed = 0L)"},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emulate dynamic branching. — tar_pattern","text":"pattern Function call pattern specification. ... Named integers, length 1. name name dependency target, integer length target (number branches slices). Names must unique. seed Integer length 1, random number generator seed emulate pattern reproducibly. (sample() pattern random). real pipeline, seed automatically generated target name deterministic fashion.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emulate dynamic branching. — tar_pattern","text":"tibble showing kinds dynamic branches tar_target() create real pipeline given pattern. row dynamic branch, column dependency target, element name upstream bud branch downstream branch depends . Buds pieces non-branching targets (\"stems\") branches pieces patterns. returned bud branch names actual ones see run pipeline, communicate branching structure pattern.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Emulate dynamic branching. — tar_pattern","text":"Dynamic branching way programmatically create multiple new targets based values targets, pipeline running. Use pattern argument tar_target() get started. pattern accepts function call composed target names following patterns: map(): iterate one targets sequence. cross(): iterate combinations slices targets. slice(): select one slices index, e.g. slice(x, index = c(3, 4)) selects third fourth slice branch x. head(): restrict branching first elements. tail(): restrict branching last elements. sample(): restrict branching random subset elements.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emulate dynamic branching. — tar_pattern","text":"","code":"# To use dynamic map for real in a pipeline, # call map() in a target's pattern. # The following code goes at the bottom of # your target script file (default: `_targets.R`). list(   tar_target(x, seq_len(2)),   tar_target(y, head(letters, 2)),   tar_target(dynamic, c(x, y), pattern = map(x, y)) # 2 branches ) #> [[1]] #> <tar_stem>  #>   name: x  #>   description:   #>   command: #>     seq_len(2)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]] #> <tar_stem>  #>   name: y  #>   description:   #>   command: #>     head(letters, 2)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[3]] #> <tar_pattern>  #>   name: dynamic  #>   description:   #>   command: #>     c(x, y)  #>   pattern: #>     map(x, y)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL # Likewise for more complicated patterns. list(   tar_target(x, seq_len(2)),   tar_target(y, head(letters, 2)),   tar_target(z, head(LETTERS, 2)),   tar_target(dynamic, c(x, y, z), pattern = cross(z, map(x, y))) #4 branches ) #> [[1]] #> <tar_stem>  #>   name: x  #>   description:   #>   command: #>     seq_len(2)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]] #> <tar_stem>  #>   name: y  #>   description:   #>   command: #>     head(letters, 2)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[3]] #> <tar_stem>  #>   name: z  #>   description:   #>   command: #>     head(LETTERS, 2)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[4]] #> <tar_pattern>  #>   name: dynamic  #>   description:   #>   command: #>     c(x, y, z)  #>   pattern: #>     cross(z, map(x, y))  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL # But you can emulate dynamic branching without running a pipeline # in order to understand the patterns you are creating. Simply supply # the pattern and the length of each dependency target. # The returned data frame represents the branching structure of the pattern: # One row per new branch, one column per dependency target, and # one element per bud/branch in each dependency target. tar_pattern(   cross(x, map(y, z)),   x = 2,   y = 3,   z = 3 ) #> # A tibble: 6 × 3 #>   x     y     z     #>   <chr> <chr> <chr> #> 1 x_1   y_1   z_1   #> 2 x_1   y_2   z_2   #> 3 x_1   y_3   z_3   #> 4 x_2   y_1   z_1   #> 5 x_2   y_2   z_2   #> 6 x_2   y_3   z_3   tar_pattern(   head(cross(x, map(y, z)), n = 2),   x = 2,   y = 3,   z = 3 ) #> # A tibble: 2 × 3 #>   x     y     z     #>   <chr> <chr> <chr> #> 1 x_1   y_1   z_1   #> 2 x_1   y_2   z_2"},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get main process ID. — tar_pid","title":"Get main process ID. — tar_pid","text":"Get process ID (PID) recent main R process orchestrate targets current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get main process ID. — tar_pid","text":"","code":"tar_pid(store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get main process ID. — tar_pid","text":"store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get main process ID. — tar_pid","text":"Integer process ID (PID) recent main R process orchestrate targets current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get main process ID. — tar_pid","text":"main process R process invoked tar_make() similar. callr_function NULL, external process, pid return value agree Sys.getpid() current interactive session. process may may alive. may want check ps::ps_is_running(ps::ps_handle(targets::tar_pid())) running another call tar_make() project.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_pid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get main process ID. — tar_pid","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() Sys.getpid() tar_pid() # Different from the current PID. }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a pipeline (deprecated). — tar_pipeline","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"Functions tar_pipeline() tar_bind() deprecated. Instead, simply end target script file (default: _targets.R) list target objects. can nest objects however like.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"","code":"tar_pipeline(...)"},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"... Targets lists targets defined tar_target().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"pipeline object.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"Deprecated 2021-01-03.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a pipeline (deprecated). — tar_pipeline","text":"","code":"# In _targets.R: library(targets) list( # You no longer need tar_pipeline() here.   tar_target(data_file, \"data.csv\", format = \"file\"),   list( # Target lists can be arbitrarily nested.     tar_target(data_object, read.csv(data_file)),     tar_target(analysis, analyze(data_object))   ) ) #> [[1]] #> <tar_stem>  #>   name: data_file  #>   description:   #>   command: #>     \"data.csv\"  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]] #> [[2]][[1]] #> <tar_stem>  #>   name: data_object  #>   description:   #>   command: #>     read.csv(data_file)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[2]][[2]] #> <tar_stem>  #>   name: analysis  #>   description:   #>   command: #>     analyze(data_object)  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #>"},{"path":"https://docs.ropensci.org/targets/reference/tar_poll.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeatedly poll progress in the R console. — tar_poll","title":"Repeatedly poll progress in the R console. — tar_poll","text":"Print information tar_progress_summary() regular intervals.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_poll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeatedly poll progress in the R console. — tar_poll","text":"","code":"tar_poll(   interval = 1,   timeout = Inf,   fields = c(\"skipped\", \"dispatched\", \"completed\", \"errored\", \"canceled\", \"since\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_poll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeatedly poll progress in the R console. — tar_poll","text":"interval Number seconds wait iterations polling progress. timeout many seconds run exiting. fields Optional character vector names progress data columns read. Set NULL read fields. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_poll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeatedly poll progress in the R console. — tar_poll","text":"NULL (invisibly). Called side effects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_poll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeatedly poll progress in the R console. — tar_poll","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   list(     tar_target(x, seq_len(100)),     tar_target(y, Sys.sleep(0.1), pattern = map(x))   ) }, ask = FALSE) px <- tar_make(callr_function = callr::r_bg, reporter = \"silent\") tar_poll() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Get main process info. — tar_process","title":"Get main process info. — tar_process","text":"Get info recent main R process orchestrate targets current project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get main process info. — tar_process","text":"","code":"tar_process(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get main process info. — tar_process","text":"names Optional, names data points return. supplied, tar_process() returns rows names select. object supplied names NULL tidyselect expression like any_of() starts_with(). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get main process info. — tar_process","text":"data frame metadata recent main R process orchestrate targets current project. output includes pid main process.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get main process info. — tar_process","text":"main process R process invoked tar_make() similar. callr_function NULL, external process, pid return value agree Sys.getpid() current interactive session. process may may alive. may want check status tar_pid() %% ps::ps_pids() running another call tar_make() project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Get main process info. — tar_process","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get main process info. — tar_process","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_process() tar_process(pid) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Read progress. — tar_progress","title":"Read progress. — tar_progress","text":"Read project's target progress data recent run tar_make() similar. recent record shown.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read progress. — tar_progress","text":"","code":"tar_progress(   names = NULL,   fields = \"progress\",   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read progress. — tar_progress","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. fields Optional, names progress data columns read. Set NULL read fields. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read progress. — tar_progress","text":"data frame one row per target following columns: name: name target. type: type target: \"stem\" non-branching targets, \"pattern\" dynamically branching targets, \"branch\" dynamic branches. parent: name target's parent. branches, name associated pattern. targets, pattern just . branches: number dynamic branches pattern. 0 non-patterns. progress: recent progress update target. \"dispatched\", \"completed\", \"skipped\", \"canceled\", \"errored\". \"dispatched\" means target sent run, case tar_make() crew controller, target might actually start running right away crew workers busy.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Read progress. — tar_progress","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read progress. — tar_progress","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_progress() tar_progress(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate the progress of dynamic branches. — tar_progress_branches","title":"Tabulate the progress of dynamic branches. — tar_progress_branches","text":"Read project's target progress data recent run pipeline display tabulated status dynamic branches. recent record shown.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate the progress of dynamic branches. — tar_progress_branches","text":"","code":"tar_progress_branches(   names = NULL,   fields = NULL,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate the progress of dynamic branches. — tar_progress_branches","text":"names Optional, names targets. supplied, tar_progress() returns progress information targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. fields Optional, names progress data columns read. Set NULL read fields. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate the progress of dynamic branches. — tar_progress_branches","text":"data frame one row per target per progress status following columns. name: name pattern. progress: progress status: \"dispatched\", \"completed\", \"canceled\", \"errored\". branches: number branches progress category. total: total number branches planned whole pattern. Values within pattern equal.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate the progress of dynamic branches. — tar_progress_branches","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, x, pattern = map(x)),     tar_target(z, stopifnot(y < 1.5), pattern = map(y))   ) }, ask = FALSE) try(tar_make()) tar_progress_branches() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize target progress. — tar_progress_summary","title":"Summarize target progress. — tar_progress_summary","text":"Summarize progress run pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize target progress. — tar_progress_summary","text":"","code":"tar_progress_summary(   fields = c(\"skipped\", \"dispatched\", \"completed\", \"errored\", \"canceled\", \"since\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize target progress. — tar_progress_summary","text":"fields Optional character vector names progress data columns read. Set NULL read fields. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize target progress. — tar_progress_summary","text":"data frame one row following optional columns can selected fields. (time omitted default.) dispatched: number targets sent run (yet) finish. targets may actually running, depending status workload parallel workers. completed: number targets completed without error cancellation. errored: number targets threw error. canceled: number canceled targets (see tar_cancel()). since: long ago progress last changed (Sys.time() - time). time: time progress last changed (modification timestamp _targets/meta/progress file).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_progress_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize target progress. — tar_progress_summary","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(x, seq_len(2)),     tar_target(y, x, pattern = map(x)),     tar_target(z, stopifnot(y < 1.5), pattern = map(y), error = \"continue\")   ) }, ask = FALSE) try(tar_make()) tar_progress_summary() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove targets that are no longer part of the pipeline. — tar_prune","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"Remove target values _targets/objects/ cloud remove target metadata _targets/meta/meta targets longer part pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"","code":"tar_prune(   cloud = TRUE,   batch_size = 1000L,   verbose = TRUE,   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"cloud Logical length 1, whether delete objects cloud applicable (e.g. AWS, GCP). FALSE, files deleted cloud. batch_size Positive integer 1 1000, number target objects delete cloud HTTP API request. Currently supported AWS. 1000. verbose Logical length 1, whether print console messages show progress deleting batch targets cloud bucket. Batched deletion verbosity currently supported AWS. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"NULL except callr_function callr::r_bg, case handle callr background process returned. Either way, value invisibly returned.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"tar_prune() useful recently worked multiple changes project now trying discard irrelevant data keeping results still matter. Global objects local files format = \"file\" outside data store unaffected. Also removes _targets/scratch/, needed tar_make(), tar_make_clustermq(), tar_make_future() running. list targets pruned without actually removing anything, use tar_prune_list().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_prune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove targets that are no longer part of the pipeline. — tar_prune","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() # Remove some targets from the pipeline. tar_script(list(tar_target(y1, 1 + 1)), ask = FALSE) # Keep only the remaining targets in the data store. tar_prune() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List targets that tar_prune() will remove. — tar_prune_list","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"List targets tar_prune() remove. actually remove targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"","code":"tar_prune_list(   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"callr_function callr::r_bg, return value handle callr background process returned. Otherwise, return value character vector target names identifying targets tar_prune() remove.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"See tar_prune() details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_prune_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List targets that tar_prune() will remove. — tar_prune_list","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2)   ) }, ask = FALSE) tar_make() # Remove some targets from the pipeline. tar_script(list(tar_target(y1, 1 + 1)), ask = FALSE) # List targets that tar_prune() will remove. tar_prune_list() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_random_port.html","id":null,"dir":"Reference","previous_headings":"","what":"Random TCP port — tar_random_port","title":"Random TCP port — tar_random_port","text":"user-side function. Exported infrastructure purposes . user-side function. Exported infrastructure purposes .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_random_port.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random TCP port — tar_random_port","text":"","code":"tar_random_port(lower = 49152L, upper = 65355L)  tar_random_port(lower = 49152L, upper = 65355L)"},{"path":"https://docs.ropensci.org/targets/reference/tar_random_port.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random TCP port — tar_random_port","text":"lower Integer length 1, lowest possible port. upper Integer length 1, highest possible port.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_random_port.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random TCP port — tar_random_port","text":"random port likely used another process. random port likely used another process.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_random_port.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random TCP port — tar_random_port","text":"","code":"if (requireNamespace(\"parallelly\", quietly = TRUE)) { tar_random_port() } #> [1] 50069 if (requireNamespace(\"parallelly\", quietly = TRUE)) { tar_random_port() } #> [1] 64152"},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a target's value from storage. — tar_read","title":"Read a target's value from storage. — tar_read","text":"Read target's return value file _targets/objects/. file targets (.e. format = \"file\") paths returned. tar_read() expects unevaluated symbol name argument, whereas tar_read_raw() expects character string.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a target's value from storage. — tar_read","text":"","code":"tar_read(   name,   branches = NULL,   meta = tar_meta(store = store),   store = targets::tar_config_get(\"store\") )  tar_read_raw(   name,   branches = NULL,   meta = tar_meta(store = store),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a target's value from storage. — tar_read","text":"name Name target read. tar_read() expects unevaluated symbol name argument, whereas tar_read_raw() expects character string. branches Integer indices branches load target pattern. meta Data frame metadata tar_meta(). tar_read() default arguments can inefficient large pipelines metadata stored single file. However, call tar_meta() beforehand supply meta argument, successive calls tar_read() may run much faster. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a target's value from storage. — tar_read","text":"target's return value file _targets/objects/, paths custom files directories format = \"file\" set.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Read a target's value from storage. — tar_read","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Read a target's value from storage. — tar_read","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a target's value from storage. — tar_read","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, 1 + 1)) }) tar_make() tar_read(x) tar_read_raw(\"x\") }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up package dependencies for compatibility with renv — tar_renv","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"Write package dependencies script file (default, named _targets_packages.R root project directory). package written separate line standard library() call (e.g. library(package)) renv can identify automatically.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"","code":"tar_renv(   extras = c(\"bslib\", \"crew\", \"gt\", \"markdown\", \"rstudioapi\", \"shiny\", \"shinybusy\",     \"shinyWidgets\", \"visNetwork\"),   path = \"_targets_packages.R\",   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"extras Character vector additional packages declare project dependencies. path Character length 1, path script file populate library() calls. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"Nothing, invisibly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"function gets called side-effect, writes package dependencies script compatibility renv. generated file edited hand overwritten time tar_renv() called. behavior renv create manage project-local R library keep record project dependencies file called renv.lock. identify dependencies, renv crawls code find packages explicitly mentioned using library(), require(), ::. However, targets manages packages way hides dependencies renv. tar_renv() finds package dependencies otherwise hidden renv declared using targets API. Thus, calling tar_renv necessary using tar_option_set() tar_target() use specialized storage formats manage packages. script written tar_renv(), renv able crawl file identify package dependencies (renv::dependencies()). tar_renv() serves make targets project compatible renv, still users responsibility call renv::init() renv::snapshot() directly initialize manage project-local R library. allows targets pipeline self-contained R library separate standard R library. See https://rstudio.github.io/renv/index.html information.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"use renv, overhead project initialization slow tar_make() friends. experience slowness, please make sure renv library fast file system. (example, slow network drives can severely reduce performance.) addition, can disable slowest renv initialization checks. confirming https://rstudio.github.io/renv/reference/config.html can safely disable checks, can write lines RENV_CONFIG_RSPM_ENABLED=false, RENV_CONFIG_SANDBOX_ENABLED=false, RENV_CONFIG_SYNCHRONIZED_CHECK=false user-level .Renviron file. disable synchronization check, remember call renv::status() periodically check health renv project library.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_renv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up package dependencies for compatibility with renv — tar_renv","text":"","code":"tar_dir({ # tar_dir() runs code from a temp dir for CRAN.   tar_script({     library(targets)     library(tarchetypes)     tar_option_set(packages = c(\"tibble\", \"qs\"))     list()   }, ask = FALSE)   tar_renv()   writeLines(readLines(\"_targets_packages.R\")) }) #> # Generated by targets::tar_renv(): do not edit by hand #> library(bslib) #> library(crew) #> library(gt) #> library(markdown) #> library(qs) #> library(rstudioapi) #> library(shiny) #> library(shinyWidgets) #> library(shinybusy) #> library(tibble) #> library(visNetwork) tar_option_reset()"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"Define custom storage repository uses content-addressable storage (CAS).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"","code":"tar_repository_cas(   upload,   download,   exists,   consistent = FALSE,   substitute = list() )"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"upload function arguments key path, order. function upload file directory path CAS system. path file originally saved disk outside CAS system. staging area custom format = \"file\" location. key denotes name destination data object CAS system. differentiate format = \"file\" targets non-\"file\" targets, upload method can use tar_format_get(). example, make tar_repository_cas_local() efficient, upload moves file targets::tar_format_get() == \"file\" copies otherwise. See \"Repository functions\" section details. download function arguments key path, order. function download data object key CAS system file directory path. key denotes name data object CAS system. path temporary staging area final destination. Please careful avoid deleting object key CAS system. CAS system local file system, example, download copy file simply move (e.g. please avoid file.rename()). See \"Repository functions\" section details. exists function single argument key. function check object key CAS system. efficiency, exists can maintain -memory cache keys. New lookups can check cache potentially avoid expensive queries CAS system. See source code tar_cas_e() example can work local file system CAS. See \"Repository functions\" section details. consistent Logical. Set TRUE storage platform strongly read--write consistent. Set FALSE platform necessarily strongly read--write consistent. data storage system said strong read--write consistency new object fully available reading soon write operation finishes. Many modern cloud services like Amazon S3 Google Cloud Storage strong read--write consistency, meaning upload object PUT request, GET request immediately afterwards retrieve precise version object just uploaded. storage systems strong read--write consistency. One example network file systems (NFS). computing cluster, one node creates file NFS, delay nodes can access new file. targets handles situation waiting new file appear correct hash attempting use downstream computations. consistent = FALSE imposes waiting period targets repeatedly calls exists method file becomes available (time intervals configurable tar_resources_network()). extra calls exists may come little extra latency / computational burden, systems strongly read--write consistent, way targets can safely use current results downstream computations. substitute Named list values inserted body custom function place symbols body. example, upload = function(key, path) do_upload(key, path, bucket = X) substitute = list(X = \"my_aws_bucket\"), upload function actually end function(key, path) do_upload(key, path, bucket = \"my_aws_bucket\"). Please include temporary sensitive information authentication credentials. , targets write metadata disk, malicious actor steal misuse . Instead, pass sensitive information environment variables using tar_resources_repository_cas(). environment variables exist transient memory spaces R sessions local worker processes.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":"content-addressable-storage","dir":"Reference","previous_headings":"","what":"Content-addressable storage","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"Normally, targets organizes output data based target names. example, pipeline single target x default settings, tar_make() saves output data file _targets/objects/x. output x changes, tar_make() overwrites _targets/objects/x. words, matter many changes happen x, data store always looks like :   contrast, content-addressable storage (CAS), targets organizes outputs based hashes contents. name output file hash, metadata maps hashes target names. example, suppose target x repository = tar_repository_cas_local(\"my_cas\"). output x changes, tar_make() creates new file inside my_cas/ without overwriting deleting files folder. run tar_make() three different times three different values x, storage look like :   next call tar_read(x) uses tar_meta(x)$data look current hash x. tar_meta(x)$data returns \"1fffeb09ad36e84a\", tar_read(x) returns data my_cas/1fffeb09ad36e84a. Files my_cas/68328d833e6361d3 my_cas/798af464fb2f6b30 left previous values x. CAS accumulates historical data objects, ideal data versioning collaboration. commit _targets/meta/meta file version control alongside source code, can revert previous state pipeline targets date, colleague can leverage hard-won results using fork code metadata. downside CAS cost accumulating many data objects time. pipelines use CAS garbage collection system retention policy remove data objects longer needed. tar_repository_cas() function lets create CAS system targets. can supply arbitrary custom methods upload, download, check existence data objects. custom CAS system can exist locally shared file system remotely cloud (e.g. AWS S3 bucket). See \"Repository functions\" section documentation individual arguments advice write methods. tar_repository_cas_local() function example CAS system based local folder disk. uses tar_cas_u() uploads, tar_cas_d() downloads, tar_cas_e() existence.","code":"_targets/     meta/         meta     objects/         x _targets/     meta/         meta my_cas/     1fffeb09ad36e84a     68328d833e6361d3     798af464fb2f6b30"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":"repository-functions","dir":"Reference","previous_headings":"","what":"Repository functions","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"tar_repository_cas(), functions upload, download, exists must completely pure self-sufficient. must load namespace packages, must depend custom user-defined functions objects global environment pipeline. targets converts function text, must rely data closure. disqualifies functions produced Vectorize(), example. upload download can assume length(path) 1, account possibility path directory. simply avoid supporting directories, upload simply call assertion:   Otherwise, support directories may require handling special case. example, upload download copy files given directory, manage directory zip archive. functions may need adapted configured based inputs. example, may want define upload = \\(key, path) file.rename(path, file.path(folder, key)) want hard-code value folder write underlying function. substitute argument handles situation. example, substitute list(folder = \"my_folder\"), upload end \\(key, path) file.rename(path, file.path(\"my_folder\", key)). Temporary sensitive authentication credentials injected way function body. Instead, pass environment variables using tar_resources_repository_cas().","code":"targets::tar_assert_not_dir(   path,   msg = \"This CAS upload method does not support directories.\" )"},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a custom content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   repository <- tar_repository_cas(     upload = function(key, path) {       if (dir.exists(path)) {         stop(\"This CAS repository does not support directory outputs.\")       }       if (!file.exists(\"cas\")) {         dir.create(\"cas\", recursive = TRUE)       }       file.rename(path, file.path(\"cas\", key))     },     download = function(key, path) {       file.copy(file.path(\"cas\", key), path)     },     exists = function(key) {       file.exists(file.path(\"cas\", key))     }   )   write_file <- function(object) {     writeLines(as.character(object), \"file.txt\")     \"file.txt\"   }   list(     tar_target(x, c(2L, 4L), repository = repository),     tar_target(       y,       x,       pattern = map(x),       format = \"qs\",       repository = repository     ),     tar_target(z, write_file(y), format = \"file\", repository = repository)   ) }) tar_make() tar_read(y) tar_read(z) list.files(\"cas\") tar_meta(any_of(c(\"x\", \"z\")), fields = any_of(\"data\")) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"Local content-addressable storage (CAS) repository.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"","code":"tar_repository_cas_local(path = NULL, consistent = FALSE)"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"path Character string, file path CAS repository data object files stored. NULL default file.path(tar_config_get(\"store\"), \"cas\") (usually \"_targets/cas/\"). consistent Logical. Set TRUE storage platform strongly read--write consistent. Set FALSE platform necessarily strongly read--write consistent. data storage system said strong read--write consistency new object fully available reading soon write operation finishes. Many modern cloud services like Amazon S3 Google Cloud Storage strong read--write consistency, meaning upload object PUT request, GET request immediately afterwards retrieve precise version object just uploaded. storage systems strong read--write consistency. One example network file systems (NFS). computing cluster, one node creates file NFS, delay nodes can access new file. targets handles situation waiting new file appear correct hash attempting use downstream computations. consistent = FALSE imposes waiting period targets repeatedly calls exists method file becomes available (time intervals configurable tar_resources_network()). extra calls exists may come little extra latency / computational burden, systems strongly read--write consistent, way targets can safely use current results downstream computations.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"character string tar_repository_cas() may passed repository argument tar_target() tar_option_set() use local CAS system.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"Pass repository argument tar_target() tar_option_set() use local CAS system.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"content-addressable-storage","dir":"Reference","previous_headings":"","what":"Content-addressable storage","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"Normally, targets organizes output data based target names. example, pipeline single target x default settings, tar_make() saves output data file _targets/objects/x. output x changes, tar_make() overwrites _targets/objects/x. words, matter many changes happen x, data store always looks like :   contrast, content-addressable storage (CAS), targets organizes outputs based hashes contents. name output file hash, metadata maps hashes target names. example, suppose target x repository = tar_repository_cas_local(\"my_cas\"). output x changes, tar_make() creates new file inside my_cas/ without overwriting deleting files folder. run tar_make() three different times three different values x, storage look like :   next call tar_read(x) uses tar_meta(x)$data look current hash x. tar_meta(x)$data returns \"1fffeb09ad36e84a\", tar_read(x) returns data my_cas/1fffeb09ad36e84a. Files my_cas/68328d833e6361d3 my_cas/798af464fb2f6b30 left previous values x. CAS accumulates historical data objects, ideal data versioning collaboration. commit _targets/meta/meta file version control alongside source code, can revert previous state pipeline targets date, colleague can leverage hard-won results using fork code metadata. downside CAS cost accumulating many data objects time. pipelines use CAS garbage collection system retention policy remove data objects longer needed. tar_repository_cas() function lets create CAS system targets. can supply arbitrary custom methods upload, download, check existence data objects. custom CAS system can exist locally shared file system remotely cloud (e.g. AWS S3 bucket). See \"Repository functions\" section documentation individual arguments advice write methods. tar_repository_cas_local() function example CAS system based local folder disk. uses tar_cas_u() uploads, tar_cas_d() downloads, tar_cas_e() existence.","code":"_targets/     meta/         meta     objects/         x _targets/     meta/         meta my_cas/     1fffeb09ad36e84a     68328d833e6361d3     798af464fb2f6b30"},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local content-addressable storage (CAS) repository (an experimental feature). — tar_repository_cas_local","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   repository <- tar_repository_cas_local(\"cas\")   write_file <- function(object) {     writeLines(as.character(object), \"file.txt\")     \"file.txt\"   }   list(     tar_target(x, c(2L, 4L), repository = repository),     tar_target(       y,       x,       pattern = map(x),       format = \"qs\",       repository = repository     ),     tar_target(z, write_file(y), format = \"file\", repository = repository)   ) }) tar_make() tar_read(y) tar_read(z) list.files(\"cas\") tar_meta(any_of(c(\"x\", \"z\")), fields = any_of(\"data\")) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"Local CAS garbage collection — tar_repository_cas_local_gc","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"Garbage collection local content-addressable storage system.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"","code":"tar_repository_cas_local_gc(   path = NULL,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"path Character string, file path CAS repository data object files stored. NULL default file.path(tar_config_get(\"store\"), \"cas\") (usually \"_targets/cas/\"). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"NULL (invisibly). Called side effects. Removes files CAS repository path.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"Deletes files local CAS tar_meta(targets_only = TRUE)$data, including locally saved historical data pipeline. clears disk space, expense removing historical data data colleagues worked project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"content-addressable-storage","dir":"Reference","previous_headings":"","what":"Content-addressable storage","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"Normally, targets organizes output data based target names. example, pipeline single target x default settings, tar_make() saves output data file _targets/objects/x. output x changes, tar_make() overwrites _targets/objects/x. words, matter many changes happen x, data store always looks like :   contrast, content-addressable storage (CAS), targets organizes outputs based hashes contents. name output file hash, metadata maps hashes target names. example, suppose target x repository = tar_repository_cas_local(\"my_cas\"). output x changes, tar_make() creates new file inside my_cas/ without overwriting deleting files folder. run tar_make() three different times three different values x, storage look like :   next call tar_read(x) uses tar_meta(x)$data look current hash x. tar_meta(x)$data returns \"1fffeb09ad36e84a\", tar_read(x) returns data my_cas/1fffeb09ad36e84a. Files my_cas/68328d833e6361d3 my_cas/798af464fb2f6b30 left previous values x. CAS accumulates historical data objects, ideal data versioning collaboration. commit _targets/meta/meta file version control alongside source code, can revert previous state pipeline targets date, colleague can leverage hard-won results using fork code metadata. downside CAS cost accumulating many data objects time. pipelines use CAS garbage collection system retention policy remove data objects longer needed. tar_repository_cas() function lets create CAS system targets. can supply arbitrary custom methods upload, download, check existence data objects. custom CAS system can exist locally shared file system remotely cloud (e.g. AWS S3 bucket). See \"Repository functions\" section documentation individual arguments advice write methods. tar_repository_cas_local() function example CAS system based local folder disk. uses tar_cas_u() uploads, tar_cas_d() downloads, tar_cas_e() existence.","code":"_targets/     meta/         meta     objects/         x _targets/     meta/         meta my_cas/     1fffeb09ad36e84a     68328d833e6361d3     798af464fb2f6b30"},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_repository_cas_local_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local CAS garbage collection — tar_repository_cas_local_gc","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(seed = NA, repository = tar_repository_cas_local())   list(tar_target(x, sample.int(n = 9e9, size = 1))) }) for (index in seq_len(3)) tar_make(reporter = \"silent\") list.files(\"_targets/cas\") tar_repository_cas_local_gc() list.files(\"_targets/cas\") tar_meta(names = any_of(\"x\"), fields = any_of(\"data\")) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproducible example of targets with reprex — tar_reprex","title":"Reproducible example of targets with reprex — tar_reprex","text":"Create reproducible example targets pipeline reprex package.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproducible example of targets with reprex — tar_reprex","text":"","code":"tar_reprex(pipeline = tar_target(example_target, 1), run = tar_make(), ...)"},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproducible example of targets with reprex — tar_reprex","text":"pipeline R code target script file _targets.R. library(targets) automatically written top. run R code inspect run pipeline. ... Named arguments passed reprex::reprex().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproducible example of targets with reprex — tar_reprex","text":"character vector rendered reprex, invisibly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reproducible example of targets with reprex — tar_reprex","text":"best way get help issue create reproducible example problem post https://github.com/ropensci/targets/discussions tar_reprex() facilitates process. like reprex::reprex({targets::tar_script(...); tar_make()}), convenient.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_reprex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproducible example of targets with reprex — tar_reprex","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_reprex(   pipeline = {     list(       tar_target(data, data.frame(x = sample.int(1e3))),       tar_target(summary, mean(data$x, na.rm = TRUE))     )   },   run = {     tar_visnetwork()     tar_make()   } ) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources — tar_resources","title":"Target resources — tar_resources","text":"Create resources argument tar_target() tar_option_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources — tar_resources","text":"","code":"tar_resources(   aws = tar_option_get(\"resources\")$aws,   clustermq = tar_option_get(\"resources\")$clustermq,   crew = tar_option_get(\"resources\")$crew,   custom_format = tar_option_get(\"resources\")$custom_format,   feather = tar_option_get(\"resources\")$feather,   fst = tar_option_get(\"resources\")$fst,   future = tar_option_get(\"resources\")$future,   gcp = tar_option_get(\"resources\")$gcp,   network = tar_option_get(\"resources\")$network,   parquet = tar_option_get(\"resources\")$parquet,   qs = tar_option_get(\"resources\")$qs,   repository_cas = tar_option_get(\"resources\")$repository_cas,   url = tar_option_get(\"resources\")$url )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources — tar_resources","text":"aws Output function tar_resources_aws(). Amazon Web Services (AWS) S3 storage settings tar_target(..., repository = \"aws\"). See cloud storage section https://books.ropensci.org/targets/data.html details instructions. clustermq Output function tar_resources_clustermq(). Optional clustermq settings tar_make_clustermq(), including log_worker template arguments clustermq::workers(). clustermq workers persistent, one--one correspondence workers targets. clustermq resources apply workers, targets. correct way assign clustermq resources tar_option_set(), tar_target(). clustermq resources individual tar_target() calls ignored. crew Output function tar_resources_crew() target-specific settings integration crew R package. settings arguments push() method controller controller group object control things like auto-scaling behavior controller use case controller group. custom_format Output function tar_resources_custom_format() configuration details tar_format() storage formats. feather Output function tar_resources_feather(). Non-default arguments arrow::read_feather() arrow::write_feather() arrow/feather-based storage formats. Applies formats ending \"_feather\" suffix. details formats, see format argument tar_target(). fst Output function tar_resources_fst(). Non-default arguments fst::read_fst() fst::write_fst() fst-based storage formats. Applies formats ending \"fst\" name. details formats, see format argument tar_target(). future Output function tar_resources_future(). Optional future settings tar_make_future(), including resources argument future::future(), can include values insert template placeholders future.batchtools template files. supply resources argument future::future() targets. Resources supplied future::plan() future::tweak() completely ignored. gcp Output function tar_resources_gcp(). Google Cloud Storage bucket settings tar_target(..., repository = \"gcp\"). See cloud storage section https://books.ropensci.org/targets/data.html details instructions. network Output function tar_resources_network(). Settings configure handle unreliable network connections case uploading, downloading, checking data situations rely network file systems HTTP/HTTPS requests. Examples include retries timeouts internal storage management operations storage = \"worker\" format = \"file\" (network file systems), format = \"url\", repository = \"aws\", repository = \"gcp\". settings apply actions take custom R command target. parquet Output function tar_resources_parquet(). Non-default arguments arrow::read_parquet() arrow::write_parquet() arrow/parquet-based storage formats. Applies formats ending \"_parquet\" suffix. details formats, see format argument tar_target(). qs Output function tar_resources_qs(). Non-default arguments qs::qread() qs::qsave() qs-based storage formats. Applies formats ending \"_qs\" suffix. details formats, see format argument tar_target(). repository_cas Output function tar_resources_repository_cas() configuration details tar_repository_cas() storage repositories. url Output function tar_resources_url(). Non-default settings storage formats ending \"_url\" suffix. settings include curl handle extra control HTTP requests. details formats, see format argument tar_target().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources — tar_resources","text":"list objects class \"tar_resources\" non-default settings various optional backends data storage high-performance computing.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources — tar_resources","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources — tar_resources","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"qs\",   resources = tar_resources(     qs = tar_resources_qs(preset = \"fast\"),     future = tar_resources_future(resources = list(n_cores = 1))   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: qs  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     future: <environment> #>     qs: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"Create aws argument tar_resources() specify optional settings AWS tar_target(..., repository = \"aws\"). See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"","code":"tar_resources_aws(   bucket = targets::tar_option_get(\"resources\")$aws$bucket,   prefix = targets::tar_option_get(\"resources\")$aws$prefix,   region = targets::tar_option_get(\"resources\")$aws$region,   endpoint = targets::tar_option_get(\"resources\")$aws$endpoint,   s3_force_path_style = targets::tar_option_get(\"resources\")$aws$s3_force_path_style,   part_size = targets::tar_option_get(\"resources\")$aws$part_size,   page_size = targets::tar_option_get(\"resources\")$aws$page_size,   max_tries = targets::tar_option_get(\"resources\")$aws$max_tries,   seconds_timeout = targets::tar_option_get(\"resources\")$aws$seconds_timeout,   close_connection = targets::tar_option_get(\"resources\")$aws$close_connection,   verbose = targets::tar_option_get(\"resources\")$aws$verbose,   ... )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"bucket Character length 1, name existing bucket upload download return values affected targets pipeline. prefix Character length 1, \"directory path\" bucket target object metadata go. Please supply explicit prefix unique targets project. future, targets begin requiring explicitly user-supplied prefixes. (last note added 2023-08-24: targets version 1.2.2.9000.) region Character length 1, AWS region containing S3 bucket. Set NULL use default region. endpoint Character length 1, URL endpoint S3 storage. Defaults Amazon AWS endpoint NULL. Example: use S3 protocol Google Cloud Storage, set endpoint = \"https://storage.googleapis.com\" region = \"auto\". (custom endpoint may require explicitly set custom region directly tar_resources_aws(). region = \"auto\" happens work Google Cloud.) Also make sure create HMAC access keys Google Cloud Storage console (Settings => Interoperability) set AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY environment variables accordingly. , able use S3 storage formats Google Cloud storage buckets. one limitation, however: even bucket object versioning turned , targets may fail record object versions. Google Cloud Storage particular incompatibility. s3_force_path_style Logical length 1, whether use path-style addressing S3 requests. part_size Positive numeric length 1, number bytes part multipart upload. (Except last part, remainder.) multipart upload, part must least 5 MB. default value part_size argument 5 * (2 ^ 20). page_size Positive integer length 1, number items page paginated HTTP requests listing objects. max_tries Positive integer length 1, maximum number attempts access network resource AWS. seconds_timeout Positive numeric length 1, number seconds HTTP connection times . close_connection Logical length 1, whether close HTTP connections immediately. verbose Logical length 1, whether print console messages running computationally expensive operations listing objects large bucket. ... Named arguments functions paws.storage::s3() manage S3 storage. documentation specific functions linked https://www.paws-r-sdk.com/docs/s3/. configurable functions : paws.storage::s3()$head_object() paws.storage::s3()$get_object() paws.storage::s3()$delete_object() paws.storage::s3()$put_object() paws.storage::s3()$create_multipart_upload() paws.storage::s3()$abort_multipart_upload() paws.storage::s3()$complete_multipart_upload() paws.storage::s3()$upload_part() named arguments ... must \"bucket\", \"Bucket\", \"key\", \"Key\", \"prefix\", \"region\", \"part_size\", \"endpoint\", \"version\", \"VersionId\", \"body\", \"Body\", \"metadata\", \"Metadata\", \"UploadId\", \"MultipartUpload\", \"PartNumber\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"Object class \"tar_resources_aws\", supplied aws argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"See cloud storage section https://books.ropensci.org/targets/data.html details instructions.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_aws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: Amazon Web Services (AWS) S3 storage — tar_resources_aws","text":"","code":"# Somewhere in you target script file (usually _targets.R): if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_target(   name,   command(),   format = \"qs\",   repository = \"aws\",   resources = tar_resources(     aws = tar_resources_aws(       bucket = \"yourbucketname\",       prefix = \"_targets\"     ),     qs = tar_resources_qs(preset = \"fast\"),   ) ) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: clustermq high-performance computing — tar_resources_clustermq","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"Create clustermq argument tar_resources() specify optional high-performance computing settings tar_make_clustermq(). details, see documentation clustermq R package corresponding argument names help file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"","code":"tar_resources_clustermq(   template = targets::tar_option_get(\"resources\")$clustermq$template )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"template Named list, template argument clustermq::workers(). Defaults empty list.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"Object class \"tar_resources_clustermq\", supplied clustermq argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"clustermq workers persistent, one--one correspondence workers targets. clustermq resources apply workers, targets. correct way assign clustermq resources tar_option_set(), tar_target(). clustermq resources individual tar_target() calls ignored.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_clustermq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: clustermq high-performance computing — tar_resources_clustermq","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   resources = tar_resources(     clustermq = tar_resources_clustermq(template = list(n_cores = 2))   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     clustermq: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: crew high-performance computing — tar_resources_crew","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"Create crew argument tar_resources() specify optional target settings.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"","code":"tar_resources_crew(   controller = targets::tar_option_get(\"resources\")$crew$controller,   scale = NULL,   seconds_timeout = targets::tar_option_get(\"resources\")$crew$seconds_timeout )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"controller Character length 1. tar_option_get(\"controller\") crew controller group, controller argument tar_resources_crew() indicates controller controller group use. need heterogeneous workers, can leverage argument send different targets different worker groups. scale Deprecated version 1.3.0.9002 (2023-10-02). longer necessary. seconds_timeout Positive numeric length 1, optional task timeout passed .timeout argument mirai::mirai() (converting milliseconds).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"Object class \"tar_resources_crew\", supplied crew argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"tar_resources_crew() accepts target-specific settings integration crew R package. settings arguments push() method controller controller group object control things like auto-scaling behavior controller use case controller group.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_crew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: crew high-performance computing — tar_resources_crew","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   resources = tar_resources(     crew = tar_resources_crew(seconds_timeout = 5)   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     crew: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources for custom storage formats — tar_resources_custom_format","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"Create custom_format argument tar_resources() specify optional target settings custom storage formats.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"","code":"tar_resources_custom_format(   envvars = targets::tar_option_get(\"resources\")$custom_format$envvars )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"envvars Named character vector environment variables. environment variables temporarily set just call storage methods define tar_format(). Specific methods like read can retrieve values environment variables using Sys.getenv(). Set envvars NULL omit entirely.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"Object class \"tar_resources_custom_format\", supplied custom_format argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"tar_resources_custom_format() accepts target-specific settings customize tar_format() storage formats.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_custom_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources for custom storage formats — tar_resources_custom_format","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name = target_name,   command = data.frame(x = 1),   format = tar_format(     read = function(path) {       readRDS(file = path)     },     write = function(object, path) {       version <- as.integer(Sys.getenv(\"SERIALIZATION\", unset = \"2\"))       saveRDS(object = object, file = path, version = version)     }   ),   resources = tar_resources(     custom_format = tar_resources_custom_format(       envvars = c(SERIALIZATION = \"3\")     )   ) ) #> <tar_stem>  #>   name: target_name  #>   description:   #>   command: #>     data.frame(x = 1)  #>   format: format_custom&read=ZnVuY3Rpb24gKHBhdGgpIAp7CiAgICByZWFkUkRTKGZpbGUgPSBwYXRoKQp9&write=ZnVuY3Rpb24gKG9iamVjdCwgcGF0aCkgCnsKICAgIHZlcnNpb24gPC0gYXMuaW50ZWdlcihTeXMuZ2V0ZW52KCJTRVJJQUxJWkFUSU9OIiwgdW5zZXQgPSAiMiIpKQogICAgc2F2ZVJEUyhvYmplY3QgPSBvYmplY3QsIGZpbGUgPSBwYXRoLCB2ZXJzaW9uID0gdmVyc2lvbikKfQ&marshal=&unmarshal=&convert=&copy=&repository=  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     custom_format: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: feather storage formats — tar_resources_feather","title":"Target resources: feather storage formats — tar_resources_feather","text":"Create feather argument tar_resources() specify optional settings feather data frame storage formats powered arrow R package. See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: feather storage formats — tar_resources_feather","text":"","code":"tar_resources_feather(   compression = targets::tar_option_get(\"resources\")$feather$compression,   compression_level = targets::tar_option_get(\"resources\")$feather$compression_level )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: feather storage formats — tar_resources_feather","text":"compression Character length 1, compression argument arrow::write_feather(). Defaults \"default\". compression_level Numeric length 1, compression_level argument arrow::write_feather(). Defaults NULL.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: feather storage formats — tar_resources_feather","text":"Object class \"tar_resources_feather\", supplied feather argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: feather storage formats — tar_resources_feather","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_feather.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: feather storage formats — tar_resources_feather","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"feather\",   resources = tar_resources(     feather = tar_resources_feather(compression = \"lz4\")   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: feather  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     feather: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: fst storage formats — tar_resources_fst","title":"Target resources: fst storage formats — tar_resources_fst","text":"Create fst argument tar_resources() specify optional settings big data frame storage formats powered fst R package. See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: fst storage formats — tar_resources_fst","text":"","code":"tar_resources_fst(compress = targets::tar_option_get(\"resources\")$fst$compress)"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: fst storage formats — tar_resources_fst","text":"compress Numeric length 1, compress argument fst::write_fst(). Defaults 50.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: fst storage formats — tar_resources_fst","text":"Object class \"tar_resources_fst\", supplied fst argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: fst storage formats — tar_resources_fst","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: fst storage formats — tar_resources_fst","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"fst_tbl\",   resources = tar_resources(     fst = tar_resources_fst(compress = 100)   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: fst_tbl  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     fst: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: future high-performance computing — tar_resources_future","title":"Target resources: future high-performance computing — tar_resources_future","text":"Create future argument tar_resources() specify optional high-performance computing settings tar_make_future(). supply resources argument future::future() targets. Resources supplied future::plan() future::tweak() completely ignored. details, see documentation future R package corresponding argument names help file.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: future high-performance computing — tar_resources_future","text":"","code":"tar_resources_future(   plan = NULL,   resources = targets::tar_option_get(\"resources\")$future$resources )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: future high-performance computing — tar_resources_future","text":"plan future::plan() object NULL, target-specific future plan. Defaults NULL. resources Named list, resources argument future::future(). argument supported versions future. versions future resources supported, instead supply resources future::tweak() assign returned plan plan argument tar_resources_future(). default value resources tar_resources_future() empty list.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: future high-performance computing — tar_resources_future","text":"Object class \"tar_resources_future\", supplied future argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: future high-performance computing — tar_resources_future","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_future.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: future high-performance computing — tar_resources_future","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   resources = tar_resources(     future = tar_resources_future(resources = list(n_cores = 2))   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: rds  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     future: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"Create gcp argument tar_resources() specify optional settings Google Cloud Storage targets tar_target(..., repository = \"gcp\"). See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"","code":"tar_resources_gcp(   bucket = targets::tar_option_get(\"resources\")$gcp$bucket,   prefix = targets::tar_option_get(\"resources\")$gcp$prefix,   predefined_acl = targets::tar_option_get(\"resources\")$gcp$predefined_acl,   max_tries = targets::tar_option_get(\"resources\")$gcp$max_tries,   verbose = targets::tar_option_get(\"resources\")$gcp$verbose )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"bucket Character length 1, name existing bucket upload download return values affected targets pipeline. prefix Character length 1, \"directory path\" bucket target object metadata go. Please supply explicit prefix unique targets project. future, targets begin requiring explicitly user-supplied prefixes. (last note added 2023-08-24: targets version 1.2.2.9000.) predefined_acl Character length 1, user access object. See ?googleCloudStorageR::gcs_upload possible values. Defaults \"private\". max_tries Positive integer length 1, number tries accessing network resource GCP. verbose Logical length 1, whether print extra messages like progress bars uploads downloads. Defaults FALSE.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"Object class \"tar_resources_gcp\", supplied gcp argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"See cloud storage section https://books.ropensci.org/targets/data.html details instructions.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_gcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: Google Cloud Platform (GCP) Google Cloud Storage (GCS) — tar_resources_gcp","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"qs\",   repository = \"gcp\",   resources = tar_resources(     gcp = tar_resources_gcp(       bucket = \"yourbucketname\",       prefix = \"_targets\"     ),     qs = tar_resources_qs(preset = \"fast\"),   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: qs  #>   repository: gcp  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     gcp: <environment> #>     qs: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources for network file systems. — tar_resources_network","title":"Target resources for network file systems. — tar_resources_network","text":"high-performance computing network file systems, storage = \"worker\" tar_target() tar_option_set(), targets waits hashes synchronize continuing pipeline. resources control retry mechanism.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources for network file systems. — tar_resources_network","text":"","code":"tar_resources_network(   max_tries = targets::tar_option_get(\"resources\")$network$max_tries,   seconds_interval = targets::tar_option_get(\"resources\")$network$seconds_interval,   seconds_timeout = targets::tar_option_get(\"resources\")$network$seconds_timeout,   verbose = targets::tar_option_get(\"resources\")$network$verbose )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources for network file systems. — tar_resources_network","text":"max_tries Positive integer length 1. Max number tries. seconds_interval Positive numeric length 1, seconds retries. seconds_timeout Positive numeric length 1. Timeout length seconds. verbose Logical length 1, whether print informative console messages.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources for network file systems. — tar_resources_network","text":"Object class \"tar_resources_network\", supplied network argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources for network file systems. — tar_resources_network","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources for network file systems. — tar_resources_network","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN # Somewhere in you target script file (usually _targets.R): tar_target(   name = your_name,   command = your_command(),   storage = \"worker\",   resources = tar_resources(     network = tar_resources_network(max_tries = 3)   ) ) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: parquet storage formats — tar_resources_parquet","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"Create parquet argument tar_resources() specify optional settings parquet data frame storage formats powered arrow R package. See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"","code":"tar_resources_parquet(   compression = targets::tar_option_get(\"resources\")$parquet$compression,   compression_level = targets::tar_option_get(\"resources\")$parquet$compression_level )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"compression Character length 1, compression argument arrow::write_parquet(). Defaults \"snappy\". compression_level Numeric length 1, compression_level argument arrow::write_parquet(). Defaults NULL.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"Object class \"tar_resources_parquet\", supplied parquet argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: parquet storage formats — tar_resources_parquet","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"parquet\",   resources = tar_resources(     parquet = tar_resources_parquet(compression = \"lz4\")   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: parquet  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     parquet: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: qs storage formats — tar_resources_qs","title":"Target resources: qs storage formats — tar_resources_qs","text":"Create qs argument tar_resources() specify optional settings big data storage formats powered qs R package. See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: qs storage formats — tar_resources_qs","text":"","code":"tar_resources_qs(preset = targets::tar_option_get(\"resources\")$qs$preset)"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: qs storage formats — tar_resources_qs","text":"preset Character length 1, preset argument qs::qsave(). Defaults \"high\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: qs storage formats — tar_resources_qs","text":"Object class \"tar_resources_qs\", supplied qs argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: qs storage formats — tar_resources_qs","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_qs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: qs storage formats — tar_resources_qs","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"qs\",   resources = tar_resources(     qs = tar_resources_qs(preset = \"fast\")   ) ) #> <tar_stem>  #>   name: name  #>   description:   #>   command: #>     command()  #>   format: qs  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     qs: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources for custom storage formats — tar_resources_repository_cas","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"Create repository_cas argument tar_resources() specify optional target settings custom storage formats.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"","code":"tar_resources_repository_cas(   envvars = targets::tar_option_get(\"resources\")$repository_cas$envvars )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"envvars Named character vector environment variables. environment variables temporarily set just call storage methods define tar_format(). Specific methods like read can retrieve values environment variables using Sys.getenv(). Set envvars NULL omit entirely.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"Object class \"tar_resources_repository_cas\", supplied repository_cas argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"tar_resources_repository_cas() accepts target-specific settings customize tar_repository_cas() storage repositories.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_repository_cas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources for custom storage formats — tar_resources_repository_cas","text":"","code":"# Somewhere in you target script file (usually _targets.R): tar_target(   name = target_name,   command = data.frame(x = 1),   repository = tar_repository_cas(     upload = function(key, path) {       if (dir.exists(path)) {         stop(\"This CAS repository does not support directory outputs.\")       }       if (!file.exists(\"cas\")) {         dir.create(\"cas\", recursive = TRUE)       }       file.copy(path, file.path(\"cas\", key))     },     download = function(key, path) {       file.copy(file.path(\"cas\", key), path)     },     exists = function(key) {       file.exists(file.path(\"cas\", key))     }   ),   resources = tar_resources(     repository_cas = tar_resources_repository_cas(       envvars = c(AUTHENTICATION_CREDENTIALS = \"...\")     )   ) ) #> <tar_stem>  #>   name: target_name  #>   description:   #>   command: #>     data.frame(x = 1)  #>   format: rds  #>   repository: repository_cas&upload=ZnVuY3Rpb24gKGtleSwgcGF0aCkgCnsKICAgIGlmIChkaXIuZXhpc3RzKHBhdGgpKSB7CiAgICAgICAgc3RvcCgiVGhpcyBDQVMgcmVwb3NpdG9yeSBkb2VzIG5vdCBzdXBwb3J0IGRpcmVjdG9yeSBvdXRwdXRzLiIpCiAgICB9CiAgICBpZiAoIWZpbGUuZXhpc3RzKCJjYXMiKSkgewogICAgICAgIGRpci5jcmVhdGUoImNhcyIsIHJlY3Vyc2l2ZSA9IFRSVUUpCiAgICB9CiAgICBmaWxlLmNvcHkocGF0aCwgZmlsZS5wYXRoKCJjYXMiLCBrZXkpKQp9&download=ZnVuY3Rpb24gKGtleSwgcGF0aCkgCnsKICAgIGZpbGUuY29weShmaWxlLnBhdGgoImNhcyIsIGtleSksIHBhdGgpCn0&exists=ZnVuY3Rpb24gKGtleSkgCnsKICAgIGZpbGUuZXhpc3RzKGZpbGUucGF0aCgiY2FzIiwga2V5KSkKfQ&consistent=RkFMU0U  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: worker  #>   priority: 0  #>   resources: #>     repository_cas: <environment>  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     targets #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Target resources: URL storage formats — tar_resources_url","title":"Target resources: URL storage formats — tar_resources_url","text":"Create url argument tar_resources() specify optional settings URL storage formats. See format argument tar_target() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target resources: URL storage formats — tar_resources_url","text":"","code":"tar_resources_url(   handle = targets::tar_option_get(\"resources\")$url$handle,   max_tries = targets::tar_option_get(\"resources\")$url$max_tries,   seconds_interval = targets::tar_option_get(\"resources\")$url$seconds_interval,   seconds_timeout = targets::tar_option_get(\"resources\")$url$seconds_interval )"},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target resources: URL storage formats — tar_resources_url","text":"handle Object returned curl::new_handle NULL. Defaults NULL. max_tries Positive integer length 1, maximum number tries access URL. seconds_interval Nonnegative numeric length 1, number seconds wait individual retries attempting connect URL. Use tar_resources_network() instead. seconds_timeout Nonnegative numeric length 1, number seconds wait timing trying connect URL. Use tar_resources_network() instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target resources: URL storage formats — tar_resources_url","text":"Object class \"tar_resources_url\", supplied url argument tar_resources().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"Target resources: URL storage formats — tar_resources_url","text":"Functions tar_target() tar_option_set() takes optional resources argument supply non-default settings various optional backends data storage high-performance computing. tar_resources() function helper supply settings correct manner. targets version 0.12.2 , resources inherited one--one nested fashion tar_option_get(\"resources\"). example, suppose set tar_option_set(resources = tar_resources(aws = my_aws)), my_aws equals tar_resources_aws(bucket = \"x\", prefix = \"y\"). , tar_target(data, get_data() bucket \"x\" prefix \"y\". addition, new_resources equals tar_resources(aws = tar_resources_aws(bucket = \"z\"))), tar_target(data, get_data(), resources = new_resources) use new bucket \"z\", still use prefix \"y\" supplied tar_option_set(). (targets 0.12.1 , options like prefix carry tar_option_set() supply non-default resources tar_target().)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_resources_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target resources: URL storage formats — tar_resources_url","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN # Somewhere in you target script file (usually _targets.R): tar_target(   name,   command(),   format = \"url\",   resources = tar_resources(     url = tar_resources_url(handle = curl::new_handle())   ) ) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_runtime_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the tar_runtime object. — tar_runtime_object","title":"Get the tar_runtime object. — tar_runtime_object","text":"internal purposes . user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_runtime_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the tar_runtime object. — tar_runtime_object","text":"","code":"tar_runtime_object()"},{"path":"https://docs.ropensci.org/targets/reference/tar_runtime_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the tar_runtime object. — tar_runtime_object","text":"internal tar_runtime object class \"tar_runtime\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_runtime_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the tar_runtime object. — tar_runtime_object","text":"Manages internal settings targets need run.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_runtime_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the tar_runtime object. — tar_runtime_object","text":"","code":"tar_runtime_object() #> <environment: 0x56513c0015e8>"},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a target script file. — tar_script","title":"Write a target script file. — tar_script","text":"tar_script() function convenient way create required target script file (default: _targets.R) current working directory. always overwrites existing target script, requires working directory intend write file, careful. See \"Target script\" section details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a target script file. — tar_script","text":"","code":"tar_script(   code = NULL,   library_targets = TRUE,   ask = NULL,   script = targets::tar_config_get(\"script\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a target script file. — tar_script","text":"code R code write target script file. NULL, example target script file written instead. library_targets logical, whether write library(targets) line top target script file automatically (recommended). TRUE, need explicitly put library(targets) code. ask Logical, whether ask writing target script file already exists. NULL, defaults Sys.getenv(\"TAR_ASK\"). (Set \"true\" \"false\" Sys.setenv()). ask TAR_ASK environment variable indeterminate, defaults interactive(). script Character length 1, write target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a target script file. — tar_script","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":"target-script-file","dir":"Reference","previous_headings":"","what":"Target script file","title":"Write a target script file. — tar_script","text":"Every targets project requires target script file. target script file usually file called _targets.R Functions tar_make() friends look target script run set pipeline just prior main task. Every target script file run following steps order : Package: load targets package. step automatically inserted top target script file produced tar_script() library_targets TRUE, need explicitly include code. Globals: load custom functions global objects memory. Usually, section bunch calls source() run scripts defining user-defined functions. functions support R commands targets. Options: call tar_option_set() set defaults targets-specific settings names required packages. Even specific options set, still recommended call tar_option_set() order register proper environment. Targets: define one target objects using tar_target(). Pipeline: call list() bring targets (3) together pipeline object. Every target script file must return pipeline object, usually means ending call list(). practice, (3) (4) can combined together function call.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a target script file. — tar_script","text":"","code":"tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script() # Writes an example target script file. # Writes a user-defined target script: tar_script({   library(targets)   library(tarchetypes)   x <- tar_target(x, 1 + 1)   tar_option_set()   list(x) }, ask = FALSE) writeLines(readLines(\"_targets.R\")) }) #> library(targets) #> library(targets) #> library(tarchetypes) #> x <- tar_target(x, 1 + 1) #> tar_option_set() #> list(x)"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: get the seed of the current target. — tar_seed","title":"Deprecated: get the seed of the current target. — tar_seed","text":"Deprecated 2023-10-12 (version 1.3.2.9001). Use tar_seed_get() instead.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: get the seed of the current target. — tar_seed","text":"","code":"tar_seed(default = 1L)"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: get the seed of the current target. — tar_seed","text":"default Integer, value return tar_seed_get() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: get the seed of the current target. — tar_seed","text":"Integer length 1. invoked inside targets pipeline, return value seed target currently running, deterministic function target name. Otherwise, return value default.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: get the seed of the current target. — tar_seed","text":"","code":"tar_seed_get() #> [1] 1 tar_seed_get(default = 123L) #> [1] 123 if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(returns_seed, tar_seed_get()), ask = FALSE) tar_make() tar_read(returns_seed) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a seed for a target. — tar_seed_create","title":"Create a seed for a target. — tar_seed_create","text":"Create seed target.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a seed for a target. — tar_seed_create","text":"","code":"tar_seed_create(name, global_seed = NULL)"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a seed for a target. — tar_seed_create","text":"name Character length 1, target name. global_seed Integer length 1, overarching global pipeline seed governs seeds targets. Set NULL default tar_option_get(\"seed\"). Set NA disable seed setting targets make tar_seed_create() return NA_integer_.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a seed for a target. — tar_seed_create","text":"Integer length 1, target seed.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Create a seed for a target. — tar_seed_create","text":"target's random number generator seed deterministic function name global pipeline seed tar_option_get(\"seed\"). Consequently,   can retrieve seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. tar_workspace() automatically part recovering workspace.","code":"1. Each target runs with a reproducible seed so that    different runs of the same pipeline in the same computing    environment produce identical results. 2. No two targets in the same pipeline share the same seed.    Even dynamic branches have different names and thus different seeds."},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"rng-overlap","dir":"Reference","previous_headings":"","what":"RNG overlap","title":"Create a seed for a target. — tar_seed_create","text":"theory, risk pseudo-random number generator streams different targets overlap produce statistically correlated results. (discussion motivating problem, see Section 6: \"Random-number generation\" parallel package vignette: vignette(topic = \"parallel\", package = \"parallel\").) However, risk extremely small practice, shown L'Ecuyer et al. (2017) doi:10.1016/j.matcom.2016.05.005  \"single RNG 'random' seed stream\" (Section 4: \"produce parallel streams substreams\"). targets tarchetypes take approach discussed aforementioned section paper using secretbase package Charlie Gao (2024) doi:10.5281/zenodo.10553140 . generate 32-bit integer seed argument set.seed() target, secretbase generates cryptographic hash using SHAKE256 extendable output function (XOF). secretbase uses algorithms Mbed TLS C library.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a seed for a target. — tar_seed_create","text":"Gao C (2024). secretbase: Cryptographic Hash Extendable-Output Functions. R package version 0.1.0, doi:10.5281/zenodo.10553140 . Pierre L'Ecuyer, David Munger, Boris Oreshkin, Richard Simard (2017). Random numbers parallel computers: Requirements methods, emphasis GPUs. Mathematics Computers Simulation, 135, 3-17. doi:10.1016/j.matcom.2016.05.005 .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the random number generator seed of the target currently running. — tar_seed_get","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"Get random number generator seed target currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"","code":"tar_seed_get(default = 1L)"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"default Integer, value return tar_seed_get() called outside targets pipeline. default lets users run things without tar_make(), helps peel back layers code troubleshoot bugs.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"Integer length 1. invoked inside targets pipeline, return value seed target currently running, deterministic function target name. Otherwise, return value default.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"target's random number generator seed deterministic function name global pipeline seed tar_option_get(\"seed\"). Consequently,   can retrieve seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. tar_workspace() automatically part recovering workspace.","code":"1. Each target runs with a reproducible seed so that    different runs of the same pipeline in the same computing    environment produce identical results. 2. No two targets in the same pipeline share the same seed.    Even dynamic branches have different names and thus different seeds."},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"rng-overlap","dir":"Reference","previous_headings":"","what":"RNG overlap","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"theory, risk pseudo-random number generator streams different targets overlap produce statistically correlated results. (discussion motivating problem, see Section 6: \"Random-number generation\" parallel package vignette: vignette(topic = \"parallel\", package = \"parallel\").) However, risk extremely small practice, shown L'Ecuyer et al. (2017) doi:10.1016/j.matcom.2016.05.005  \"single RNG 'random' seed stream\" (Section 4: \"produce parallel streams substreams\"). targets tarchetypes take approach discussed aforementioned section paper using secretbase package Charlie Gao (2024) doi:10.5281/zenodo.10553140 . generate 32-bit integer seed argument set.seed() target, secretbase generates cryptographic hash using SHAKE256 extendable output function (XOF). secretbase uses algorithms Mbed TLS C library.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"Gao C (2024). secretbase: Cryptographic Hash Extendable-Output Functions. R package version 0.1.0, doi:10.5281/zenodo.10553140 . Pierre L'Ecuyer, David Munger, Boris Oreshkin, Richard Simard (2017). Random numbers parallel computers: Requirements methods, emphasis GPUs. Mathematics Computers Simulation, 135, 3-17. doi:10.1016/j.matcom.2016.05.005 .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the random number generator seed of the target currently running. — tar_seed_get","text":"","code":"tar_seed_get() #> [1] 1 tar_seed_get(default = 123L) #> [1] 123 if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(returns_seed, tar_seed_get()), ask = FALSE) tar_make() tar_read(returns_seed) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a seed to run a target. — tar_seed_set","title":"Set a seed to run a target. — tar_seed_set","text":"targets generates target-specific seeds using tar_seed_create(). Use tar_seed_set() set one seeds R.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a seed to run a target. — tar_seed_set","text":"","code":"tar_seed_set(seed)"},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a seed to run a target. — tar_seed_set","text":"seed Integer length 1, value seed set set.seed().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a seed to run a target. — tar_seed_set","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a seed to run a target. — tar_seed_set","text":"tar_seed_set() gives user-supplied seed set.seed() sets arguments kind = \"default\", normal.kind = \"default\", sample.kind = \"default\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Set a seed to run a target. — tar_seed_set","text":"target's random number generator seed deterministic function name global pipeline seed tar_option_get(\"seed\"). Consequently,   can retrieve seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. tar_workspace() automatically part recovering workspace.","code":"1. Each target runs with a reproducible seed so that    different runs of the same pipeline in the same computing    environment produce identical results. 2. No two targets in the same pipeline share the same seed.    Even dynamic branches have different names and thus different seeds."},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"rng-overlap","dir":"Reference","previous_headings":"","what":"RNG overlap","title":"Set a seed to run a target. — tar_seed_set","text":"theory, risk pseudo-random number generator streams different targets overlap produce statistically correlated results. (discussion motivating problem, see Section 6: \"Random-number generation\" parallel package vignette: vignette(topic = \"parallel\", package = \"parallel\").) However, risk extremely small practice, shown L'Ecuyer et al. (2017) doi:10.1016/j.matcom.2016.05.005  \"single RNG 'random' seed stream\" (Section 4: \"produce parallel streams substreams\"). targets tarchetypes take approach discussed aforementioned section paper using secretbase package Charlie Gao (2024) doi:10.5281/zenodo.10553140 . generate 32-bit integer seed argument set.seed() target, secretbase generates cryptographic hash using SHAKE256 extendable output function (XOF). secretbase uses algorithms Mbed TLS C library.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set a seed to run a target. — tar_seed_set","text":"Gao C (2024). secretbase: Cryptographic Hash Extendable-Output Functions. R package version 0.1.0, doi:10.5281/zenodo.10553140 . Pierre L'Ecuyer, David Munger, Boris Oreshkin, Richard Simard (2017). Random numbers parallel computers: Requirements methods, emphasis GPUs. Mathematics Computers Simulation, 135, 3-17. doi:10.1016/j.matcom.2016.05.005 .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_seed_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a seed to run a target. — tar_seed_set","text":"","code":"seed <- tar_seed_create(\"target_name\") seed #> [1] -1200009501 sample(10) #>  [1]  4  3  6  2  7 10  5  8  9  1 tar_seed_set(seed) sample(10) #>  [1]  4  7  5  1  9  2 10  3  6  8 tar_seed_set(seed) sample(10) #>  [1]  4  7  5  1  9  2 10  3  6  8"},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the cue-by-cue status of each target. — tar_sitrep","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"target, report cues activated. Except never cue, target rerun tar_make() cue activated. target suppressed never cue TRUE. See tar_cue() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"","code":"tar_sitrep(   names = NULL,   fields = NULL,   shortcut = targets::tar_config_get(\"shortcut\"),   reporter = targets::tar_config_get(\"reporter_outdated\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function, reporter),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"names Optional, names targets. supplied, tar_sitrep() returns metadata targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. fields Optional, names columns/fields select. supplied, tar_sitrep() returns selected metadata columns. can supply symbols tidyselect helpers like any_of() starts_with(). name column always included first matter select. Choices: name: name target global object. record: Whether record cue activated: TRUE target metadata (tar_meta()), target errored last tar_make(), class target changed. always: Whether mode tar_cue() \"always\". TRUE, tar_make() always runs target. never: Whether mode tar_cue() \"never\". TRUE, tar_make() run record cue activates. command: Whether target's command changed since last time. Always TRUE record cue activated. Otherwise, always FALSE command cue suppressed. depend: Whether data/output least one target's dependencies changed since last time. Dependencies targets, functions, global objects directly upstream. Call tar_outdated(targets_only = FALSE) tar_visnetwork(targets_only = FALSE) see exactly dependencies outdated. Always NA record cue activated. Otherwise, always FALSE depend cue suppressed. format: Whether storage format target different last time. Always NA record cue activated. Otherwise, always FALSE format cue suppressed. repository: Whether storage repository target different last time. Always NA record cue activated. Otherwise, always FALSE format cue suppressed. iteration: Whether iteration mode target different last time. Always NA record cue activated. Otherwise, always FALSE iteration cue suppressed. file: Whether file(s) target's return value missing different last time. Always NA record cue activated. Otherwise, always FALSE file cue suppressed. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Use caution. shortcut = TRUE works set names. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"data frame one row per target/object one column per cue. element logical indicate whether cue activated target. See field argument help file details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"Caveats: tar_cue() allows change/suppress cues, return value depend settings supply tar_cue(). pattern tries branches target exist storage, branches omitted output. tar_sitrep() myopic. considers happens immediate target immediate upstream dependencies, makes attempt propagate invalidation downstream.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_sitrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the cue-by-cue status of each target. — tar_sitrep","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_sitrep() tar_meta(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_skipped.html","id":null,"dir":"Reference","previous_headings":"","what":"List skipped targets. — tar_skipped","title":"List skipped targets. — tar_skipped","text":"List targets whose progress \"skipped\".","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_skipped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List skipped targets. — tar_skipped","text":"","code":"tar_skipped(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_skipped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List skipped targets. — tar_skipped","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_skipped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List skipped targets. — tar_skipped","text":"character vector skipped targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_skipped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List skipped targets. — tar_skipped","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_skipped() tar_skipped(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R scripts. — tar_source","title":"Run R scripts. — tar_source","text":"Run R scripts directory environment specified.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R scripts. — tar_source","text":"","code":"tar_source(   files = \"R\",   envir = targets::tar_option_get(\"envir\"),   change_directory = FALSE )"},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run R scripts. — tar_source","text":"files Character vector file directory paths look R scripts run. Paths must either absolute paths must relative current working directory just function call. envir Environment run scripts. Defaults tar_option_get(\"envir\"), environment pipeline. change_directory Logical, whether temporarily change working directory directory R script running .","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run R scripts. — tar_source","text":"NULL (invisibly)","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run R scripts. — tar_source","text":"tar_source() convenient way load R scripts _targets.R make custom functions available pipeline. tar_source() recursively looks files ending .R .r, runs eval(parse(text = readLines(script_file, warn = FALSE)), envir).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"Run R scripts. — tar_source","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R scripts. — tar_source","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. # Running in tar_dir(), these files are written in tempdir(). dir.create(\"R\") writeLines(\"f <- function(x) x + 1\", file.path(\"R\", \"functions.R\")) tar_script({   tar_source()   list(tar_target(x, f(1))) }) tar_make() tar_read(x) # 2 }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_started.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: list started targets. — tar_started","title":"Deprecated: list started targets. — tar_started","text":"Deprecated favor tar_dispatched() 2023-12-04 (version 1.3.2.9004).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_started.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: list started targets. — tar_started","text":"","code":"tar_started(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_started.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: list started targets. — tar_started","text":"names Optional, names targets. supplied, output restricted selected targets. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_started.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: list started targets. — tar_started","text":"character vector dispatched targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_started.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: list started targets. — tar_started","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   list(     tar_target(x, seq_len(2)),     tar_target(y, 2 * x, pattern = map(x))   ) }, ask = FALSE) tar_make() tar_dispatched() tar_dispatched(starts_with(\"y_\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: current data store path — tar_store","title":"Deprecated: current data store path — tar_store","text":"Deprecated: identify file path data store pipeline currently running.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: current data store path — tar_store","text":"","code":"tar_store()"},{"path":"https://docs.ropensci.org/targets/reference/tar_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: current data store path — tar_store","text":"Character, file path data store pipeline currently running. called outside pipeline currently running, tar_store() returns tar_config_get(\"store\").","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_store.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated: current data store path — tar_store","text":"tar_store() deprecated 2022-10-11 (version 0.13.5.9000). Use tar_path_store() instead.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: current data store path — tar_store","text":"","code":"tar_path_store() #> [1] \"_targets\" if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(tar_target(x, tar_path_store()), ask = FALSE) store <- tempfile() tar_make(store = store) tar_read(x, store = store) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a target. — tar_target","title":"Declare a target. — tar_target","text":"target single step computation pipeline. runs R command returns value. value gets treated R object can used commands targets downstream. Targets already date skipped. See user manual details. tar_target() defines target using non-standard evaluation. name argument unevaluated symbol, command pattern arguments unevaluated expressions. Example: tar_target(name = data, command = get_data()). tar_target_raw() defines target standard evaluation. name argument character string, command pattern arguments evaluated expressions. Example: tar_target_raw(name = \"data\", command = quote(get_data())). tar_target_raw() also extra arguments deps string advanced customization.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a target. — tar_target","text":"","code":"tar_target(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = isTRUE(targets::tar_option_get(\"garbage_collection\")),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_target_raw(   name,   command,   pattern = NULL,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   deps = NULL,   string = NULL,   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = isTRUE(targets::tar_option_get(\"garbage_collection\")),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a target. — tar_target","text":"name Symbol, name target. tar_target(), name unevaluated symbol, e.g. tar_target(name = data). tar_target_raw(), name character string, e.g. tar_target_raw(name = \"data\"). target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. tar_target(), command unevaluated expression, e.g. tar_target(command = data). tar_target_raw(), command evaluated expression, e.g. tar_target_raw(command = quote(data)). pattern Code define dynamic branching branching target. tar_target(), pattern unevaluated expression, e.g. tar_target(pattern = map(data)). tar_target_raw(), command evaluated expression, e.g. tar_target_raw(pattern = quote(map(data))). demonstrate dynamic branching patterns, suppose pipeline numeric vector targets x y. , tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. character string tar_repository_cas() content-addressable storage. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. \"abridge\": currently running targets keep running, new targets launch . \"trim\": currently running targets stay running. queued target allowed start : downstream error, sibling branch tar_target() call (error happened dynamic branch). idea avoid starting new work immediate error impacts. error = \"trim\" just like error = \"abridge\", allows potentially healthy regions dependency graph begin running. (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical: TRUE run base::gc() just target runs, FALSE omit garbage collection. case high-performance computing, gc() runs locally parallel worker. garbage collection skipped actual target skipped pipeline. Non-logical values garbage_collection converted TRUE FALSE using isTRUE(). words, non-logical values converted FALSE. example, garbage_collection = 2 equivalent garbage_collection = FALSE. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". deps Optional character vector adjacent upstream dependencies target, including targets global objects. NULL, dependencies resolved automatically usual. deps argument developers extension packages tarchetypes, end users, almost never used . scenarios first appear requires deps, almost always simpler robust workaround avoids setting deps. string Optional string representation command. Internally, string gets hashed check command changed since last run, helps targets decide whether target date. External interfaces can take control string ignore changes certain parts command. NULL, strings just deparsed command (default).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a target. — tar_target","text":"target object. Users modify directly, just feed list() target script file (default: _targets.R).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Declare a target. — tar_target","text":"Functions like tar_target() produce target objects, special objects specialized sets S3 classes. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"storage-formats","dir":"Reference","previous_headings":"","what":"Storage formats","title":"Declare a target. — tar_target","text":"targets several built-storage formats control return values saved loaded disk: \"rds\": Default, uses saveRDS() readRDS(). work objects, slow. \"auto\": either \"file\" \"qs\", depending return value target. return value character vector existing files (/directories), format becomes \"file\" tar_make() saves target. Otherwise, format becomes \"qs\". \"qs\": Uses qs::qsave() qs::qread(). work objects, much faster \"rds\". Optionally set preset qsave() tar_resources() tar_resources_qs(). \"feather\": Uses arrow::write_feather() arrow::read_feather() (version 2.0). Much faster \"rds\", value must data frame. Optionally set compression compression_level arrow::write_feather() tar_resources() tar_resources_feather(). Requires arrow package (installed default). \"parquet\": Uses arrow::write_parquet() arrow::read_parquet() (version 2.0). Much faster \"rds\", value must data frame. Optionally set compression compression_level arrow::write_parquet() tar_resources() tar_resources_parquet(). Requires arrow package (installed default). \"fst\": Uses fst::write_fst() fst::read_fst(). Much faster \"rds\", value must data frame. Optionally set compression level fst::write_fst() tar_resources() tar_resources_fst(). Requires fst package (installed default). \"fst_dt\": \"fst\", value data.table. Deep copies made appropriate order protect global effects -place modification. Optionally set compression level way \"fst\". \"fst_tbl\": \"fst\", value tibble. Optionally set compression level way \"fst\". \"keras\": superseded tar_format() incompatible error = \"null\" (tar_target() tar_option_set()). Uses keras::save_model_hdf5() keras::load_model_hdf5(). value must Keras model. Requires keras package (installed default). \"torch\": superseded tar_format() incompatible error = \"null\" (tar_target() tar_option_set()). Uses torch::torch_save() torch::torch_load(). value must object torch package tensor neural network module. Requires torch package (installed default). \"file\": dynamic file. use format, target needs manually identify save data return character vector paths data (must single file path repository \"local\"). (paths must existing files nonempty directories.) , targets automatically checks files cues appropriate run/skip decisions files date. paths must point files directories, must contain characters | *. files directories return must actually exist, else targets throw error. (storage \"worker\", targets first stall trying wait file arrive network file system.) target create files, return value character(0). repository \"local\" format \"file\", character vector returned target must length 1 point single file. (Directories vectors multiple file paths supported dynamic files cloud.) output file uploaded cloud tracked changes exists cloud. local file deleted target runs. \"url\": dynamic input URL. storage format, repository implicitly \"local\", URL format like format = \"file\" except return value target URL already exists serves input data downstream targets. Optionally supply custom curl handle tar_resources() tar_resources_url(). new_handle(), nobody = TRUE important ensures targets just downloads metadata instead entire data file checks time stamps hashes. data file URL needs ETag Last-Modified time stamp, else target throw error track data. Also, use extreme caution trying use format = \"url\" track uploads. must absolutely certain ETag Last-Modified time stamp fully updated available time target's command finishes running. targets makes attempt wait web server. custom format can supplied tar_format(). choice, user's responsibility provide methods (un)serialization (un)marshaling return value target. formats starting \"aws_\" deprecated 2022-03-13 (targets version > 0.10.0). cloud storage integration, use repository argument instead. Formats \"rds\", \"file\", \"url\" general-purpose formats belong targets package . Going forward, additional formats implemented tar_format() third-party packages like tarchetypes geotargets (example: tarchetypes::tar_format_nanoparquet()). Formats \"qs\", \"fst\", etc. legacy formats existence tar_format(), continue remain targets without deprecation.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a target. — tar_target","text":"","code":"# Defining targets does not run them. data <- tar_target(target_name, get_data(), packages = \"tidyverse\") analysis <- tar_target(analysis, analyze(x), pattern = map(x)) # In a pipeline: if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(     tar_target(name = x, command = 1 + 1),     tar_target_raw(name = \"y\", command = quote(x + y))   ) }) tar_make() tar_read(x) }) # Tidy evaluation tar_option_set(envir = environment()) n_rows <- 30L data <- tar_target(target_name, get_data(!!n_rows)) print(data) # Disable tidy evaluation: data <- tar_target(target_name, get_data(!!n_rows), tidy_eval = FALSE) print(data) tar_option_reset() }"},{"path":"https://docs.ropensci.org/targets/reference/tar_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test code in a temporary directory. — tar_test","title":"Test code in a temporary directory. — tar_test","text":"Runs test_that() unit test inside temporary directory avoid writing user's file space. helps ensure compliance CRAN policies. Also isolates tar_option_set() options environment variables specific targets skips test Solaris. Useful writing tests targetopia packages (extensions targets tailored specific use cases).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test code in a temporary directory. — tar_test","text":"","code":"tar_test(label, code)"},{"path":"https://docs.ropensci.org/targets/reference/tar_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test code in a temporary directory. — tar_test","text":"label Character length 1, label test. code User-defined code test.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test code in a temporary directory. — tar_test","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test code in a temporary directory. — tar_test","text":"","code":"tar_test(\"example test\", {   testing_variable_cafecfcb <- \"only defined inside tar_test()\"   file.create(\"only_exists_in_tar_test\") }) #> ── Skip: example test ────────────────────────────────────────────────────────── #> Reason: empty test #>  exists(\"testing_variable_cafecfcb\") #> [1] FALSE file.exists(\"only_exists_in_tar_test\") #> [1] FALSE"},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the timestamp(s) of a target. — tar_timestamp","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"Get timestamp associated target's last successful run. tar_timestamp() expects name argument unevaluated symbol, whereas tar_timestamp_raw() expects name character string.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"","code":"tar_timestamp(   name = NULL,   format = NULL,   tz = NULL,   parse = NULL,   store = targets::tar_config_get(\"store\") )  tar_timestamp_raw(   name = NULL,   format = NULL,   tz = NULL,   parse = NULL,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"name Name target. NULL (default) tar_timestamp() attempt return timestamp target currently running. Must called inside target's command supporting function order work. tar_timestamp() expects name argument unevaluated symbol, whereas tar_timestamp_raw() expects name character string. format Deprecated targets version 0.6.0 (2021-07-21). tz Deprecated targets version 0.6.0 (2021-07-21). parse Deprecated targets version 0.6.0 (2021-07-21). store Character string, directory path data store pipeline.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"target recorded metadata parsed correctly, tar_timestamp() returns POSIXct object 1970-01-01 UTC.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"tar_timestamp() checks metadata _targets/meta/meta, actual returned data target. timestamp depends storage format target. storage local, e.g. formats like \"rds\" \"file\", time stamp latest modification time target data files time target last successfully ran. non-local storage repository = \"aws\" format = \"url\", targets chooses instead simply record time target last successfully ran.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the timestamp(s) of a target. — tar_timestamp","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   list(tar_target(x, 1)) }, ask = FALSE) tar_make() # Get the timestamp. tar_timestamp(x) # We can use the timestamp to cancel the target # if it already ran within the last hour. # Be sure to set `cue = tar_cue(mode = \"always\")` # if you want the target to always check the timestamp. tar_script({   list(   tar_target(     x,     tar_cancel((Sys.time() - tar_timestamp()) < 3600),     cue = tar_cue(mode = \"always\")   ) )}, ask = FALSE) tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose code to run based on Target Markdown mode. — tar_toggle","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"Run one piece code Target Markdown mode interactive mode turned another piece code otherwise.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"","code":"tar_toggle(interactive, noninteractive)"},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"interactive R code run Target Markdown interactive mode activated. noninteractive R code run Target Markdown interactive mode activated.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"Target Markdown interactive mode turned , function returns result running code. Otherwise, function invisibly returns NULL.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"Visit <books.ropensci.org/targets/literate-programming.html> learn Target Markdown interactive mode.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_toggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose code to run based on Target Markdown mode. — tar_toggle","text":"","code":"tar_toggle(   message(\"In interactive mode.\"),   message(\"Not in interactive mode.\") ) #> Not in interactive mode."},{"path":"https://docs.ropensci.org/targets/reference/tar_traceback.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a target's traceback — tar_traceback","title":"Get a target's traceback — tar_traceback","text":"Return saved traceback target. Assumes target errored previous run pipeline workspaces enabled target. See tar_workspace() details.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_traceback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a target's traceback — tar_traceback","text":"","code":"tar_traceback(   name,   envir = NULL,   packages = NULL,   source = NULL,   characters = NULL,   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_traceback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a target's traceback — tar_traceback","text":"name Symbol, name target whose workspace read. envir Deprecated targets > 0.3.1 (2021-03-28). packages Logical, whether load required packages target. source Logical, whether run target script file (default: _targets.R) load user-defined global object dependencies envir. TRUE, envir either global environment inherit global environment. characters Deprecated targets 1.4.0 (2023-12-06). store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_traceback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a target's traceback — tar_traceback","text":"Character vector, traceback failed target exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_traceback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a target's traceback — tar_traceback","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tmp <- sample(1) tar_script({   library(targets)   library(tarchetypes)   tar_option_set(workspace_on_error = TRUE)   list(     tar_target(x, \"loaded\"),     tar_target(y, stop(x))   ) }, ask = FALSE) try(tar_make()) tar_traceback(y, characters = 60) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove target script helper files. — tar_unscript","title":"Remove target script helper files. — tar_unscript","text":"Remove target script helper files (default: _targets_r/) created Target Markdown.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove target script helper files. — tar_unscript","text":"","code":"tar_unscript(script = targets::tar_config_get(\"script\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove target script helper files. — tar_unscript","text":"script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove target script helper files. — tar_unscript","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove target script helper files. — tar_unscript","text":"Target Markdown code chunks create R scripts folder called _targets_r/ order aid automatically supplied _targets.R file. time, number script files starts build , targets way automatically removing helper script files longer necessary. keep pipeline date code chunks Target Markdown document(s), good practice call tar_unscript() beginning first Target Markdown document. way, extraneous/discarded targets automatically removed pipeline document starts render. target script alternative path, e.g. custom/script.R, helper scripts custom/script_r/. tar_unscript() works helper scripts long project configuration settings correctly identify correct target script.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unscript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove target script helper files. — tar_unscript","text":"","code":"tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_unscript() })"},{"path":"https://docs.ropensci.org/targets/reference/tar_unversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete cloud object version IDs from local metadata. — tar_unversion","title":"Delete cloud object version IDs from local metadata. — tar_unversion","text":"Delete version IDs local metadata.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete cloud object version IDs from local metadata. — tar_unversion","text":"","code":"tar_unversion(   names = tidyselect::everything(),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_unversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete cloud object version IDs from local metadata. — tar_unversion","text":"names Tidyselect expression identify targets drop version IDs. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete cloud object version IDs from local metadata. — tar_unversion","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_unversion.html","id":"cloud-target-data-versioning","dir":"Reference","previous_headings":"","what":"Cloud target data versioning","title":"Delete cloud object version IDs from local metadata. — tar_unversion","text":"buckets Amazon S3 Google Cloud Storage \"versioned\", means track historical versions data object. use targets cloud storage (https://books.ropensci.org/targets/cloud-storage.html) versioning turned , targets record version target metadata. Functions like tar_read() tar_load() load version recorded local metadata, may \"current\" version object bucket. Likewise, functions tar_delete() tar_destroy() remove version ID target recorded local metadata. want interact latest version object instead version ID recorded local metadata, need delete object metadata. Make sure local copy metadata current date. may need run tar_meta_download() tar_meta_sync() first. Run tar_unversion() remove recorded version IDs targets local metadata. version IDs gone local metadata, functions like tar_read() tar_destroy() use latest version target data object. Optional: back local metadata file version IDs deleted, use tar_meta_upload().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a pipeline of targets. — tar_validate","title":"Validate a pipeline of targets. — tar_validate","text":"Inspect pipeline issues throw error warning problem detected.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a pipeline of targets. — tar_validate","text":"","code":"tar_validate(   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a pipeline of targets. — tar_validate","text":"callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a pipeline of targets. — tar_validate","text":"NULL except callr_function = callr::r_bg(), case handle callr background process returned. Either way, value invisibly returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a pipeline of targets. — tar_validate","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script(list(tar_target(x, 1 + 1)), ask = FALSE) tar_validate() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"visNetwork dependency graph. — tar_visnetwork","title":"visNetwork dependency graph. — tar_visnetwork","text":"Visualize pipeline dependency graph visNetwork HTML widget.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"visNetwork dependency graph. — tar_visnetwork","text":"","code":"tar_visnetwork(   targets_only = FALSE,   names = NULL,   shortcut = FALSE,   allow = NULL,   exclude = \".Random.seed\",   outdated = TRUE,   label = targets::tar_config_get(\"label\"),   label_width = targets::tar_config_get(\"label_width\"),   level_separation = targets::tar_config_get(\"level_separation\"),   degree_from = 1L,   degree_to = 1L,   zoom_speed = 1,   physics = FALSE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   seconds_reporter = targets::tar_config_get(\"seconds_reporter\"),   callr_function = callr::r,   callr_arguments = targets::tar_callr_args_default(callr_function),   envir = parent.frame(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"visNetwork dependency graph. — tar_visnetwork","text":"targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. names Names targets. graph visualization operate targets (unless shortcut TRUE, targets upstream well). Selecting small subgraph using names speed load time visualization. Unlike allow, names invoked graph generated. Set NULL check/run targets (default). Otherwise, object supplied names tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. shortcut Logical length 1, interpret names argument. shortcut FALSE (default) function checks targets upstream names far back dependency graph goes. TRUE, function checks targets names uses stored metadata information upstream dependencies needed. shortcut = TRUE increases speed lot --date targets, assumes dependencies date, please use caution. Also, shortcut = TRUE works set names. allow Optional, define set allowable vertices graph. Unlike names, allow invoked graph mostly resolved, speed execution. Set NULL allow vertices pipeline environment (default). Otherwise, can supply symbols tidyselect helpers like starts_with(). exclude Optional, define set exclude vertices graph. Unlike names, exclude invoked graph mostly resolved, speed execution. Set NULL exclude vertices. Otherwise, can supply symbols tidyselect helpers like any_of() starts_with(). outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. label Character vector one aesthetics add vertex labels. Can contain \"description\" show target's custom description, \"time\" show total runtime, \"size\" show total storage size, \"branches\" show number branches pattern. can choose multiple aesthetics , e.g. label = c(\"description\", \"time\"). description enabled default. label_width Positive numeric length 1, maximum width (number characters) node labels. level_separation Numeric length 1, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider changing value aspect ratio graph far 1. level_separation NULL, levelSeparation argument visHierarchicalLayout() defaults 150. degree_from Integer length 1. click node, graph highlights neighborhood node. degree_from controls number edges neighborhood extends upstream. degree_to Integer length 1. click node, graph highlights neighborhood node. degree_to controls number edges neighborhood extends downstream. zoom_speed Positive numeric length 1, scaling factor zoom speed. 1 zooms faster default, 1 zooms lower default. physics Logical length 1, whether implement interactive physics graph, e.g. edge elasticity. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. seconds_reporter Positive numeric length 1 minimum number seconds times reporter prints progress messages R console. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"visNetwork dependency graph. — tar_visnetwork","text":"visNetwork HTML widget object.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"dependency-graph","dir":"Reference","previous_headings":"","what":"Dependency graph","title":"visNetwork dependency graph. — tar_visnetwork","text":"dependency graph pipeline directed acyclic graph (DAG) node indicates target global object directed edge indicates downstream node depends upstream node. DAG always tree, never contains cycle target allowed directly indirectly depend . dependency graph show natural progression work left right. targets uses static code analysis create graph, order tar_target() calls _targets.R file matter. However, targets support self-referential loops cycles. information dependency graph, please read https://books.ropensci.org/targets/targets.html#dependencies.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"storage-access","dir":"Reference","previous_headings":"","what":"Storage access","title":"visNetwork dependency graph. — tar_visnetwork","text":"Several functions like tar_make(), tar_read(), tar_load(), tar_meta(), tar_progress() read modify local data store pipeline. local data store flux pipeline running, depending distributed computing cloud computing set , targets can even reach . please call functions inside target part running pipeline. exception literate programming target factories tarchetypes package tar_render() tar_quarto().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"visNetwork dependency graph. — tar_visnetwork","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set()   list(     tar_target(y1, 1 + 1),     tar_target(y2, 1 + 1),     tar_target(z, y1 + y2, description = \"sum of two other sums\")   ) }) tar_visnetwork() tar_visnetwork(allow = starts_with(\"y\")) # see also any_of() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny app to watch the dependency graph. — tar_watch","title":"Shiny app to watch the dependency graph. — tar_watch","text":"Launches background process Shiny app calls tar_visnetwork() every seconds. embed app apps, use Shiny module tar_watch_ui() tar_watch_server().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny app to watch the dependency graph. — tar_watch","text":"","code":"tar_watch(   seconds = 10,   seconds_min = 1,   seconds_max = 60,   seconds_step = 1,   targets_only = FALSE,   exclude = \".Random.seed\",   outdated = FALSE,   label = NULL,   level_separation = 150,   degree_from = 1L,   degree_to = 1L,   config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"),   project = Sys.getenv(\"TAR_PROJECT\", \"main\"),   height = \"650px\",   display = \"summary\",   displays = c(\"summary\", \"branches\", \"progress\", \"graph\", \"about\"),   background = TRUE,   browse = TRUE,   host = getOption(\"shiny.host\", \"127.0.0.1\"),   port = getOption(\"shiny.port\", targets::tar_random_port()),   verbose = TRUE,   supervise = TRUE,   poll_connection = TRUE,   stdout = \"|\",   stderr = \"|\",   title = \"\",   theme = bslib::bs_theme(),   spinner = TRUE )"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny app to watch the dependency graph. — tar_watch","text":"seconds Numeric length 1, default number seconds refreshes graph. Can changed app controls. seconds_min Numeric length 1, lower bound seconds app controls. seconds_max Numeric length 1, upper bound seconds app controls. seconds_step Numeric length 1, step size seconds app controls. targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. exclude Character vector nodes omit graph. outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. label Label argument tar_visnetwork(). level_separation Numeric length 1, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider changing value aspect ratio graph far 1. level_separation NULL, levelSeparation argument visHierarchicalLayout() defaults 150. degree_from Integer length 1. click node, graph highlights neighborhood node. degree_from controls number edges neighborhood extends upstream. degree_to Integer length 1. click node, graph highlights neighborhood node. degree_to controls number edges neighborhood extends downstream. config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). project Character length 1, name current targets project. Thanks config R package, targets YAML configuration files can store multiple sets configuration settings, set corresponding project. project argument allows set get configuration setting specific project given call tar_config_set() tar_config_get(). default project always called \"main\" unless set another default project using TAR_PROJECT environment variable, e.g. Sys.setenv(tar_project = \"custom\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). height Character length 1, height visNetwork widget branches table. display Character length 1, display show first. displays Character vector choices display. Elements can \"graph\", \"summary\", \"branches\", \"\". background Logical, whether run app background process can still use R console app running. browse Whether open app browser app ready. relevant background TRUE. host Character length 1, IPv4 address listen . relevant background TRUE. port Positive integer length 1, TCP port listen . relevant background TRUE. verbose whether print spinner informative messages. relevant background TRUE. supervise Whether register process supervisor. TRUE, supervisor ensure process killed R process exits. poll_connection Whether control connection process. used transmit messages subprocess main process. stdout name file standard output child R process written . child process runs --slave option (default), commands echoed shown standard output. Also note need call print() explicitly show output command(s). NULL (default), standard output returned, recorded included error object error happens. stderr name file standard error child R process written . particular message() sends output standard error. nothing sent standard error, file empty. argument can file stdout, case correctly interleaved. string \"2>&1\", standard error redirected standard output. NULL (default), standard output returned, recorded included error object error happens. title Character length 1, title UI. theme call bslib::bs_theme() bslib theme. spinner TRUE add busy spinner, FALSE omit.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny app to watch the dependency graph. — tar_watch","text":"handle callr::r_bg() background process running app.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny app to watch the dependency graph. — tar_watch","text":"controls app left panel. seconds control number seconds refreshes graph, settings match arguments tar_visnetwork().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_watch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny app to watch the dependency graph. — tar_watch","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   sleep_run <- function(...) {     Sys.sleep(10)   }   list(     tar_target(settings, sleep_run()),     tar_target(data1, sleep_run(settings)),     tar_target(data2, sleep_run(settings))   ) }, ask = FALSE) # Launch the app in a background process. tar_watch(seconds = 10, outdated = FALSE, targets_only = TRUE) # Run the pipeline. tar_make() }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_app_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the full tar_watch() app UI. — tar_watch_app_ui","title":"Create the full tar_watch() app UI. — tar_watch_app_ui","text":"exported infrastructure purposes. user-side function. Users instead call tar_watch() directly.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_app_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the full tar_watch() app UI. — tar_watch_app_ui","text":"","code":"tar_watch_app_ui(   seconds,   seconds_min,   seconds_max,   seconds_step,   targets_only,   outdated,   label,   level_separation,   degree_from,   degree_to,   height,   display,   displays,   title,   theme,   spinner )"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_app_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the full tar_watch() app UI. — tar_watch_app_ui","text":"seconds Numeric length 1, default number seconds refreshes graph. Can changed app controls. seconds_min Numeric length 1, lower bound seconds app controls. seconds_max Numeric length 1, upper bound seconds app controls. seconds_step Numeric length 1, step size seconds app controls. targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. label Label argument tar_visnetwork(). level_separation Numeric length 1, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider changing value aspect ratio graph far 1. level_separation NULL, levelSeparation argument visHierarchicalLayout() defaults 150. degree_from Integer length 1. click node, graph highlights neighborhood node. degree_from controls number edges neighborhood extends upstream. degree_to Integer length 1. click node, graph highlights neighborhood node. degree_to controls number edges neighborhood extends downstream. height Character length 1, height visNetwork widget branches table. display Character length 1, display show first. displays Character vector choices display. Elements can \"graph\", \"summary\", \"branches\", \"\". title Character length 1, title UI. theme call bslib::bs_theme() bslib theme. spinner TRUE add busy spinner, FALSE omit.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_app_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the full tar_watch() app UI. — tar_watch_app_ui","text":"Shiny UI.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny module server for tar_watch() — tar_watch_server","title":"Shiny module server for tar_watch() — tar_watch_server","text":"Use tar_watch_ui() tar_watch_server() include tar_watch() Shiny module app.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny module server for tar_watch() — tar_watch_server","text":"","code":"tar_watch_server(   id,   height = \"650px\",   exclude = \".Random.seed\",   config = Sys.getenv(\"TAR_CONFIG\", \"_targets.yaml\"),   project = Sys.getenv(\"TAR_PROJECT\", \"main\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny module server for tar_watch() — tar_watch_server","text":"id Character length 1, ID corresponding UI function module. height Character length 1, height visNetwork widget branches table. exclude Character vector nodes omit graph. config Character length 1, file path YAML configuration file targets project settings. config argument specifies YAML configuration file tar_config_get() reads tar_config_set() writes single function call. globally change configuration file used subsequent function calls. default file path YAML file always _targets.yaml unless set another default path using TAR_CONFIG environment variable, e.g. Sys.setenv(TAR_CONFIG = \"custom.yaml\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get(). project Character length 1, name current targets project. Thanks config R package, targets YAML configuration files can store multiple sets configuration settings, set corresponding project. project argument allows set get configuration setting specific project given call tar_config_set() tar_config_get(). default project always called \"main\" unless set another default project using TAR_PROJECT environment variable, e.g. Sys.setenv(tar_project = \"custom\"). also effect temporarily modifying default arguments functions tar_make() default arguments functions controlled tar_config_get().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny module server for tar_watch() — tar_watch_server","text":"Shiny module server.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny module UI for tar_watch() — tar_watch_ui","title":"Shiny module UI for tar_watch() — tar_watch_ui","text":"Use tar_watch_ui() tar_watch_server() include tar_watch() Shiny module app.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny module UI for tar_watch() — tar_watch_ui","text":"","code":"tar_watch_ui(   id,   label = \"tar_watch_label\",   seconds = 10,   seconds_min = 1,   seconds_max = 60,   seconds_step = 1,   targets_only = FALSE,   outdated = FALSE,   label_tar_visnetwork = NULL,   level_separation = 150,   degree_from = 1L,   degree_to = 1L,   height = \"650px\",   display = \"summary\",   displays = c(\"summary\", \"branches\", \"progress\", \"graph\", \"about\"),   title = \"\",   theme = bslib::bs_theme(),   spinner = FALSE )"},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny module UI for tar_watch() — tar_watch_ui","text":"id Character length 1, ID corresponding UI function module. label Label module. seconds Numeric length 1, default number seconds refreshes graph. Can changed app controls. seconds_min Numeric length 1, lower bound seconds app controls. seconds_max Numeric length 1, upper bound seconds app controls. seconds_step Numeric length 1, step size seconds app controls. targets_only Logical, whether restrict output just targets (FALSE) also include global functions objects. outdated Logical, whether show colors distinguish outdated targets --date targets. (Global functions objects still show colors.) Looking outdated targets takes lot time large pipelines lots branches, setting outdated FALSE nice way speed graph want see dependency relationships pipeline progress. label_tar_visnetwork Character vector, label argument tar_visnetwork(). level_separation Numeric length 1, levelSeparation argument visNetwork::visHierarchicalLayout(). Controls distance hierarchical levels. Consider changing value aspect ratio graph far 1. level_separation NULL, levelSeparation argument visHierarchicalLayout() defaults 150. degree_from Integer length 1. click node, graph highlights neighborhood node. degree_from controls number edges neighborhood extends upstream. degree_to Integer length 1. click node, graph highlights neighborhood node. degree_to controls number edges neighborhood extends downstream. height Character length 1, height visNetwork widget branches table. display Character length 1, display show first. displays Character vector choices display. Elements can \"graph\", \"summary\", \"branches\", \"\". title Character length 1, title UI. theme call bslib::bs_theme() bslib theme. spinner TRUE add busy spinner, FALSE omit.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_watch_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny module UI for tar_watch() — tar_watch_ui","text":"Shiny module UI.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a saved workspace and seed for debugging. — tar_workspace","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"Load packages, environment, random number generator seed target.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"","code":"tar_workspace(   name,   envir = parent.frame(),   packages = TRUE,   source = TRUE,   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\") )"},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"name Symbol, name target whose workspace read. envir Environment put objects. packages Logical, whether load required packages target. source Logical, whether run _targets.R load user-defined global object dependencies envir. TRUE, envir either global environment inherit global environment. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"function returns NULL, load target's required packages, well multiple objects environment (envir argument) order replicate workspace error happened. objects include global objects time tar_make() called dependency targets. random number generator seed target also assigned tar_seed_set().","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"activate workspaces workspaces argument tar_option_set(), circumstances specify, targets save special workspace file location _targets/workspaces/. workspace file compact reference allows tar_workspace() load target's dependencies random number generator seed long data objects still data store (usually files _targets/objects/). done debugging, can remove workspace files using tar_destroy(destroy = \"workspaces\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_workspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a saved workspace and seed for debugging. — tar_workspace","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tmp <- sample(1) tar_script({   library(targets)   library(tarchetypes)   tar_option_set(workspace_on_error = TRUE)   list(     tar_target(x, \"loaded\"),     tar_target(y, stop(x))   ) }, ask = FALSE) # The following code throws an error for demonstration purposes. try(tar_make()) exists(\"x\") # Should be FALSE. tail(.Random.seed) # for comparison to the RNG state after tar_workspace(y) tar_workspace(y) exists(\"x\") # Should be TRUE. print(x) # \"loaded\" # Should be different: tar_workspace() runs # tar_seed_set(tar_meta(y, seed)$seed) tail(.Random.seed) }) }"},{"path":"https://docs.ropensci.org/targets/reference/tar_workspaces.html","id":null,"dir":"Reference","previous_headings":"","what":"List saved target workspaces. — tar_workspaces","title":"List saved target workspaces. — tar_workspaces","text":"List target workspaces currently saved _targets/workspaces/. See tar_workspace() information.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_workspaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List saved target workspaces. — tar_workspaces","text":"","code":"tar_workspaces(names = NULL, store = targets::tar_config_get(\"store\"))"},{"path":"https://docs.ropensci.org/targets/reference/tar_workspaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List saved target workspaces. — tar_workspaces","text":"names Optional tidyselect selector return tactical subset workspace names. NULL, names selected. object supplied names NULL tidyselect expression like any_of() starts_with() tidyselect , tar_described_as() select target names based descriptions. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/tar_workspaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List saved target workspaces. — tar_workspaces","text":"Character vector available workspaces load tar_workspace().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/tar_workspaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List saved target workspaces. — tar_workspaces","text":"","code":"if (identical(Sys.getenv(\"TAR_EXAMPLES\"), \"true\")) { # for CRAN tar_dir({ # tar_dir() runs code from a temp dir for CRAN. tar_script({   library(targets)   library(tarchetypes)   tar_option_set(workspace_on_error = TRUE)   list(     tar_target(x, \"value\"),     tar_target(y, x)   ) }, ask = FALSE) tar_make() tar_workspaces() tar_workspaces(contains(\"x\")) }) }"},{"path":"https://docs.ropensci.org/targets/reference/target_run_worker.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to run a target on a worker. — target_run_worker","title":"Internal function to run a target on a worker. — target_run_worker","text":"internal purposes . user-side function.","code":""},{"path":"https://docs.ropensci.org/targets/reference/target_run_worker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to run a target on a worker. — target_run_worker","text":"","code":"target_run_worker(target, envir, path_store, fun, options, envvars)"},{"path":"https://docs.ropensci.org/targets/reference/target_run_worker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to run a target on a worker. — target_run_worker","text":"target target object. envir environment string \"globalenv\". path_store Character length 1, path data store. fun Character length 1, name user-side function called run pipeline. options List, exported object class \"tar_options\". envvars Data frame targets-specific environment variables tar_envvars().","code":""},{"path":"https://docs.ropensci.org/targets/reference/targets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"targets: Dynamic Function-Oriented Make-Like Declarative Pipelines for R — targets-package","title":"targets: Dynamic Function-Oriented Make-Like Declarative Pipelines for R — targets-package","text":"pipeline toolkit Statistics data science R, targets package brings function-oriented programming Make-like declarative pipelines. targets orchestrates pipeline graph dependencies, skips steps already date, runs necessary computations optional parallel workers, abstracts files R objects, provides tangible evidence results reproducible given underlying code data. methodology package borrows GNU Make (2015, ISBN:978-9881443519) drake (2018, doi:10.21105/joss.00550 ).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Use targets — use_targets","title":"Use targets — use_targets","text":"Set targets existing project.","code":""},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use targets — use_targets","text":"","code":"use_targets(   script = targets::tar_config_get(\"script\"),   open = interactive(),   overwrite = FALSE,   scheduler = NULL,   job_name = NULL )"},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use targets — use_targets","text":"script Character length 1, write target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. open Logical length 1, whether open file editing RStudio IDE. overwrite Logical length 1, TRUE overwrite target script file, FALSE otherwise. scheduler Deprecated version 1.5.0.9001 (2024-02-12). job_name Deprecated version 1.5.0.9001 (2024-02-12).","code":""},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use targets — use_targets","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use targets — use_targets","text":"use_targets() writes example _targets.R script get started targets pipeline current project. Follow comments script adapt needed. information, please visit https://books.ropensci.org/targets/walkthrough.html.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/use_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use targets — use_targets","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. use_targets(open = FALSE) }) }"},{"path":"https://docs.ropensci.org/targets/reference/use_targets_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Use targets with Target Markdown. — use_targets_rmd","title":"Use targets with Target Markdown. — use_targets_rmd","text":"Create example Target Markdown report get started targets.","code":""},{"path":"https://docs.ropensci.org/targets/reference/use_targets_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use targets with Target Markdown. — use_targets_rmd","text":"","code":"use_targets_rmd(path = \"_targets.Rmd\", open = interactive())"},{"path":"https://docs.ropensci.org/targets/reference/use_targets_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use targets with Target Markdown. — use_targets_rmd","text":"path Character length 1, output path Target Markdown report relative current active project. open Logical, whether open file editing RStudio IDE.","code":""},{"path":"https://docs.ropensci.org/targets/reference/use_targets_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use targets with Target Markdown. — use_targets_rmd","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/reference/use_targets_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use targets with Target Markdown. — use_targets_rmd","text":"","code":"if (identical(Sys.getenv(\"TAR_INTERACTIVE_EXAMPLES\"), \"true\")) { tar_dir({ # tar_dir() runs code from a temp dir for CRAN. use_targets(open = FALSE) }) }"},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-1809004-development","dir":"Changelog","previous_headings":"","what":"targets 1.8.0.9004 (development)","title":"targets 1.8.0.9004 (development)","text":"Un-break workflows use format = \"file_fast\" (#1339, @koefoeden). Fix deadlock error = \"trim\" (#1340, @koefoeden). Remove tailored debugging message (#1341, @koefoeden). Store warnings writing storage (#1345, @Aariq). Allow garbage_collection non-negative integer control frequency garbage collection performant, convenient, unified way (#1351). Deprecate garbage_collection argument tar_make(), tar_make_future(), tar_make_clusterm() (#1351). Instrument target_run(), target_prepare(), target_conclude() using autometric.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-180","dir":"Changelog","previous_headings":"","what":"targets 1.8.0","title":"targets 1.8.0","text":"CRAN release: 2024-10-02 Wrap tar_watch() UI module bslib::page() (#1302, @kwbyron-lilly). Remove callr_function tar_make_as_job() argument list. Ensure storage = \"worker\" respected process storing object generates error (#1304, @multimeric). Default _targets.R pattern tar_branches() (#1306, @multimeric, @mattwarkentin). Remove superfluous functions globals metadata tar_prune() (#1312, @benzipperer). Change default workspace_on_error option TRUE (#1310, @hadley). Enhance organize error = \"stop\" error message. Avoid saving file _targets/objects error = \"null\". Instead, switch special \"null\" storage format class error \"null\" target throws error. allow users freely create new formats tar_format() without worrying handle NULL objects created error = \"null\". Implement format = \"auto\" (#1311, @hadley). Replace pingr dependency base::socketConnection() local URL utilities (#1317, #1318, @Adafede). Implement tar_repository_cas(), tar_repository_cas_local(), tar_repository_cas_local_gc() content-addressable storage (#1232, #1314, @noamross). Add tar_format_get() make implementing CAS systems easier. Implement error = \"trim\" tar_target() tar_option_set() (#1310, #1311, @hadley). Use file system type decide whether trust time stamps (#1315, @hadley, @gaborcsardi). Deprecate format = \"file_fast\" favor (#1315). Deprecate trust_object_timestamps favor unified trust_timestamps tar_option_set() (#1315). Print storage size target verbose reporters (#1337, @psychelzh). Combine help files tar_target() tar_target_raw(). tar_load() tar_load_raw(). Add substitute argument tar_format() make easier write custom storage formats without metaprogramming.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-171","dir":"Changelog","previous_headings":"","what":"targets 1.7.1","title":"targets 1.7.1","text":"CRAN release: 2024-06-20 Use bslib tar_watch(). Speed target_upstream_edges() pipeline_upstream_edges() avoiding data frames last minute (17% speedup certain kinds large pipelines). Automatically set as_job FALSE tar_make() rstudioapi /RStudio available.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-170","dir":"Changelog","previous_headings":"","what":"targets 1.7.0","title":"targets 1.7.0","text":"CRAN release: 2024-04-17","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"invalidating-changes-1-7-0","dir":"Changelog","previous_headings":"","what":"Invalidating changes","title":"targets 1.7.0","text":"Use secretbase::siphash13() instead digest(algo = \"xxhash64\", serializationVersion = 3) hashes -memory objects longer depend serialization version 3 headers (#1244, @shikokuchuo). Unfortunately, pipelines built earlier versions targets need rerun.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-improvements-1-7-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"targets 1.7.0","text":"Ensure patterns marshal properly (#1266, #1264, https://github.com/njtierney/geotargets/issues/52, @Aariq, @njtierney). Inform prompt user pipeline built old version targets changes package cause current work rerun (#1244). tar_make*() functions, utils::menu() prompts user give people chance downgrade necessary. type safety internal database class, read columns character vectors data.table::fread(), convert correct types afterwards. Add new tar_resources_custom_format() function can pass environment variables customize behavior custom tar_format() storage formats (#1263, #1232, @Aariq, @noamross). marshal dependencies actually sending target parallel worker.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-160","dir":"Changelog","previous_headings":"","what":"targets 1.6.0","title":"targets 1.6.0","text":"CRAN release: 2024-03-13 Modernize extras tar_renv(). tar_target() gains description argument free-form text describing target (#1230, #1235, #1236, @tjmahr). tar_visnetwork(), tar_glimpse(), tar_network(), tar_mermaid(), tar_manifest() now optionally show target descriptions (#1230, #1235, #1236, @tjmahr). tar_described_as() new wrapper around tidyselect::any_of() select specific subsets targets based description rather name (#1136, #1196, @noamross, @mattmoo). Fix documentation names argument (nudge users toward tidyselect expressions). Make assertions pipeline process robust (check two processes trying access data store).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-151","dir":"Changelog","previous_headings":"","what":"targets 1.5.1","title":"targets 1.5.1","text":"CRAN release: 2024-02-15 Avoid arrow-related CRAN check NOTE. use_targets() writes _targets.R script. run.sh run.R scripts superseded as_job argument tar_make(). Users using RStudio IDE can call tar_make() callr_function = callr::r_bg run pipeline background process. tar_make_clustermq() tar_make_future() superseded favor tar_make(use_crew = TRUE), template files longer written former automatically.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"invalidating-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Invalidating changes","title":"targets 1.5.0","text":"changes , upgrading version targets unavoidably invalidate previously built targets existing pipelines. pipeline code still work, targets ran likely need rerun upgrade. tar_seed_create(), use secretbase::sha3(x = TARGET_NAME, bits = 32L, convert = NA) generate target seeds resistant overlapping RNG streams (#1139, @shikokuchuo). previous approach used less rigorous combination digest::digest(algo = \"sha512\") digets::digest2int().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-improvements-1-5-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"targets 1.5.0","text":"Update documentation deployment argument tar_target() reflect advent crew (#1208, @psychelzh). Unset cli.num_colors exit tar_error() tar_warning() (#1210, @dipterix). try access seconds_timeout crew controller actually controller group (#1207, https://github.com/wlandau/crew.cluster/discussions/35, @stemangiola, @drejom). tar_make() gains as_job argument optionally run targets pipeline RStudio job. Bump required igraph version 2.0.0 igraph::get.edgelist() deprecated favor igraph::as_edgelist(). dispatch targets backlogged crew controllers (controller groups) (#1220). Use new push_backlog() pop_backlog() crew methods make smooth. Make debugger message generic (#1223, @eliocamp). Throw early informative error tar_make() already targets pipeline running local process local data store. local process detected using process ID time stamp tar_process() (1.01-second tolerance time stamp). Remove pkgload::load_all() warning (#1218). Tried using .__DEVTOOLS__ interferes reverse dependencies. Add documentation assertion tar_target_raw() let users know iteration = \"group\" invalid dynamic targets (ones pattern = map(...) etc.; #1226, @bmfazio).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-141","dir":"Changelog","previous_headings":"","what":"targets 1.4.1","title":"targets 1.4.1","text":"CRAN release: 2024-01-09 Print “errored pipeline” least one target errors. Bump minimum clustermq version 0.9.2. Repair tar_debug_instructions() tips commands long. look dependencies primitive functions (#1200, @smwindecker, @joelnitta).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-140","dir":"Changelog","previous_headings":"","what":"targets 1.4.0","title":"targets 1.4.0","text":"CRAN release: 2023-12-11","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"invalidating-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Invalidating changes","title":"targets 1.4.0","text":"changes , upgrading version targets unavoidably invalidate previously built targets existing pipelines. pipeline code still work, targets ran likely need rerun upgrade. Use SHA512 creation target-specific pseudo-random number generator seeds (#1139). change decreases risk overlapping/correlated random number generator streams. See “RNG overlap” section tar_seed_create() help file details justification. Unfortunately, change invalidate currently built targets seeds different. avoid rerunning whole pipeline, set cue = tar_cue(seed = FALSE) tar_target(). cloud storage: instead hash local file, use ETag AWS S3 targets MD5 hash GCP GCS targets (#1172). Sanitize targets:::digest_chr64() cases storing result metadata. cloud target truly date, hash metadata now needs match current object bucket, version recorded metadata (#1172). words, targets now tries ensure --date data objects cloud newest versions. roll back metadata older version, still able access historical data versions e.g. tar_read(), pipeline longer date.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-changes-to-seeds-1-4-0","dir":"Changelog","previous_headings":"","what":"Other changes to seeds","title":"targets 1.4.0","text":"Add new exported function tar_seed_create() creates target-specific pseudo-random number generator seeds. Add “RNG overlap” section tar_seed_create() help file justify defend targets tarchetypes approach pseudo-random numbers. Add function tar_seed_set() sets seed sets RNG algorithms defaults R installation user. target now uses tar_seed_set() function set seed running R command (#1139). Deprecate tar_seed() favor new tar_seed_get() function.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-cloud-storage-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"Other cloud storage improvements","title":"targets 1.4.0","text":"cloud targets, check hashes batched LIST requests instead individual HEAD requests (#1172). Dramatically speeds process checking cloud targets date. AWS S3 targets, tar_delete(), tar_destroy(), tar_prune() now use efficient batched calls delete_objects() instead costly individual calls delete_object() (#1171). Add new verbose argument tar_delete(), tar_destroy(), tar_prune(). Add new batch_size argument tar_delete(), tar_destroy(), tar_prune(). Add new arguments page_size verbose tar_resources_aws() (#1172). Add new tar_unversion() function remove version IDs metadata cloud targets. makes easier interact just current version target, opposed version ID recorded local metadata.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"targets 1.4.0","text":"Migrate changes clustermq 0.9.0 (@mschubert). progress statuses, change “started” “dispatched” change “built” “completed” (#1192). Deprecate tar_started() favor tar_dispatched() (#1192). Deprecate tar_built() favor tar_completed() (#1192). Console messages reporters say “dispatched” “completed” instead “started” “built” (#1192). crew scheduling algorithm longer waits saturated controllers, targets ready greedily dispatched crew even workers busy (#1182, #1192). appropriately set expectations users, reporters print “dispatched (pending)” instead “dispatched” task load backlogged moment. crew scheduling algorithm, waiting tasks now truly event-driven process consumes 5-10x less CPU resources (#1183). auto-scaling workers uses polling (inexpensive default polling interval 0.5 seconds, configurable seconds_interval controller). Simplify stored target tracebacks. Print traceback error.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-132","dir":"Changelog","previous_headings":"","what":"targets 1.3.2","title":"targets 1.3.2","text":"CRAN release: 2023-10-12 Try fix function help files CRAN.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-131","dir":"Changelog","previous_headings":"","what":"targets 1.3.1","title":"targets 1.3.1","text":"Add tar_config_projects() tar_config_yaml() (#1153, @psychelzh). Apply error modes builder_wait_correct_hash() target_conclude.tar_builder() (#1154, @gadenbuie). Remove duplicated error message builder_error_null(). Allow tar_meta_upload() tar_meta_download() avoid errors one metadata files exist. Add new argument strict control error behavior. Add new arguments meta, progress, process, crew control individual metadata files tar_meta_upload(), tar_meta_download(), tar_meta_sync(), tar_meta_delete(). Avoid newly deprecated arguments functions crew 0.5.0.9003 (https://github.com/wlnadau/crew/issues/131). Allow tar_read() etc. inside pipeline whenever uses different data store (#1158, @MilesMcBain). Set seed = FALSE future::future() (#1166, @svraka). Add new physics argument tar_visnetwork() tar_glimpse() (#925, @Bdblodgett-usgs).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-130","dir":"Changelog","previous_headings":"","what":"targets 1.3.0","title":"targets 1.3.0","text":"CRAN release: 2023-09-11","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"invalidating-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Invalidating changes","title":"targets 1.3.0","text":"changes, upgrading version targets unavoidably invalidate previously built targets existing pipelines. pipeline code still work, targets ran likely need rerun upgrade. hash_deps() method metadata class, exclude symbols actually dependencies, rather just giving empty strings. change decouples dependency hash hash target’s command (#1108).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"cloud-metadata-1-3-0","dir":"Changelog","previous_headings":"","what":"Cloud metadata","title":"targets 1.3.0","text":"Continuously upload metadata files cloud tar_make(), tar_make_clustermq(), tar_make_future() (#1109). Upload repository specified repository_meta tar_option_set() option, use bucket prefix set resources tar_option_set() option. repository_meta defaults existing repository tar_option_set() option. Add new functions tar_meta_download(), tar_meta_upload(), tar_meta_sync(), tar_meta_delete() directly manage cloud metadata outside pipeline (#1109).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"targets 1.3.0","text":"Fix solution #1103 copy fallback actually runs (@jds485, #1102, #1103). Switch back tempdir() #1103. Move path_scratch_dir_network() file.path(tempdir(), \"targets\") make sure tar_destroy(\"\") tar_destroy(\"cloud\") delete . Display tar_mermaid() subgraphs transparent fills black borders. Allow database$get_data() work list columns. Disallow functions access local data store (including metadata) inside target pipeline running (#1055, #1063). exception local file targets tarchetypes literate programming target factories like tar_render() tar_quarto(). hash_deps() method metadata class, use new custom sort_chr() function temporarily sets LC_COLLATE locale \"C\" sorting. ensures lexicographic comparisons consistent across platforms (#1108). tar_source(), use file argument keep.source = TRUE help interactive debugging (#1120). Deprecated seconds_interval tar_config_get(), tar_make(), tar_make_clustermq() tar_make_future(). Replace seconds_meta (control often metadata gets saved) seconds_reporter (control often print messages R console) (#1119). Respect seconds_meta seconds_reporter writing metadata console messages even currently building targets (#1055). Retry cloud REST API calls HTTP error codes (429, 500-599) exponential backoff algorithm googleAuthR (#1112). format = \"url\", retry HTTP error codes . Make cloud temp file instances unique order avoid file conflicts target. Un-deprecate seconds_interval seconds_timeout tar_resources_url(), implement max_tries arguments tar_resources_aws() tar_resources_gcp() (#1127). Use file keep.source parse() callr utils target Markdown. Automatically convert \"file_fast\" format \"file\" format cloud targets. tar_prune() tar_delete(), try delete pattern targets cloud storage. Add new arguments seconds_timeout, close_connection, s3_force_path_style tar_resources_aws() support analogous arguments paws.storage::s3() (#1134, @snowpong).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-122","dir":"Changelog","previous_headings":"","what":"targets 1.2.2","title":"targets 1.2.2","text":"CRAN release: 2023-08-10 Fix documentation issue CRAN.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-121","dir":"Changelog","previous_headings":"","what":"targets 1.2.1","title":"targets 1.2.1","text":"Add tar_prune_list() (#1090, @mglev1n). Wrap file.rename() tryCatch() fall back copy--remove workaround (@jds485, #1102, #1103). Stage temporary cloud upload/download files tools::R_user_dir(package = \"targets\", = \"cache\") instead tempdir(). tar_destroy(destroy = \"cloud\") tar_destroy(destroy = \"\") remove leftover files failed uploads/downloads (@jds485, #1102, #1103). Use paws.storage instead paws.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-120","dir":"Changelog","previous_headings":"","what":"targets 1.2.0","title":"targets 1.2.0","text":"CRAN release: 2023-06-26","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"crew-integration-1-2-0","dir":"Changelog","previous_headings":"","what":"crew integration","title":"targets 1.2.0","text":"assume S3 classes validating crew controllers. Suggest crew controller _targets.R file use_targets(). Make tar_crew() compatible crew >= 0.3.0. Rename argument terminate terminate_controller tar_make(). Add argument use_crew tar_make() add option tar_config_set() make configurable. Write progress data metadata target_prepare().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"other-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"targets 1.2.0","text":"Allow users set default label level_separation arguments tar_config_set() (#1085, @Moohan).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-113","dir":"Changelog","previous_headings":"","what":"targets 1.1.3","title":"targets 1.1.3","text":"CRAN release: 2023-05-23 Decide nanonext usage time_seconds_local() runtime installation time. way, nanonext removed targets installed, functions targets still work. Fixes CRAN issues seen tarchetypes, jagstargets, gittargets.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-112","dir":"Changelog","previous_headings":"","what":"targets 1.1.2","title":"targets 1.1.2","text":"CRAN release: 2023-05-23 Remove crew-related startup messages.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-111","dir":"Changelog","previous_headings":"","what":"targets 1.1.1","title":"targets 1.1.1","text":"Pre-compute cli colors bullets improve performance RStudio. Use packageStartupMessage() package startup messages.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 1.1.0","text":"Send targets appropriate controller controller group crew used.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"general-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"General improvements","title":"targets 1.1.0","text":"Call gc() appropriately garbage_collection TRUE tar_target(). Add garbage_collection arguments tar_make(), tar_make_clustermq(), tar_make_future() add optional garbage collection targets sent workers. different independent garbage_collection argument tar_target(). high-performance computing scenarios, former controls happens main controlling process, whereas latter controls happens worker. Add garbage_collection seconds_interval arguments tar_make(), tar_make_clustermq(), tar_make_future(), tar_config_set(). Downsize tar_runtime object. Remove 100 Kb file size cutoff determining whether trust file timestamp recompute hash checking file date (#1062). Instate \"file_fast\" format trust_object_timestamps option tar_option_set() safer alternatives. Consolidate store constructors. Allow crew controller groups (#1065, @mglev1n). Expose exponential backoff configuration parameters tar_backoff(). backoff argument tar_option_set() now accepts output tar_backoff(), supplying numeric deprecated. Fix exponential backoff rules crew scheduling algorithm. Implement tar_resources_network() configure retries timeouts internal HTTP/HTTPS requests specialized targets format = \"url\", repository = \"aws\", repository = \"gcp\". Also applies syncing target files across network file systems case storage = \"worker\" format = \"file\", previously hard-coded seconds_interval = 0.1 seconds_timeout = 60. Deprecate seconds_interval seconds_timeout tar_resources_url() favor new equivalent arguments tar_resources_network() Safely withhold target crew controller controller saturated (#1074, @mglev1n). Use exponential backoff appending target back queue case saturated crew controller. Use native retries paws.common (@DyfanJones).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"speedups-1-1-0","dir":"Changelog","previous_headings":"","what":"Speedups","title":"targets 1.1.0","text":"Cache info _targets/objects/ tar_callr_inner_try() update cache targets saved _targets/objects/ avoid overhead repeated calls file.exists() file.info() (#1056). Trust timestamps default checking whether files _targets/objects/ date (#1062). tar_option_set(trust_object_timestamps = FALSE) ignores timestamps recomputes hashes. Write _targets/meta/meta _targets/meta/progress timed batches instead line line (#1055). Reporters now print progress messages timed batches instead line line (#1055). summary forecast reporters much faster avoid going data frames. Avoid tempfile() working scratch directory. Use nanonext::mclock() instead proc.time() risk forked processes. Replace withr slightly faster/leaner base R alternatives. Efficiently catch changes working directory instead overburdening pipeline calls setwd() (#1057). Invoke tar_options methods internals instead tar_option_get(). Avoid gsub() store_init(). Avoid repeated calls meta$get_record() builder_should_run(). Mock store object creating record metadata row. Avoid cli::col_none() reduce number ANSI characters printed R console.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-100","dir":"Changelog","previous_headings":"","what":"targets 1.0.0","title":"targets 1.0.0","text":"CRAN release: 2023-04-24 targets moving version 1.0.0 significantly mature previous versions. Specifically, tar_make() now integrates crew, significantly improve way targets high-performance computing going forward. functionality targets stabilized. still room smaller new features, none large crew integration, none fundamentally change package operates.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"major-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Major improvements","title":"targets 1.0.0","text":"Support distributed computing crew package tar_make() (#753). crew still early stages currently lacks launcher plugins match clustermq future backends, long-term, crew predominant high-performance computing backend.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"targets 1.0.0","text":"Add new store_copy_object() store class enable \"fst_dt\" formats make deep copies needed (#1041, @MilesMcBain). Add new copy argument allow tar_format() formats set store_copy_object() method (#1041, @MilesMcBain). Shorten output string returned tar_format() default methods used. Add change_directory argument tar_source() (#1040, @dipterix). format = \"url\" targets, implement retries timeouts connecting URLs. default timeout 10 seconds, default retry interval 1 second. configurable via tar_resources_url() (#1048). Use parallelly::freePort() tar_random_port(). Rename target function tar_script() example pipeline (#1033, @b-rodrigues). Edit description.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0143","dir":"Changelog","previous_headings":"","what":"targets 0.14.3","title":"targets 0.14.3","text":"CRAN release: 2023-03-08 Handle encoding errors trying process error warning messages (#1019, @adrian-quintario). Fix S3 generic/method consistency.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0142","dir":"Changelog","previous_headings":"","what":"targets 0.14.2","title":"targets 0.14.2","text":"CRAN release: 2023-01-06 Forward user-level custom error conditions top pipeline (#997, @alexverse). Link help page manual.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0141","dir":"Changelog","previous_headings":"","what":"targets 0.14.1","title":"targets 0.14.1","text":"CRAN release: 2022-11-29 Fix command inserted debug mode (#975). Set empty chunk options ensure Target Markdown compatibility special “setup” chunk (#973, @KaiAragaki). store first 50 warnings metadata, cap text warning messages 2048 characters (#983, @thejokenott). Enhance tar_destroy() help file (#988, @Sage0614). Implement destroy = \"user\" tar_destroy().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0140","dir":"Changelog","previous_headings":"","what":"targets 0.14.0","title":"targets 0.14.0","text":"CRAN release: 2022-11-01 Move #!/bin/sh line top SLURM clustermq template file (#944, #955, @GiuseppeTT). Add new function tar_path_script(). Rename tar_store() tar_path_store() deprecation. Rename tar_path() tar_path_target() deprecation. Add new function tar_path_script_support(). Make Target Markdown target scripts dynamically locate support scripts appropriate scripts can found even generated one directory sourced another (#953, #957, @TylerGrantSmith). Allow user-side control seeds pipeline level. tar_option_set() now supports seed argument, target-specific seeds determined tar_option_get(\"seed\") target name. tar_option_set(seed = NA) disables seed-setting behavior forcibly invalidates affected targets except seed FALSE target’s tar_cue() (#882, @sworland-thyme, @joelnitta). Implement seed argument tar_cue() control whether targets update response changing NA seeds (#882, @sworland-thyme, @joelnitta). Reduce number per-target AWS/GCP storage API calls. Previously 3 API calls per target, including 2 HEAD requests. Now just 1 typical target (unless dependencies downloaded). Relies S3 strong read--write consistency (#958). Update tar_github_actions() workflow file use @v2 (#960, @kulinar). Print helpful hints debugging target interactively (#961). attempt debug target callr_function NULL (#961). Make formats \"feather\", \"parquet\", \"file\", \"url\" work error = \"null\" (#969). Declare formats \"keras\" \"torch\" superseded tar_format(). Documented tar_target() help file. Declare formats \"keras\" \"torch\" incompatible error = \"null\". Documented tar_target() help file warning thrown tar_target() via tar_target_raw(). Add convert argument tar_format() allow custom store_convert_object() methods (#970).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0135","dir":"Changelog","previous_headings":"","what":"targets 0.13.5","title":"targets 0.13.5","text":"CRAN release: 2022-09-26 Use any_of() instead all_of() tests ensure compatibility tidyselect 1.1.2.9000 (#928, @hadley). Make run.R use_targets() executable (#929, @petrbouchal). Add #!/usr/bin/env Rscript top run.R use_targets() (#929, @petrbouchal).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0134","dir":"Changelog","previous_headings":"","what":"targets 0.13.4","title":"targets 0.13.4","text":"CRAN release: 2022-09-15 Implement custom alternative skip_on_cran() avoid https://github.com/r-lib/testthat/issues/1470#issuecomment-1248145555. Skip tests CRAN.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-13-3","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.13.3","text":"Print “targets found” targets pipeline check build, names argument tar_make() identify targets pipeline (#923, @llrs). Ignore .packageName, .__NAMESPACE__., .__S3MethodsTable__. importing objects packages imports option tar_option_set(). Import datasets packages imports option tar_option_set() (#926, @joelnitta). Print target-specific elapsed runtimes verbose timestamp reporters. Improve error messages functions like tar_read() tar_load() data store missing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-13-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.13.2","text":"incorrectly reference feather resources parquet storage.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-13-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.13.2","text":"Simplify improve error handling. command column tar_manifest() output, separate lines “” instead “\\n” text output straightforward work . Add drop_missing argument tar_manifest() hide/show columns NA values. set Parquet version.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0131","dir":"Changelog","previous_headings":"","what":"targets 0.13.1","title":"targets 0.13.1","text":"CRAN release: 2022-08-05 Fix reverse dependency checks.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.13.0","text":"bootstrap junction stem unless target branched (#858, @dipterix). non-“file” AWS targets, immediately delete scratch file target uploaded (#889, @stuvet).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-13-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.13.0","text":"Allow extra arguments paws functions via ... tar_resources_aws() (#855, @michkam89). Add tar_source() conveniently source R scripts (e.g. _targets.R).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-13-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.13.0","text":"Color ordinary targets messages default theme color, color warnings errors red (#856, @gorkang). Automatically supply job names scripts generated use_targets(). Inherit resources one--one nested fashion tar_option_get(\"resources\") (#892). See revised \"Resources\" section tar_resources() help file details.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0121","dir":"Changelog","previous_headings":"","what":"targets 0.12.1","title":"targets 0.12.1","text":"CRAN release: 2022-06-03","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-12-1","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.12.1","text":"Add arguments legend color configure tar_mermaid() (#848, @noamross). HPC schedulers like SLURM SGE, use_targets() now creates job.sh script run pipeline cluster job (#839).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-12-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.12.1","text":"Use lapply() source scripts use_targets(). Avoids defining global variable file. Recursively find scripts source use_targets() _targets.R file. Refactor error printing.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0120","dir":"Changelog","previous_headings":"","what":"targets 0.12.0","title":"targets 0.12.0","text":"CRAN release: 2022-04-19","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.12.0","text":"Fix tar_mermaid() graph ordering. Hash node names quote label names tar_mermaid() graphs avoid JavaScript keywords. Remove superfluous line breaks node labels graph visuals. Fix metadata migration version >= 0.10.0 (#812, @tjmahr). data.table::fread() encoding equal getOption(\"encoding\") available (#814, @svraka). works UTF-8 latin1 data.table supports. Force add files GitHub Actions workflow job (#815, @tarensanders).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-12-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.12.0","text":"use_targets() now writes _targets.R file tailored project current working directory (#639, @noamross). Move old use_targets() use_targets_rmd().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-12-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.12.0","text":"Load packages loading data downstream targets pipeline (#713). Handle edge case getOption(\"OutDec\") \".\" prevent time stamps corrupted (#433, @jarauh). Added helper function tar_load_everything() quickly load targets (#823, @malcolmbarrett)","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0110","dir":"Changelog","previous_headings":"","what":"targets 0.11.0","title":"targets 0.11.0","text":"CRAN release: 2022-03-18","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.11.0","text":"Print relevant target names targets conflicting names. Catch target warnings instead just reporting last one. Allow 200 group URL status codes instead just 200 (#797, @petrbouchal).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.11.0","text":"Add Google Cloud Storage via tar_target(..., repository = \"gcp\") (#720, @markedmondson1234). Special thanks @markedmondson1234 cloud storage utilities R/utils_gcp.R mermaid.js static graphs tar_mermaid() (#775, @yonicd). Implement tar_target(..., error = \"null\")allow errored targets return NULL continue (#807, @zoews). Errors still registered, targets date, downstream targets easier time continuing . Implement tar_assert_finite(). tar_destroy(), tar_delete(), tar_prune() now attempt delete cloud data appropriate targets (#799). addition, tar_exist_objects() tar_objects() now report target data cloud applicable. Add new cloud argument function optionally suppress new behavior. Add zoom_speed argument tar_visnetwork() tar_glimpse() (#749, @dipterix). Report total runtime pipeline \"verbose\", \"verbose_positives\", \"timestamp\", \"timesamp_positives\" reporters.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-11-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.11.0","text":"Allow target name character strings attributes (#758, @psanker). Sort metadata rows pipeline finishes version-controlling metadata easier (#766, @jameelalsalam).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"deprecations-0-11-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"targets 0.11.0","text":"Deprecate \"aws_*\" storage format values favor new repository argument (#803). words, tar_target(..., format = \"aws_qs\") now tar_target(..., format = \"qs\", repository = \"aws\"). internally, storage classes multiple inheritance created dynamically opposed hard-coded source files. paves way add new cloud storage platforms without combinatorial chaos.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0100","dir":"Changelog","previous_headings":"","what":"targets 0.10.0","title":"targets 0.10.0","text":"CRAN release: 2022-01-07","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.10.0","text":"Add class \"tar_nonexportable\" format = \"aws_keras\" format = \"aws_torch\" stores. Export S3 methods generic tar_make_interactive_load_target().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.10.0","text":"Allow entirely custom storage formats tar_target(format = tar_format(...)) (#736). Add new function tar_call() return targets function currently running (_targets.R target). Add new function tar_active() tell whether pipeline currently running. Detects called tar_make() similar function.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-10-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.10.0","text":"Add Sys.getenv(\"TAR_PROJECT\") output tar_envvars(). Set store field tar_runtime prior sourcing _targets.R tar_store() works target scripts. Explicitly export environment variables tar_envvars() targets run parallel workers. Allow format = \"file\" targets return character(0) (#728, @programLyrique). Automatically remove non-targets target list improve target list error messages (#731, @billdenney). Link resources deploying RStudio Connect (#745, @ian-flores).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-091","dir":"Changelog","previous_headings":"","what":"targets 0.9.1","title":"targets 0.9.1","text":"Mask pointers function dependencies (#721, @matthiaskaeding)","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-090","dir":"Changelog","previous_headings":"","what":"targets 0.9.0","title":"targets 0.9.0","text":"CRAN release: 2021-12-04","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"highlights-0-9-0","dir":"Changelog","previous_headings":"","what":"Highlights","title":"targets 0.9.0","text":"Track version ID AWS S3-backed targets bucket version-enabled (#711). put targets AWS metadata code version control, can git checkout different branch code targets stay date. Refactor AWS path format internally. now consists arbitrarily extensible key-value pairs AWS S3 functionality may added seamlessly going forward (#711). Switch AWS S3 backend paws (#711).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.9.0","text":"Add region argument tar_resources_aws() allow user explicitly declare region AWS S3 buckets (@caewok, #681). Different buckets can now different regions. feature required modifying metadata path AWS storage formats. , first element path simply bucket name. Now, internally formatted like \"bucket=BUCKET:region=REGION\", BUCKET user-supplied bucket name REGION user-supplied region name. new targets back-compatible old metadata format, run pipeline targets >= 0.8.1.9000 downgrade targets <= 0.8.1, AWS targets break. Add new reporters timestamp_positives\" \"verbose_positives\" omit messages skipped targets (@psanker, #683). Implement tar_assert_file(). Implement tar_reprex() creating easier reproducible examples pipelines. Implement tar_store() get path store currently running pipeline (#714, @MilesMcBain). Automatically write _targets/user/ folder encourage gittargets users put custom files data version control.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.9.0","text":"Make sure tar_path() uses current store path currently running pipeline instead tar_config_get(\"store\") (#714, @MilesMcBain).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-9-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.9.0","text":"Refactor automatic .gitignore file inside data store allow metadata committed version control easily (#685, #711). Document target name requirements tar_target() tar_target_raw() (@tjmahr, #679). Catch relay error target checked target_should_run.tar_builder(). kinds errors sometimes come AWS storage. Fix documentation reporters. write _targets/.gitignore new data stores user can delete .gitignore file without mysteriously reappearing (#685).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-081","dir":"Changelog","previous_headings":"","what":"targets 0.8.1","title":"targets 0.8.1","text":"CRAN release: 2021-10-26","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-8-1","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.8.1","text":"Add arguments strict silent allow tar_load() tar_load_raw() bypass targets loaded.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-8-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.8.1","text":"Improve tidyselect docs tar_make() (#640, @dewoller). Use namespaced call tar_dir() tar_test() (#642, @billdenney). Improve tar_assert_target_list() error message (@kkami1115, #654). Throw informative error target name starts dot (@dipterix, #662). Improve help files tar_destroy() related cleanup functions (@billdenney, #675).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-080","dir":"Changelog","previous_headings":"","what":"targets 0.8.0","title":"targets 0.8.0","text":"CRAN release: 2021-09-21","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.8.0","text":"Hash correct files tar_target(target_name, ..., format = \"aws_file\"). Previously, _targets/objects/target_name also hashed existed.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.8.0","text":"Implement new tar_config_unset() function delete one configuration settings YAML configuration file. Implement TAR_CONFIG environment variable set default file path YAML configuration file project settings (#622, @yyzeng, @atusy, @nsheff, @wdkrnls). TAR_CONFIG set, file path still _targets.yaml. Restructure YAML configuration file format handle configuration information multiple projects (using config package) support TAR_PROJECT environment variable select current active project given R session. old single-project format gracefully deprecated (#622, @yyzeng, @atusy, @nsheff, @wdkrnls). Implement retrieval = \"none\" storage = \"none\" anticipate loading/saving targets languages, e.g. Julia (@MilesMcBain). Add new tar_definition() function get target definition object current target target running pipeline. called inside AWS target, tar_path() now returns path staging file instead _targets/objects/target_name. ensures can still write tar_path() storage = \"none\" targets package automatically hash right file upload cloud. (behavior apply formats \"file\" \"aws_file\", never necessary set storage = \"none\".)","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-8-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.8.0","text":"Use eval(parse(text = ...), envir = tar_option_set(\"envir\") instead source() _targets.R file Target Markdown. Allow feather parquet formats accept objects class RecordBatch Table (@MilesMcBain). Let knitr load Target Markdown engine (#469, @nviets, @yihui). Minimum knitr version now 1.34. tar_resources_future() help file, encourage use plan specify resources.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-070","dir":"Changelog","previous_headings":"","what":"targets 0.7.0","title":"targets 0.7.0","text":"CRAN release: 2021-08-19","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.7.0","text":"Ensure error = \"continue\" cause errored targets NULL values. Relay output messages Target Markdown interactive mode (using R/default knitr engine).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.7.0","text":"Expose poll_connection, stdout, stderr arguments callr::r_bg() tar_watch() (@mpadge). Add new helper functions list targets progress category: tar_started(), tar_skipped(), tar_built(), tar_canceled(), tar_errored(). Add new helper functions tar_interactive(), tar_noninteractive(), tar_toggle() differentially suppress code non-interactive interactive mode Target Markdown (#607, @33Vito).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-7-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.7.0","text":"Handle future errors within targets (#570, @stuvet). Handle storage errors within targets (#571, @stuvet). Target Markdown non-interactive mode, suppress messages message knitr chunk option FALSE (#574, @jmbuhr). Target Markdown, tar_interactive set, choose interactive vs non-interactive mode based isTRUE(getOption(\"knitr..progress\")) instead interactive(). Convert errors loading dependencies errors running targets (@stuvet).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-060","dir":"Changelog","previous_headings":"","what":"targets 0.6.0","title":"targets 0.6.0","text":"CRAN release: 2021-07-21","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.6.0","text":"Allow tar_poll() lose regain connection progress file. Make sure changes tar_group column iteration = \"group\" data frames invalidate slices (#507, @lindsayplatt).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.6.0","text":"Target Markdown, add new tar_interactive global option select interactive mode non-interactive mode (#469). Highlight graph neighborhood user clicks node. Control neighborhood degree new arguments degree_from degree_to tar_visnetwork() tar_glimpse() (#474, @rgayler). Make target script path configurable tar_config_set() (#476). Add tar_script chunk option Target Markdown control targets language engine writes target script helper scripts (#478). Add new arguments script store choose custom paths target script file data store individual function calls (#477). Allow users set alternative path YAML configuration file current R session (#477). users reason set path, niche applications like Shiny apps targets backends. Unavoidably, path gets reset _targets.yaml session restarts. Add new _targets.yaml config options reporter_make, reporter_outdated, workers control function argument defaults shared across multiple functions called outside _targets.R (#498, @ianeveperry). Add tar_load_globals() debugging, testing, prototyping, teaching (#496, @malcolmbarrett). Add structure resources argument tar_target() avoid conflicts among formats HPC backends (#489). Includes user-side helper functions like tar_resources() tar_resources_aws() build required data structures. Log skipped targets _targets/meta/progress display tar_progress(), tar_poll(), tar_watch(), tar_progress_branches(), tar_progress_summary(), tar_visnetwork() (#514). Instead writing skip line separately _targets/meta/progress, accumulate skip lines queue write bulk something interesting happens. avoids lot overhead certain cases. Add shortcut argument tar_make(), tar_make_clustermq(), tar_make_future(), tar_outdated(), tar_sitrep() efficiently skip parts pipeline (#522, #523, @jennysjaarda, @MilesMcBain, @kendonB). Support names shortcut graph data frames graph visuals (#529). Move allow exclude network behind graph visuals rather visuals (#529). Add new “progress” display tar_watch() app show verbose progress info metadata. Add new workspace_on_error argument tar_option_set() supersede error = \"workspace\". Helps control workspace behavior independently error argument tar_target() (#405, #533, #534, @mattwarkentin, @xinstein). Implement error = \"abridge\" tar_target() related functions. target errors option, target stops, currently running targets keeps, new targets launch (#533, #534, @xinstein). Add menu prompt tar_destroy() can suppressed TAR_ASK = \"false\" (#542, @gofford). Support functions tar_older() tar_newer() help users identify invalidate targets regular times intervals.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"deprecations-0-6-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"targets 0.6.0","text":"Target Markdown, deprecate targets chunk option favor tar_globals (#469). Deprecate error = \"workspace\" tar_target() related functions. Use tar_option_set(workspace_on_error = TRUE) instead (#405, #533, @mattwarkentin, @xinstein).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"performance-0-6-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"targets 0.6.0","text":"Reset backoff upper bound concluding target shutting clustermq worker (@rich-payne). Set aggressive default backoff bound 0.1 seconds (previous: 5 seconds) set aggressive minimum 0.001 seconds (previous: 0.01 seconds) (@rich-payne). Speed summary forecast reporters printing console every quarter second. Avoid superfluous calls store_sync_file_meta.default() small files. Expose arguments display displays tar_watch() user can select display shows first. Make \"summary\" default display instead \"graph\". Set outdated FALSE default.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-6-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.6.0","text":"Simplify Target Markdown example. Warn unnamed chunks Target Markdown. Redesign option system object-oriented rigorous. Also export options HPC workers (#475). Simplify config system let API function arguments take control (#483). tar_read() targets format = \"aws_file\", download file back path user originally saved target ran. Replace TAR_MAKE_REPORTER environment variable targets::tar_config_get(\"reporter_make\"). Use eval(parse(text = readLines(\"_targets.R\")), envir = some_envir) related techniques instead less controllable source(). Expose envir argument many functions control evaluation callr_function NULL. Drop .attrs hashing groups data frames extend #507 expand.grid() (#508). Increase number characters errors warnings 2048. Refactor assertions automatically generate better messages. Export assertions, conditions, language utilities packages build top targets. Change GITHUBPAT GITHUB_TOKEN tar_github_actions() YAML file (#554, @eveyp). Support eval chunk option Target Markdown (#552, @fkohrt). Record time stamps metadata time column builder targets, regardless storage format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.5.0","text":"Export -memory config settings _targets.yaml parallel workers.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.5.0","text":"Add limited-scope exclude argument tar_watch() tar_watch_server() (#458, @gorkang). Write .gitignore file ignore everything _targets/meta/ except .gitignore _targets/meta/meta. Target Markdown: add knitr engines pipeline construction prototyping within literate programming documents (#469, @cderv, @nviets, @emilyriederer, @ijlyttle, @GShotwell, @gadenbuie, @tomsing1). Huge thanks @cderv one answering deluge questions, helping figure possible knitr, ultimately circling back successful approach. Add RStudio R Markdown template Target Markdown (#469). Implement use_targets(), writes Target Markdown template project root (#469). Implement tar_unscript() clean scripts written Target Markdown.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-5-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.5.0","text":"Enable priorities tar_make() tar_manifest(). Show priority print method stem pattern targets. Throw informative errors secondary arguments pattern = slice() pattern = sample() invalid. tar_target_raw(), assert commands length 1 converted expressions. Handle errors post failure artifacts Github Actions YAML file. Rewrite documentation invalidation rules tar_cue() (@maelle). Drop dplyr groups \"grouped_df\" class tar_group() (tarchetypes discussion #53, @kendonB). Assign branch names dynamic branching return values produced tar_read() tar_read_raw().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-042","dir":"Changelog","previous_headings":"","what":"targets 0.4.2","title":"targets 0.4.2","text":"CRAN release: 2021-04-30","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.4.2","text":"use time stamps monitor config file (e.g. _targets.yaml). Fixes CRAN check errors version 0.4.1.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-041","dir":"Changelog","previous_headings":"","what":"targets 0.4.1","title":"targets 0.4.1","text":"CRAN release: 2021-04-22 Fix CRAN test error Windows R-devel. inherit roxygen2 docstrings shiny. Handle missing Suggests: packages. Unset config lock reading targets.yaml callr process.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.4.0","text":"Avoid file.rename() errors migrating staged temporary files (#410). Return correct error messages feather parquet formats (#388). Now calling assert_df() store_assert_format() instead store_cast_object(). now last two functions called target throws error. Retry writing lines database files Windows machines can run tar_poll() time pipeline (#393). Rename file written tar_renv() _targets_packages.R (#397). Ensure metadata loaded compute labels properly outdated = FALSE tar_visnetwork().","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.4.0","text":"Implement tar_timestamp() tar_timestamp_raw() get last modified timestamp target’s data (#378). Implement tar_progress_summary() compactly summarize pipeline progress (#380). Add characters argument tar_traceback() cap traceback line lengths (#383). Add new “summary” “” views tar_watch() (#382). Implement tar_poll() repeatedly poll runtime progress R console (#381). tar_poll() lightweight alternative tar_watch(). Change color “dormant” status graph. Add tar_envvar() function list values special environment variables supported targets. help file explains environment variable detail. Support extra project-level configuration settings _targets.yaml (#297). New functions tar_config_get() tar_config_set() interact _targets.yaml file. Currently supports store field set data store path something _targets/.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"performance-0-4-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"targets 0.4.0","text":"Shut superfluous persistent workers earlier dynamic branching remaining targets deployment = \"main\" (#398, #399, #404, @pat-s).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-4-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.4.0","text":"Attempt print useful part traceback tar_traceback() (#383). Add line break end “summary” reporter warnings mangle output. tar_watch(), use shinybusy instead shinycssloaders keep current output display new output rendering (#386, @rcorty). Right-align headers counts “summary” “forecast” reporters. Add timestamp “summary” reporter. Make reporters show target ends (#391, @mattwarkentin). Make reporters show pattern ends pattern built least one target none targets errored canceled. Use words “start” “built” reporters. Use region AWS S3 bucket instead local AWS_DEFAULT_REGION environment variable (check_region = TRUE; #400, @tomsing1). tar_meta(), return POSIXct times time zone calling system (#131). Throw informative error messages target’s name command missing (#413, @liutiming). Bring back ALTREP qs::qread() now qs 0.24.1 requires stringfish >= 1.5.0 (#147, @glep). Relax dynamic branching checks pattern = slice(...) can take multiple indexes (#406, #419, @djbirke, @alexgphayes)","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-031","dir":"Changelog","previous_headings":"","what":"targets 0.3.1","title":"targets 0.3.1","text":"CRAN release: 2021-03-28","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.3.1","text":"queue$enqueue() now queue$prepend() always appends front queue (#371).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-3-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.3.1","text":"Throw warning devtools::load_all() similar detected inside _targets.R (#374).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"cran-0-3-1","dir":"Changelog","previous_headings":"","what":"CRAN","title":"targets 0.3.1","text":"Skip feather parquet tests CRAN.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-030","dir":"Changelog","previous_headings":"","what":"targets 0.3.0","title":"targets 0.3.0","text":"CRAN release: 2021-03-27","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.3.0","text":"Fix “write target cursor” RStudio addin move cursor parentheses.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.3.0","text":"Add backoff option tar_option_set() set maximum upper bound (seconds) polling interval (#333). Add new tar_github_actions() function write GitHub Actions workflow file continuous deployment data analysis pipelines (#339, @jaredlander). Add new TAR_MAKE_REPORTER environment variable globally set reporter tar_make*() functions (#345, @alexpghayes). Support new storage formats “feather”, “parquet”, “aws_feather”, “aws_parquet” (#355, @riazarbi).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"performance-0-3-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"targets 0.3.0","text":"Implement exponential backoff algorithm polling priority queue tar_make_clustermq() tar_make_future() (#333). tar_make_future(), try submit target every time worker polled. tar_make_future(), poll workers order target priority. Avoid time delay exiting error (https://github.com/r-lib/callr/issues/185). Clone target objects pipeline scrape targets internal objects environment order avoid accidental massive data transfers workers.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-3-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.3.0","text":"Use rlang::check_installed() inside assert_package() (#331, @malcolmbarrett). Allow tar_destroy(destroy = \"process\"). tar_watch(), increase default seconds 15 (previously 5). tar_watch(), debounce instead throttle inputs. tar_watch(), add action button refresh outputs. Always deduplicate metadata tar_make(). help compute cache key GitHub Actions similar services. Deprecate tar_deduplicate() due item . Reorder information timestamped messages. Document RNG seed generation tar_target_raw(), tar_meta(), tar_seed() (#357, @alexpghayes). Switch meaning %||% %|||% conform historical precedent. show command line spinner reporter = \"silent\" (#364, @matthiasgomolka). Target pipeline objects longer envir element.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-020","dir":"Changelog","previous_headings":"","what":"targets 0.2.0","title":"targets 0.2.0","text":"CRAN release: 2021-02-27","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.2.0","text":"tar_load(), subset metadata avoid accidental attempts load global objects tidyselect calls. register pattern running unless actual branch start (#304). Use name spec vctrs::vec_c() (#320, @joelnitta).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.2.0","text":"Add new names argument tar_objects() tar_workspaces() tidyselect functionality. Record info main process (PID, R version, targets version) _targets/meta/process write new functions tar_process() tar_pid() retrieve data (#291, #292). Add new targets_only argument tar_meta(). Add new functions tar_helper() tar_helper_raw() write general-purpose R scripts, using tidy evaluation template mechanism (#290, #291, #292, #306). Export functions check existence various pieces local storage: tar_exist_meta(), tar_exist_objects(), tar_exist_progress(), tar_exist_progress(), tar_exist_script() (#310). Add new supervise argument tar_watch(). Add new complete_only argument tar_meta() optionally return complete rows (NA values). Catch callr errors refer users debugging chapter manual.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.2.0","text":"Improve error messages invalid arguments (#298, @brunocarlin). Removes partial argument matching cases. default, locally enable crayon calling process interactive (#302, @ginolhac). Can still disabled options(crayon.enabled = FALSE) _targets.R. Improve error handling message format = \"url\" HTTP response status code 200 (#303, @petrbouchal). Add extras packages tar_renv() (support tar_watch()). Show informative message instead error tar_watch() _targets.R exist. Clear documentation names argument tar_load() (#314, @jameelalsalam). override nobody custom curl handles (#315, @riazarbi). Rename “running” “started” progress metadata. avoids implicit claim targets somehow actively monitoring job, e.g. connection heartbeat (#318). Set errormode = \"warn\" getVDigest() files work around https://github.com/eddelbuettel/digest/issues/49 network drives Windows. targets already runs file checks anyway. (#316, @boshek). package fails load, print library paths targets tried load .","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-010","dir":"Changelog","previous_headings":"","what":"targets 0.1.0","title":"targets 0.1.0","text":"CRAN release: 2021-02-01","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.1.0","text":"tar_test() now skips tests Solaris order fix problems shown CRAN check page. Enable allow exclude work imports tar_visnetwork() tar_glimpse(). Put visNetwork legends right avoid crowding graph.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"performance-0-1-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"targets 0.1.0","text":"Call force() subpipeline objects eliminate high-memory promises target objects. Allows targets deployed workers much faster retreival \"main\" (#279).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.1.0","text":"Add new box tar_watch() app tabulate progress dynamic branches (#273, @mattwarkentin). Store type, parent, branches progress data tar_watch() (#273, @mattwarkentin). Add fields argument tar_progress() default \"progress\" back compatibility (#273, @mattwarkentin). Add new tar_progress_branches() function tabulate branch progress (#273, @mattwarkentin). Add new “refresh” switch tar_watch() toggle automatic refreshing force refresh.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.1.0","text":"Exclude .Random.seed default tar_visnetwork(). Spelling: “cancelled” changed “canceled”. Enhance controls use space tar_watch() app. Centralize internal path management utilities.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"configuration-0-1-0","dir":"Changelog","previous_headings":"","what":"Configuration","title":"targets 0.1.0","text":"Skip clustermq tests Solaris.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-002","dir":"Changelog","previous_headings":"","what":"targets 0.0.2","title":"targets 0.0.2","text":"CRAN release: 2021-01-21","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"cran-response-0-0-2","dir":"Changelog","previous_headings":"","what":"CRAN response","title":"targets 0.0.2","text":"Avoid starting description package name. Remove (FALSE) blocks help files fix “unexecutable code” warnings (tar_glimpse(), tar_visnetwork(), tar_watch()). Remove commented code examples (tar_edit(), tar_watch_ui(), tar_watch_server()). Ensure examples, tests, vignettes write user’s home file space. (Fixed example tar_workspace().)","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-0-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.0.2","text":"Use JOSS paper CITATION.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.0.1","text":"Accept lists target objects end _targets.R (#253). Deprecate tar_pipeline() tar_bind() (#253). Always show special message pipeline finishes (#258, @petrbouchal). Disable visNetwork stabilization (#264, @mattwarkentin). Use default visNetwork font size. Relay errors condition messages error \"continue\" (#267, @liutiming).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.0.0.9003","text":"Ensure pattern-pipelines can defined can combined later tar_bind() (#245, @yonicd). Implement safeguards around igraph topological sort.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.0.0.9003","text":"Topologically sort rows tar_manifest() (#263, @sctyner).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"breaking-changes-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"targets 0.0.0.9003","text":"Make patterns composable (#212, @glep, @djbirke). Allow workspaces load nonexportable objects (#214). Make workspace files super light saving reference required dependencies (#214). Add new workspaces argument tar_option_set() specify targets save workspace files tar_make() (#214). Change error = \"save\" error = \"workspace\" clearer saving workspaces longer duplicates data (#214). Rename destroy tar_destroy(). Remove tar_undebug() redundant tar_destroy(destroy = \"workspaces\").","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-0-0-9003","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.0.0.9003","text":"Make patterns composable (#212). Add new dynamic branching patterns head(), tail(), sample() provide functionality equivalent drake’s max_expand (#56). Add new tar_pattern() function emulate dynamic branching outside pipeline. Add new level_separation argument tar_visnetwork() tar_glimpse() control aspect ratio (#226). Track functions multiple packages imports argument tar_option_set() (#239). Add color “built” progress outdated FALSE tar_visnetwork(). Tweak colors tar_visnetwork() try account color blindness.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-0-0-9003-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.0.0.9003","text":"Return full patterns tar_manifest(). Record package load errors progress metadata (#228, @psychelzh). tar_renv() now invokes _targets.R background process just like tar_outdated() etc. can account hidden packages (#224, @mattwarkentin). Set deployment equal \"main\" targets tar_make(). ensures tar_make() waste time waiting nonexistent files ship nonexistent network file system (NFS). tar_make_clustermq() tar_make_future() use NFS, still leave deployment alone.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"breaking-changes-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"targets 0.0.0.9002","text":"Add new size field metadata allow targets make better judgments rehash files (#180). now compare hashes check file size differences instead messy floating point comparisons ad hoc tolerances. breaks back compatibility old projects, error message informative, still first official release. Change “local” “main” “remote” “worker” storage, retrieval, deployment settings (#183, @mattwarkentin). Ensure function dependencies sorted computing function hash (GitHub commit f15face7d72c15c2d1098da959492bdbfcddb425). Move garbage_collection target-level setting, .e. argument tar_target() tar_option_set() (#194). Previously argument tar_make*() functions. Allow tar_name() tar_path() run outside pipeline debugging-friendly default return values.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"bug-fixes-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"targets 0.0.0.9002","text":"Stop sending target return values network storage \"remote\" (#182, @mattwarkentin). Shorten lengths warnings error messages 128 characters (#186, @gorkang). Restrict -memory metadata avoid incorrectly recycling deleted targets (#191). Marshal nonexportable dependencies sending workers. Transport data target$subpipeline rather target$cache make happen (#209, @mattwarkentin).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"new-features-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"New features","title":"targets 0.0.0.9002","text":"Add new function tar_bind() combine pipeline objects. Add tar_seed() get random number generator seed target currently running.","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"enhancements-0-0-0-9002","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"targets 0.0.0.9002","text":"Allow target-specific future::plan()s resources argument tar_target() (#198, @mattwarkentin). Use library() instead require() command_load_packages(). Evaluate commands directly targets$cache$targets$envir improve convenience interactive debugging (ls() just works now.) reasonably safe now cache populated last minute cleared soon possible (#209, #210).","code":""},{"path":"https://docs.ropensci.org/targets/news/index.html","id":"targets-0009000","dir":"Changelog","previous_headings":"","what":"targets 0.0.0.9000","title":"targets 0.0.0.9000","text":"First version.","code":""}]
